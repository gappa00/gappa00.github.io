/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/components/main/main.vue?vue&type=script&lang=js&":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/components/main/main.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vuedraggable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vuedraggable */ "./node_modules/vuedraggable/dist/vuedraggable.umd.js");
/* harmony import */ var vuedraggable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vuedraggable__WEBPACK_IMPORTED_MODULE_0__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'App',
  data: function data() {
    return {
      nameFirst: '',
      nameSecond: '',
      nameLast: '',
      age: '',
      peoples: [],
      showFromLocal: false
    };
  },
  watch: {},
  mounted: function mounted() {
    if (localStorage.age) {
      this.savedAge = localStorage.age;
    }

    if (localStorage.peoplesLocal) {
      this.peoples = JSON.parse(localStorage.peoplesLocal);
      this.showFromLocal = true;
    }
  },
  components: {
    draggable: vuedraggable__WEBPACK_IMPORTED_MODULE_0___default.a
  },
  methods: {
    addNew: function addNew() {
      this.peoples.push({
        nameFirst: this.nameFirst,
        nameSecond: this.nameSecond,
        nameLast: this.nameLast,
        savedAge: this.age
      });
      this.showFromLocal = true;
      localStorage.peoplesLocal = JSON.stringify(this.peoples);
      console.log(localStorage.peoplesLocal); //JSON.parse(localStorage.peoplesLocal)
    },
    clearLocal: function clearLocal() {
      this.peoples = [];
      localStorage.clear();
      this.showFromLocal = false;
    },
    clearInput: function clearInput() {
      this.nameFirst = this.nameSecond = this.nameLast = this.age = '';
    },
    deleteChelik: function deleteChelik(index) {
      this.peoples.splice(index, 1);
      console.log(this.peoples);
      console.log(index);
      localStorage.peoplesLocal = JSON.stringify(this.peoples);

      if (this.peoples.length == 0) {
        this.clearLocal();
      }
    }
  },
  created: function created() {}
});

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./src/components/main/main.scss?vue&type=style&index=0&lang=scss&":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./src/components/main/main.scss?vue&type=style&index=0&lang=scss& ***!
  \***************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
exports.push([module.i, "@import url(https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@200&display=swap);"]);
// Module
exports.push([module.i, "body {\n  font-family: 'Source Sans Pro', sans-serif;\n}\n.main {\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  background-color: aliceblue;\n}\n.todo-app {\n  max-width: 600px;\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n  background: #d7e5ff;\n  border-radius: 8px;\n  padding: 30px;\n  border: 1px solid #a0a0a0;\n}\n.chelik-input div {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  max-width: 380px;\n  margin: 0 auto 16px;\n}\n.chelik-input input {\n  width: -webkit-fill-available;\n}\n.moving-item {\n  opacity: 0.5;\n  background: #000;\n  border: 1px solid #4299e1;\n}\n.chelik-info__wrap {\n  display: flex;\n  flex-direction: column;\n  background: aliceblue;\n  border: 1px solid #a0a0a0;\n  border-radius: 10px;\n  margin: 32px 10px;\n}\n.chelik-info__title {\n  width: 100%;\n  border-bottom: 1px solid #a0a0a0;\n  height: 32px;\n  line-height: 30px;\n}\n.chelik-info__properties-list {\n  display: flex;\n  height: 30px;\n  line-height: 30px;\n  justify-content: flex-start;\n  align-items: center;\n}\n.chelik-info__properties-index {\n  width: 20%;\n  border-right: 1px solid #a0a0a0;\n}\n.chelik-info__properties-name {\n  width: 45%;\n  border-right: 1px solid #a0a0a0;\n}\n.chelik-info__properties-age {\n  width: 24%;\n  border-right: 1px solid #a0a0a0;\n}\n.chelik-info__properties-blank {\n  width: 11%;\n}\n.chelik-info__list {\n  display: flex;\n  flex-direction: column;\n  line-height: 30px;\n}\n.chelik-info__item {\n  display: flex;\n  justify-content: flex-start;\n  border-top: 1px solid #a0a0a0;\n  height: 32px;\n}\n.chelik-info__item-index {\n  width: 20%;\n  border-right: 1px solid #a0a0a0;\n}\n.chelik-info__item-name {\n  width: 45%;\n  border-right: 1px solid #a0a0a0;\n}\n.chelik-info__item-age {\n  width: 24%;\n  border-right: 1px solid #a0a0a0;\n}\n.chelik-info__item-del {\n  width: 11%;\n}\nbutton {\n  margin: 0px auto;\n}\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names

module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
  "use strict";

  if (global.setImmediate) {
    return;
  }

  var nextHandle = 1; // Spec says greater than zero

  var tasksByHandle = {};
  var currentlyRunningATask = false;
  var doc = global.document;
  var registerImmediate;

  function setImmediate(callback) {
    // Callback can either be a function or a string
    if (typeof callback !== "function") {
      callback = new Function("" + callback);
    } // Copy function arguments


    var args = new Array(arguments.length - 1);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i + 1];
    } // Store and register the task


    var task = {
      callback: callback,
      args: args
    };
    tasksByHandle[nextHandle] = task;
    registerImmediate(nextHandle);
    return nextHandle++;
  }

  function clearImmediate(handle) {
    delete tasksByHandle[handle];
  }

  function run(task) {
    var callback = task.callback;
    var args = task.args;

    switch (args.length) {
      case 0:
        callback();
        break;

      case 1:
        callback(args[0]);
        break;

      case 2:
        callback(args[0], args[1]);
        break;

      case 3:
        callback(args[0], args[1], args[2]);
        break;

      default:
        callback.apply(undefined, args);
        break;
    }
  }

  function runIfPresent(handle) {
    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
    // So if we're currently running a task, we'll need to delay this invocation.
    if (currentlyRunningATask) {
      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
      // "too much recursion" error.
      setTimeout(runIfPresent, 0, handle);
    } else {
      var task = tasksByHandle[handle];

      if (task) {
        currentlyRunningATask = true;

        try {
          run(task);
        } finally {
          clearImmediate(handle);
          currentlyRunningATask = false;
        }
      }
    }
  }

  function installNextTickImplementation() {
    registerImmediate = function (handle) {
      process.nextTick(function () {
        runIfPresent(handle);
      });
    };
  }

  function canUsePostMessage() {
    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
    // where `global.postMessage` means something completely different and can't be used for this purpose.
    if (global.postMessage && !global.importScripts) {
      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;

      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };

      global.postMessage("", "*");
      global.onmessage = oldOnMessage;
      return postMessageIsAsynchronous;
    }
  }

  function installPostMessageImplementation() {
    // Installs an event handler on `global` for the `message` event: see
    // * https://developer.mozilla.org/en/DOM/window.postMessage
    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
    var messagePrefix = "setImmediate$" + Math.random() + "$";

    var onGlobalMessage = function (event) {
      if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
        runIfPresent(+event.data.slice(messagePrefix.length));
      }
    };

    if (global.addEventListener) {
      global.addEventListener("message", onGlobalMessage, false);
    } else {
      global.attachEvent("onmessage", onGlobalMessage);
    }

    registerImmediate = function (handle) {
      global.postMessage(messagePrefix + handle, "*");
    };
  }

  function installMessageChannelImplementation() {
    var channel = new MessageChannel();

    channel.port1.onmessage = function (event) {
      var handle = event.data;
      runIfPresent(handle);
    };

    registerImmediate = function (handle) {
      channel.port2.postMessage(handle);
    };
  }

  function installReadyStateChangeImplementation() {
    var html = doc.documentElement;

    registerImmediate = function (handle) {
      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var script = doc.createElement("script");

      script.onreadystatechange = function () {
        runIfPresent(handle);
        script.onreadystatechange = null;
        html.removeChild(script);
        script = null;
      };

      html.appendChild(script);
    };
  }

  function installSetTimeoutImplementation() {
    registerImmediate = function (handle) {
      setTimeout(runIfPresent, 0, handle);
    };
  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.


  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.

  if ({}.toString.call(global.process) === "[object process]") {
    // For Node.js before 0.9
    installNextTickImplementation();
  } else if (canUsePostMessage()) {
    // For non-IE10 modern browsers
    installPostMessageImplementation();
  } else if (global.MessageChannel) {
    // For web workers, where supported
    installMessageChannelImplementation();
  } else if (doc && "onreadystatechange" in doc.createElement("script")) {
    // For IE 6–8
    installReadyStateChangeImplementation();
  } else {
    // For older browsers
    installSetTimeoutImplementation();
  }

  attachTo.setImmediate = setImmediate;
  attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/sortablejs/modular/sortable.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/sortablejs/modular/sortable.esm.js ***!
  \*********************************************************/
/*! exports provided: default, MultiDrag, Sortable, Swap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiDrag", function() { return MultiDragPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sortable", function() { return Sortable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Swap", function() { return SwapPlugin; });
/**!
 * Sortable 1.10.2
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var version = "1.10.2";

function userAgent(pattern) {
  if (typeof window !== 'undefined' && window.navigator) {
    return !! /*@__PURE__*/navigator.userAgent.match(pattern);
  }
}

var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
var Edge = userAgent(/Edge/i);
var FireFox = userAgent(/firefox/i);
var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
var IOS = userAgent(/iP(ad|od|hone)/i);
var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);
var captureMode = {
  capture: false,
  passive: false
};

function on(el, event, fn) {
  el.addEventListener(event, fn, !IE11OrLess && captureMode);
}

function off(el, event, fn) {
  el.removeEventListener(event, fn, !IE11OrLess && captureMode);
}

function matches(
/**HTMLElement*/
el,
/**String*/
selector) {
  if (!selector) return;
  selector[0] === '>' && (selector = selector.substring(1));

  if (el) {
    try {
      if (el.matches) {
        return el.matches(selector);
      } else if (el.msMatchesSelector) {
        return el.msMatchesSelector(selector);
      } else if (el.webkitMatchesSelector) {
        return el.webkitMatchesSelector(selector);
      }
    } catch (_) {
      return false;
    }
  }

  return false;
}

function getParentOrHost(el) {
  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
}

function closest(
/**HTMLElement*/
el,
/**String*/
selector,
/**HTMLElement*/
ctx, includeCTX) {
  if (el) {
    ctx = ctx || document;

    do {
      if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
        return el;
      }

      if (el === ctx) break;
      /* jshint boss:true */
    } while (el = getParentOrHost(el));
  }

  return null;
}

var R_SPACE = /\s+/g;

function toggleClass(el, name, state) {
  if (el && name) {
    if (el.classList) {
      el.classList[state ? 'add' : 'remove'](name);
    } else {
      var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
      el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
    }
  }
}

function css(el, prop, val) {
  var style = el && el.style;

  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, '');
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }

      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf('webkit') === -1) {
        prop = '-webkit-' + prop;
      }

      style[prop] = val + (typeof val === 'string' ? '' : 'px');
    }
  }
}

function matrix(el, selfOnly) {
  var appliedTransforms = '';

  if (typeof el === 'string') {
    appliedTransforms = el;
  } else {
    do {
      var transform = css(el, 'transform');

      if (transform && transform !== 'none') {
        appliedTransforms = transform + ' ' + appliedTransforms;
      }
      /* jshint boss:true */

    } while (!selfOnly && (el = el.parentNode));
  }

  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
  /*jshint -W056 */

  return matrixFn && new matrixFn(appliedTransforms);
}

function find(ctx, tagName, iterator) {
  if (ctx) {
    var list = ctx.getElementsByTagName(tagName),
        i = 0,
        n = list.length;

    if (iterator) {
      for (; i < n; i++) {
        iterator(list[i], i);
      }
    }

    return list;
  }

  return [];
}

function getWindowScrollingElement() {
  var scrollingElement = document.scrollingElement;

  if (scrollingElement) {
    return scrollingElement;
  } else {
    return document.documentElement;
  }
}
/**
 * Returns the "bounding client rect" of given element
 * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
 * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
 * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
 * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
 * @param  {[HTMLElement]} container              The parent the element will be placed in
 * @return {Object}                               The boundingClientRect of el, with specified adjustments
 */


function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
  if (!el.getBoundingClientRect && el !== window) return;
  var elRect, top, left, bottom, right, height, width;

  if (el !== window && el !== getWindowScrollingElement()) {
    elRect = el.getBoundingClientRect();
    top = elRect.top;
    left = elRect.left;
    bottom = elRect.bottom;
    right = elRect.right;
    height = elRect.height;
    width = elRect.width;
  } else {
    top = 0;
    left = 0;
    bottom = window.innerHeight;
    right = window.innerWidth;
    height = window.innerHeight;
    width = window.innerWidth;
  }

  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
    // Adjust for translate()
    container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
    // Not needed on <= IE11

    if (!IE11OrLess) {
      do {
        if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
          var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container

          top -= containerRect.top + parseInt(css(container, 'border-top-width'));
          left -= containerRect.left + parseInt(css(container, 'border-left-width'));
          bottom = top + elRect.height;
          right = left + elRect.width;
          break;
        }
        /* jshint boss:true */

      } while (container = container.parentNode);
    }
  }

  if (undoScale && el !== window) {
    // Adjust for scale()
    var elMatrix = matrix(container || el),
        scaleX = elMatrix && elMatrix.a,
        scaleY = elMatrix && elMatrix.d;

    if (elMatrix) {
      top /= scaleY;
      left /= scaleX;
      width /= scaleX;
      height /= scaleY;
      bottom = top + height;
      right = left + width;
    }
  }

  return {
    top: top,
    left: left,
    bottom: bottom,
    right: right,
    width: width,
    height: height
  };
}
/**
 * Checks if a side of an element is scrolled past a side of its parents
 * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
 * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
 * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
 * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
 */


function isScrolledPast(el, elSide, parentSide) {
  var parent = getParentAutoScrollElement(el, true),
      elSideVal = getRect(el)[elSide];
  /* jshint boss:true */

  while (parent) {
    var parentSideVal = getRect(parent)[parentSide],
        visible = void 0;

    if (parentSide === 'top' || parentSide === 'left') {
      visible = elSideVal >= parentSideVal;
    } else {
      visible = elSideVal <= parentSideVal;
    }

    if (!visible) return parent;
    if (parent === getWindowScrollingElement()) break;
    parent = getParentAutoScrollElement(parent, false);
  }

  return false;
}
/**
 * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
 * and non-draggable elements
 * @param  {HTMLElement} el       The parent element
 * @param  {Number} childNum      The index of the child
 * @param  {Object} options       Parent Sortable's options
 * @return {HTMLElement}          The child at index childNum, or null if not found
 */


function getChild(el, childNum, options) {
  var currentChild = 0,
      i = 0,
      children = el.children;

  while (i < children.length) {
    if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && children[i] !== Sortable.dragged && closest(children[i], options.draggable, el, false)) {
      if (currentChild === childNum) {
        return children[i];
      }

      currentChild++;
    }

    i++;
  }

  return null;
}
/**
 * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
 * @param  {HTMLElement} el       Parent element
 * @param  {selector} selector    Any other elements that should be ignored
 * @return {HTMLElement}          The last child, ignoring ghostEl
 */


function lastChild(el, selector) {
  var last = el.lastElementChild;

  while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
    last = last.previousElementSibling;
  }

  return last || null;
}
/**
 * Returns the index of an element within its parent for a selected set of
 * elements
 * @param  {HTMLElement} el
 * @param  {selector} selector
 * @return {number}
 */


function index(el, selector) {
  var index = 0;

  if (!el || !el.parentNode) {
    return -1;
  }
  /* jshint boss:true */


  while (el = el.previousElementSibling) {
    if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
      index++;
    }
  }

  return index;
}
/**
 * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
 * The value is returned in real pixels.
 * @param  {HTMLElement} el
 * @return {Array}             Offsets in the format of [left, top]
 */


function getRelativeScrollOffset(el) {
  var offsetLeft = 0,
      offsetTop = 0,
      winScroller = getWindowScrollingElement();

  if (el) {
    do {
      var elMatrix = matrix(el),
          scaleX = elMatrix.a,
          scaleY = elMatrix.d;
      offsetLeft += el.scrollLeft * scaleX;
      offsetTop += el.scrollTop * scaleY;
    } while (el !== winScroller && (el = el.parentNode));
  }

  return [offsetLeft, offsetTop];
}
/**
 * Returns the index of the object within the given array
 * @param  {Array} arr   Array that may or may not hold the object
 * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
 * @return {Number}      The index of the object in the array, or -1
 */


function indexOfObject(arr, obj) {
  for (var i in arr) {
    if (!arr.hasOwnProperty(i)) continue;

    for (var key in obj) {
      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
    }
  }

  return -1;
}

function getParentAutoScrollElement(el, includeSelf) {
  // skip to window
  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
  var elem = el;
  var gotSelf = false;

  do {
    // we don't need to get elem css if it isn't even overflowing in the first place (performance)
    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
      var elemCSS = css(elem);

      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
        if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
        if (gotSelf || includeSelf) return elem;
        gotSelf = true;
      }
    }
    /* jshint boss:true */

  } while (elem = elem.parentNode);

  return getWindowScrollingElement();
}

function extend(dst, src) {
  if (dst && src) {
    for (var key in src) {
      if (src.hasOwnProperty(key)) {
        dst[key] = src[key];
      }
    }
  }

  return dst;
}

function isRectEqual(rect1, rect2) {
  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
}

var _throttleTimeout;

function throttle(callback, ms) {
  return function () {
    if (!_throttleTimeout) {
      var args = arguments,
          _this = this;

      if (args.length === 1) {
        callback.call(_this, args[0]);
      } else {
        callback.apply(_this, args);
      }

      _throttleTimeout = setTimeout(function () {
        _throttleTimeout = void 0;
      }, ms);
    }
  };
}

function cancelThrottle() {
  clearTimeout(_throttleTimeout);
  _throttleTimeout = void 0;
}

function scrollBy(el, x, y) {
  el.scrollLeft += x;
  el.scrollTop += y;
}

function clone(el) {
  var Polymer = window.Polymer;
  var $ = window.jQuery || window.Zepto;

  if (Polymer && Polymer.dom) {
    return Polymer.dom(el).cloneNode(true);
  } else if ($) {
    return $(el).clone(true)[0];
  } else {
    return el.cloneNode(true);
  }
}

function setRect(el, rect) {
  css(el, 'position', 'absolute');
  css(el, 'top', rect.top);
  css(el, 'left', rect.left);
  css(el, 'width', rect.width);
  css(el, 'height', rect.height);
}

function unsetRect(el) {
  css(el, 'position', '');
  css(el, 'top', '');
  css(el, 'left', '');
  css(el, 'width', '');
  css(el, 'height', '');
}

var expando = 'Sortable' + new Date().getTime();

function AnimationStateManager() {
  var animationStates = [],
      animationCallbackId;
  return {
    captureAnimationState: function captureAnimationState() {
      animationStates = [];
      if (!this.options.animation) return;
      var children = [].slice.call(this.el.children);
      children.forEach(function (child) {
        if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
        animationStates.push({
          target: child,
          rect: getRect(child)
        });

        var fromRect = _objectSpread({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation


        if (child.thisAnimationDuration) {
          var childMatrix = matrix(child, true);

          if (childMatrix) {
            fromRect.top -= childMatrix.f;
            fromRect.left -= childMatrix.e;
          }
        }

        child.fromRect = fromRect;
      });
    },
    addAnimationState: function addAnimationState(state) {
      animationStates.push(state);
    },
    removeAnimationState: function removeAnimationState(target) {
      animationStates.splice(indexOfObject(animationStates, {
        target: target
      }), 1);
    },
    animateAll: function animateAll(callback) {
      var _this = this;

      if (!this.options.animation) {
        clearTimeout(animationCallbackId);
        if (typeof callback === 'function') callback();
        return;
      }

      var animating = false,
          animationTime = 0;
      animationStates.forEach(function (state) {
        var time = 0,
            target = state.target,
            fromRect = target.fromRect,
            toRect = getRect(target),
            prevFromRect = target.prevFromRect,
            prevToRect = target.prevToRect,
            animatingRect = state.rect,
            targetMatrix = matrix(target, true);

        if (targetMatrix) {
          // Compensate for current animation
          toRect.top -= targetMatrix.f;
          toRect.left -= targetMatrix.e;
        }

        target.toRect = toRect;

        if (target.thisAnimationDuration) {
          // Could also check if animatingRect is between fromRect and toRect
          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect
          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
            // If returning to same place as started from animation and on same axis
            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
          }
        } // if fromRect != toRect: animate


        if (!isRectEqual(toRect, fromRect)) {
          target.prevFromRect = fromRect;
          target.prevToRect = toRect;

          if (!time) {
            time = _this.options.animation;
          }

          _this.animate(target, animatingRect, toRect, time);
        }

        if (time) {
          animating = true;
          animationTime = Math.max(animationTime, time);
          clearTimeout(target.animationResetTimer);
          target.animationResetTimer = setTimeout(function () {
            target.animationTime = 0;
            target.prevFromRect = null;
            target.fromRect = null;
            target.prevToRect = null;
            target.thisAnimationDuration = null;
          }, time);
          target.thisAnimationDuration = time;
        }
      });
      clearTimeout(animationCallbackId);

      if (!animating) {
        if (typeof callback === 'function') callback();
      } else {
        animationCallbackId = setTimeout(function () {
          if (typeof callback === 'function') callback();
        }, animationTime);
      }

      animationStates = [];
    },
    animate: function animate(target, currentRect, toRect, duration) {
      if (duration) {
        css(target, 'transition', '');
        css(target, 'transform', '');
        var elMatrix = matrix(this.el),
            scaleX = elMatrix && elMatrix.a,
            scaleY = elMatrix && elMatrix.d,
            translateX = (currentRect.left - toRect.left) / (scaleX || 1),
            translateY = (currentRect.top - toRect.top) / (scaleY || 1);
        target.animatingX = !!translateX;
        target.animatingY = !!translateY;
        css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
        repaint(target); // repaint

        css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
        css(target, 'transform', 'translate3d(0,0,0)');
        typeof target.animated === 'number' && clearTimeout(target.animated);
        target.animated = setTimeout(function () {
          css(target, 'transition', '');
          css(target, 'transform', '');
          target.animated = false;
          target.animatingX = false;
          target.animatingY = false;
        }, duration);
      }
    }
  };
}

function repaint(target) {
  return target.offsetWidth;
}

function calculateRealTime(animatingRect, fromRect, toRect, options) {
  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
}

var plugins = [];
var defaults = {
  initializeByDefault: true
};
var PluginManager = {
  mount: function mount(plugin) {
    // Set default static properties
    for (var option in defaults) {
      if (defaults.hasOwnProperty(option) && !(option in plugin)) {
        plugin[option] = defaults[option];
      }
    }

    plugins.push(plugin);
  },
  pluginEvent: function pluginEvent(eventName, sortable, evt) {
    var _this = this;

    this.eventCanceled = false;

    evt.cancel = function () {
      _this.eventCanceled = true;
    };

    var eventNameGlobal = eventName + 'Global';
    plugins.forEach(function (plugin) {
      if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable

      if (sortable[plugin.pluginName][eventNameGlobal]) {
        sortable[plugin.pluginName][eventNameGlobal](_objectSpread({
          sortable: sortable
        }, evt));
      } // Only fire plugin event if plugin is enabled in this sortable,
      // and plugin has event defined


      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
        sortable[plugin.pluginName][eventName](_objectSpread({
          sortable: sortable
        }, evt));
      }
    });
  },
  initializePlugins: function initializePlugins(sortable, el, defaults, options) {
    plugins.forEach(function (plugin) {
      var pluginName = plugin.pluginName;
      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
      var initialized = new plugin(sortable, el, sortable.options);
      initialized.sortable = sortable;
      initialized.options = sortable.options;
      sortable[pluginName] = initialized; // Add default options from plugin

      _extends(defaults, initialized.defaults);
    });

    for (var option in sortable.options) {
      if (!sortable.options.hasOwnProperty(option)) continue;
      var modified = this.modifyOption(sortable, option, sortable.options[option]);

      if (typeof modified !== 'undefined') {
        sortable.options[option] = modified;
      }
    }
  },
  getEventProperties: function getEventProperties(name, sortable) {
    var eventProperties = {};
    plugins.forEach(function (plugin) {
      if (typeof plugin.eventProperties !== 'function') return;

      _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
    });
    return eventProperties;
  },
  modifyOption: function modifyOption(sortable, name, value) {
    var modifiedValue;
    plugins.forEach(function (plugin) {
      // Plugin must exist on the Sortable
      if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin

      if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
        modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
      }
    });
    return modifiedValue;
  }
};

function dispatchEvent(_ref) {
  var sortable = _ref.sortable,
      rootEl = _ref.rootEl,
      name = _ref.name,
      targetEl = _ref.targetEl,
      cloneEl = _ref.cloneEl,
      toEl = _ref.toEl,
      fromEl = _ref.fromEl,
      oldIndex = _ref.oldIndex,
      newIndex = _ref.newIndex,
      oldDraggableIndex = _ref.oldDraggableIndex,
      newDraggableIndex = _ref.newDraggableIndex,
      originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      extraEventProperties = _ref.extraEventProperties;
  sortable = sortable || rootEl && rootEl[expando];
  if (!sortable) return;
  var evt,
      options = sortable.options,
      onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent(name, {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent(name, true, true);
  }

  evt.to = toEl || rootEl;
  evt.from = fromEl || rootEl;
  evt.item = targetEl || rootEl;
  evt.clone = cloneEl;
  evt.oldIndex = oldIndex;
  evt.newIndex = newIndex;
  evt.oldDraggableIndex = oldDraggableIndex;
  evt.newDraggableIndex = newDraggableIndex;
  evt.originalEvent = originalEvent;
  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;

  var allEventProperties = _objectSpread({}, extraEventProperties, PluginManager.getEventProperties(name, sortable));

  for (var option in allEventProperties) {
    evt[option] = allEventProperties[option];
  }

  if (rootEl) {
    rootEl.dispatchEvent(evt);
  }

  if (options[onName]) {
    options[onName].call(sortable, evt);
  }
}

var pluginEvent = function pluginEvent(eventName, sortable) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      originalEvent = _ref.evt,
      data = _objectWithoutProperties(_ref, ["evt"]);

  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread({
    dragEl: dragEl,
    parentEl: parentEl,
    ghostEl: ghostEl,
    rootEl: rootEl,
    nextEl: nextEl,
    lastDownEl: lastDownEl,
    cloneEl: cloneEl,
    cloneHidden: cloneHidden,
    dragStarted: moved,
    putSortable: putSortable,
    activeSortable: Sortable.active,
    originalEvent: originalEvent,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex,
    hideGhostForTarget: _hideGhostForTarget,
    unhideGhostForTarget: _unhideGhostForTarget,
    cloneNowHidden: function cloneNowHidden() {
      cloneHidden = true;
    },
    cloneNowShown: function cloneNowShown() {
      cloneHidden = false;
    },
    dispatchSortableEvent: function dispatchSortableEvent(name) {
      _dispatchEvent({
        sortable: sortable,
        name: name,
        originalEvent: originalEvent
      });
    }
  }, data));
};

function _dispatchEvent(info) {
  dispatchEvent(_objectSpread({
    putSortable: putSortable,
    cloneEl: cloneEl,
    targetEl: dragEl,
    rootEl: rootEl,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex
  }, info));
}

var dragEl,
    parentEl,
    ghostEl,
    rootEl,
    nextEl,
    lastDownEl,
    cloneEl,
    cloneHidden,
    oldIndex,
    newIndex,
    oldDraggableIndex,
    newDraggableIndex,
    activeGroup,
    putSortable,
    awaitingDragStarted = false,
    ignoreNextClick = false,
    sortables = [],
    tapEvt,
    touchEvt,
    lastDx,
    lastDy,
    tapDistanceLeft,
    tapDistanceTop,
    moved,
    lastTarget,
    lastDirection,
    pastFirstInvertThresh = false,
    isCircumstantialInvert = false,
    targetMoveDistance,
    // For positioning ghost absolutely
ghostRelativeParent,
    ghostRelativeParentInitialScroll = [],
    // (left, top)
_silent = false,
    savedInputChecked = [];
/** @const */

var documentExists = typeof document !== 'undefined',
    PositionGhostAbsolutely = IOS,
    CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
    // This will not pass for IE9, because IE9 DnD only works on anchors
supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
    supportCssPointerEvents = function () {
  if (!documentExists) return; // false when <= IE11

  if (IE11OrLess) {
    return false;
  }

  var el = document.createElement('x');
  el.style.cssText = 'pointer-events:auto';
  return el.style.pointerEvents === 'auto';
}(),
    _detectDirection = function _detectDirection(el, options) {
  var elCSS = css(el),
      elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
      child1 = getChild(el, 0, options),
      child2 = getChild(el, 1, options),
      firstChildCSS = child1 && css(child1),
      secondChildCSS = child2 && css(child2),
      firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
      secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;

  if (elCSS.display === 'flex') {
    return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
  }

  if (elCSS.display === 'grid') {
    return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
  }

  if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
    var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
    return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
  }

  return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
},
    _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
  var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
      dragElOppLength = vertical ? dragRect.width : dragRect.height,
      targetS1Opp = vertical ? targetRect.left : targetRect.top,
      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
      targetOppLength = vertical ? targetRect.width : targetRect.height;
  return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
},

/**
 * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
 * @param  {Number} x      X position
 * @param  {Number} y      Y position
 * @return {HTMLElement}   Element of the first found nearest Sortable
 */
_detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
  var ret;
  sortables.some(function (sortable) {
    if (lastChild(sortable)) return;
    var rect = getRect(sortable),
        threshold = sortable[expando].options.emptyInsertThreshold,
        insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
        insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;

    if (threshold && insideHorizontally && insideVertically) {
      return ret = sortable;
    }
  });
  return ret;
},
    _prepareGroup = function _prepareGroup(options) {
  function toFn(value, pull) {
    return function (to, from, dragEl, evt) {
      var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;

      if (value == null && (pull || sameGroup)) {
        // Default pull value
        // Default pull and put value if same group
        return true;
      } else if (value == null || value === false) {
        return false;
      } else if (pull && value === 'clone') {
        return value;
      } else if (typeof value === 'function') {
        return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
      } else {
        var otherGroup = (pull ? to : from).options.group.name;
        return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
      }
    };
  }

  var group = {};
  var originalGroup = options.group;

  if (!originalGroup || _typeof(originalGroup) != 'object') {
    originalGroup = {
      name: originalGroup
    };
  }

  group.name = originalGroup.name;
  group.checkPull = toFn(originalGroup.pull, true);
  group.checkPut = toFn(originalGroup.put);
  group.revertClone = originalGroup.revertClone;
  options.group = group;
},
    _hideGhostForTarget = function _hideGhostForTarget() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, 'display', 'none');
  }
},
    _unhideGhostForTarget = function _unhideGhostForTarget() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, 'display', '');
  }
}; // #1184 fix - Prevent click event on fallback if dragged but item not changed position


if (documentExists) {
  document.addEventListener('click', function (evt) {
    if (ignoreNextClick) {
      evt.preventDefault();
      evt.stopPropagation && evt.stopPropagation();
      evt.stopImmediatePropagation && evt.stopImmediatePropagation();
      ignoreNextClick = false;
      return false;
    }
  }, true);
}

var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
  if (dragEl) {
    evt = evt.touches ? evt.touches[0] : evt;

    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);

    if (nearest) {
      // Create imitation event
      var event = {};

      for (var i in evt) {
        if (evt.hasOwnProperty(i)) {
          event[i] = evt[i];
        }
      }

      event.target = event.rootEl = nearest;
      event.preventDefault = void 0;
      event.stopPropagation = void 0;

      nearest[expando]._onDragOver(event);
    }
  }
};

var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
  if (dragEl) {
    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
  }
};
/**
 * @class  Sortable
 * @param  {HTMLElement}  el
 * @param  {Object}       [options]
 */


function Sortable(el, options) {
  if (!(el && el.nodeType && el.nodeType === 1)) {
    throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
  }

  this.el = el; // root element

  this.options = options = _extends({}, options); // Export instance

  el[expando] = this;
  var defaults = {
    group: null,
    sort: true,
    disabled: false,
    store: null,
    handle: null,
    draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
    swapThreshold: 1,
    // percentage; 0 <= x <= 1
    invertSwap: false,
    // invert always
    invertedSwapThreshold: null,
    // will be set to same as swapThreshold if default
    removeCloneOnHide: true,
    direction: function direction() {
      return _detectDirection(el, this.options);
    },
    ghostClass: 'sortable-ghost',
    chosenClass: 'sortable-chosen',
    dragClass: 'sortable-drag',
    ignore: 'a, img',
    filter: null,
    preventOnFilter: true,
    animation: 0,
    easing: null,
    setData: function setData(dataTransfer, dragEl) {
      dataTransfer.setData('Text', dragEl.textContent);
    },
    dropBubble: false,
    dragoverBubble: false,
    dataIdAttr: 'data-id',
    delay: 0,
    delayOnTouchOnly: false,
    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
    forceFallback: false,
    fallbackClass: 'sortable-fallback',
    fallbackOnBody: false,
    fallbackTolerance: 0,
    fallbackOffset: {
      x: 0,
      y: 0
    },
    supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window,
    emptyInsertThreshold: 5
  };
  PluginManager.initializePlugins(this, el, defaults); // Set default options

  for (var name in defaults) {
    !(name in options) && (options[name] = defaults[name]);
  }

  _prepareGroup(options); // Bind all private methods


  for (var fn in this) {
    if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
      this[fn] = this[fn].bind(this);
    }
  } // Setup drag mode


  this.nativeDraggable = options.forceFallback ? false : supportDraggable;

  if (this.nativeDraggable) {
    // Touch start threshold cannot be greater than the native dragstart threshold
    this.options.touchStartThreshold = 1;
  } // Bind events


  if (options.supportPointer) {
    on(el, 'pointerdown', this._onTapStart);
  } else {
    on(el, 'mousedown', this._onTapStart);
    on(el, 'touchstart', this._onTapStart);
  }

  if (this.nativeDraggable) {
    on(el, 'dragover', this);
    on(el, 'dragenter', this);
  }

  sortables.push(this.el); // Restore sorting

  options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager

  _extends(this, AnimationStateManager());
}

Sortable.prototype =
/** @lends Sortable.prototype */
{
  constructor: Sortable,
  _isOutsideThisEl: function _isOutsideThisEl(target) {
    if (!this.el.contains(target) && target !== this.el) {
      lastTarget = null;
    }
  },
  _getDirection: function _getDirection(evt, target) {
    return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
  },
  _onTapStart: function _onTapStart(
  /** Event|TouchEvent */
  evt) {
    if (!evt.cancelable) return;

    var _this = this,
        el = this.el,
        options = this.options,
        preventOnFilter = options.preventOnFilter,
        type = evt.type,
        touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
        target = (touch || evt).target,
        originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
        filter = options.filter;

    _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.


    if (dragEl) {
      return;
    }

    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
      return; // only left button and enabled
    } // cancel dnd if original target is content editable


    if (originalTarget.isContentEditable) {
      return;
    }

    target = closest(target, options.draggable, el, false);

    if (target && target.animated) {
      return;
    }

    if (lastDownEl === target) {
      // Ignoring duplicate `down`
      return;
    } // Get the index of the dragged element within its parent


    oldIndex = index(target);
    oldDraggableIndex = index(target, options.draggable); // Check filter

    if (typeof filter === 'function') {
      if (filter.call(this, evt, target, this)) {
        _dispatchEvent({
          sortable: _this,
          rootEl: originalTarget,
          name: 'filter',
          targetEl: target,
          toEl: el,
          fromEl: el
        });

        pluginEvent('filter', _this, {
          evt: evt
        });
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    } else if (filter) {
      filter = filter.split(',').some(function (criteria) {
        criteria = closest(originalTarget, criteria.trim(), el, false);

        if (criteria) {
          _dispatchEvent({
            sortable: _this,
            rootEl: criteria,
            name: 'filter',
            targetEl: target,
            fromEl: el,
            toEl: el
          });

          pluginEvent('filter', _this, {
            evt: evt
          });
          return true;
        }
      });

      if (filter) {
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    }

    if (options.handle && !closest(originalTarget, options.handle, el, false)) {
      return;
    } // Prepare `dragstart`


    this._prepareDragStart(evt, touch, target);
  },
  _prepareDragStart: function _prepareDragStart(
  /** Event */
  evt,
  /** Touch */
  touch,
  /** HTMLElement */
  target) {
    var _this = this,
        el = _this.el,
        options = _this.options,
        ownerDocument = el.ownerDocument,
        dragStartFn;

    if (target && !dragEl && target.parentNode === el) {
      var dragRect = getRect(target);
      rootEl = el;
      dragEl = target;
      parentEl = dragEl.parentNode;
      nextEl = dragEl.nextSibling;
      lastDownEl = target;
      activeGroup = options.group;
      Sortable.dragged = dragEl;
      tapEvt = {
        target: dragEl,
        clientX: (touch || evt).clientX,
        clientY: (touch || evt).clientY
      };
      tapDistanceLeft = tapEvt.clientX - dragRect.left;
      tapDistanceTop = tapEvt.clientY - dragRect.top;
      this._lastX = (touch || evt).clientX;
      this._lastY = (touch || evt).clientY;
      dragEl.style['will-change'] = 'all';

      dragStartFn = function dragStartFn() {
        pluginEvent('delayEnded', _this, {
          evt: evt
        });

        if (Sortable.eventCanceled) {
          _this._onDrop();

          return;
        } // Delayed drag has been triggered
        // we can re-enable the events: touchmove/mousemove


        _this._disableDelayedDragEvents();

        if (!FireFox && _this.nativeDraggable) {
          dragEl.draggable = true;
        } // Bind the events: dragstart/dragend


        _this._triggerDragStart(evt, touch); // Drag start event


        _dispatchEvent({
          sortable: _this,
          name: 'choose',
          originalEvent: evt
        }); // Chosen item


        toggleClass(dragEl, options.chosenClass, true);
      }; // Disable "draggable"


      options.ignore.split(',').forEach(function (criteria) {
        find(dragEl, criteria.trim(), _disableDraggable);
      });
      on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mouseup', _this._onDrop);
      on(ownerDocument, 'touchend', _this._onDrop);
      on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)

      if (FireFox && this.nativeDraggable) {
        this.options.touchStartThreshold = 4;
        dragEl.draggable = true;
      }

      pluginEvent('delayStart', this, {
        evt: evt
      }); // Delay is impossible for native DnD in Edge or IE

      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
        if (Sortable.eventCanceled) {
          this._onDrop();

          return;
        } // If the user moves the pointer or let go the click or touch
        // before the delay has been reached:
        // disable the delayed drag


        on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
        on(ownerDocument, 'touchend', _this._disableDelayedDrag);
        on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
        on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
        on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
        options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
      } else {
        dragStartFn();
      }
    }
  },
  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(
  /** TouchEvent|PointerEvent **/
  e) {
    var touch = e.touches ? e.touches[0] : e;

    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
      this._disableDelayedDrag();
    }
  },
  _disableDelayedDrag: function _disableDelayedDrag() {
    dragEl && _disableDraggable(dragEl);
    clearTimeout(this._dragStartTimer);

    this._disableDelayedDragEvents();
  },
  _disableDelayedDragEvents: function _disableDelayedDragEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._disableDelayedDrag);
    off(ownerDocument, 'touchend', this._disableDelayedDrag);
    off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
    off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
  },
  _triggerDragStart: function _triggerDragStart(
  /** Event */
  evt,
  /** Touch */
  touch) {
    touch = touch || evt.pointerType == 'touch' && evt;

    if (!this.nativeDraggable || touch) {
      if (this.options.supportPointer) {
        on(document, 'pointermove', this._onTouchMove);
      } else if (touch) {
        on(document, 'touchmove', this._onTouchMove);
      } else {
        on(document, 'mousemove', this._onTouchMove);
      }
    } else {
      on(dragEl, 'dragend', this);
      on(rootEl, 'dragstart', this._onDragStart);
    }

    try {
      if (document.selection) {
        // Timeout neccessary for IE9
        _nextTick(function () {
          document.selection.empty();
        });
      } else {
        window.getSelection().removeAllRanges();
      }
    } catch (err) {}
  },
  _dragStarted: function _dragStarted(fallback, evt) {
    awaitingDragStarted = false;

    if (rootEl && dragEl) {
      pluginEvent('dragStarted', this, {
        evt: evt
      });

      if (this.nativeDraggable) {
        on(document, 'dragover', _checkOutsideTargetEl);
      }

      var options = this.options; // Apply effect

      !fallback && toggleClass(dragEl, options.dragClass, false);
      toggleClass(dragEl, options.ghostClass, true);
      Sortable.active = this;
      fallback && this._appendGhost(); // Drag start event

      _dispatchEvent({
        sortable: this,
        name: 'start',
        originalEvent: evt
      });
    } else {
      this._nulling();
    }
  },
  _emulateDragOver: function _emulateDragOver() {
    if (touchEvt) {
      this._lastX = touchEvt.clientX;
      this._lastY = touchEvt.clientY;

      _hideGhostForTarget();

      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
      var parent = target;

      while (target && target.shadowRoot) {
        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        if (target === parent) break;
        parent = target;
      }

      dragEl.parentNode[expando]._isOutsideThisEl(target);

      if (parent) {
        do {
          if (parent[expando]) {
            var inserted = void 0;
            inserted = parent[expando]._onDragOver({
              clientX: touchEvt.clientX,
              clientY: touchEvt.clientY,
              target: target,
              rootEl: parent
            });

            if (inserted && !this.options.dragoverBubble) {
              break;
            }
          }

          target = parent; // store last element
        }
        /* jshint boss:true */
        while (parent = parent.parentNode);
      }

      _unhideGhostForTarget();
    }
  },
  _onTouchMove: function _onTouchMove(
  /**TouchEvent*/
  evt) {
    if (tapEvt) {
      var options = this.options,
          fallbackTolerance = options.fallbackTolerance,
          fallbackOffset = options.fallbackOffset,
          touch = evt.touches ? evt.touches[0] : evt,
          ghostMatrix = ghostEl && matrix(ghostEl, true),
          scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
          scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
          relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
          dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
          dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging

      if (!Sortable.active && !awaitingDragStarted) {
        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
          return;
        }

        this._onDragStart(evt, true);
      }

      if (ghostEl) {
        if (ghostMatrix) {
          ghostMatrix.e += dx - (lastDx || 0);
          ghostMatrix.f += dy - (lastDy || 0);
        } else {
          ghostMatrix = {
            a: 1,
            b: 0,
            c: 0,
            d: 1,
            e: dx,
            f: dy
          };
        }

        var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
        css(ghostEl, 'webkitTransform', cssMatrix);
        css(ghostEl, 'mozTransform', cssMatrix);
        css(ghostEl, 'msTransform', cssMatrix);
        css(ghostEl, 'transform', cssMatrix);
        lastDx = dx;
        lastDy = dy;
        touchEvt = touch;
      }

      evt.cancelable && evt.preventDefault();
    }
  },
  _appendGhost: function _appendGhost() {
    // Bug if using scale(): https://stackoverflow.com/questions/2637058
    // Not being adjusted for
    if (!ghostEl) {
      var container = this.options.fallbackOnBody ? document.body : rootEl,
          rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
          options = this.options; // Position absolutely

      if (PositionGhostAbsolutely) {
        // Get relatively positioned parent
        ghostRelativeParent = container;

        while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
          ghostRelativeParent = ghostRelativeParent.parentNode;
        }

        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
          if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
          rect.top += ghostRelativeParent.scrollTop;
          rect.left += ghostRelativeParent.scrollLeft;
        } else {
          ghostRelativeParent = getWindowScrollingElement();
        }

        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
      }

      ghostEl = dragEl.cloneNode(true);
      toggleClass(ghostEl, options.ghostClass, false);
      toggleClass(ghostEl, options.fallbackClass, true);
      toggleClass(ghostEl, options.dragClass, true);
      css(ghostEl, 'transition', '');
      css(ghostEl, 'transform', '');
      css(ghostEl, 'box-sizing', 'border-box');
      css(ghostEl, 'margin', 0);
      css(ghostEl, 'top', rect.top);
      css(ghostEl, 'left', rect.left);
      css(ghostEl, 'width', rect.width);
      css(ghostEl, 'height', rect.height);
      css(ghostEl, 'opacity', '0.8');
      css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
      css(ghostEl, 'zIndex', '100000');
      css(ghostEl, 'pointerEvents', 'none');
      Sortable.ghost = ghostEl;
      container.appendChild(ghostEl); // Set transform-origin

      css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
    }
  },
  _onDragStart: function _onDragStart(
  /**Event*/
  evt,
  /**boolean*/
  fallback) {
    var _this = this;

    var dataTransfer = evt.dataTransfer;
    var options = _this.options;
    pluginEvent('dragStart', this, {
      evt: evt
    });

    if (Sortable.eventCanceled) {
      this._onDrop();

      return;
    }

    pluginEvent('setupClone', this);

    if (!Sortable.eventCanceled) {
      cloneEl = clone(dragEl);
      cloneEl.draggable = false;
      cloneEl.style['will-change'] = '';

      this._hideClone();

      toggleClass(cloneEl, this.options.chosenClass, false);
      Sortable.clone = cloneEl;
    } // #1143: IFrame support workaround


    _this.cloneId = _nextTick(function () {
      pluginEvent('clone', _this);
      if (Sortable.eventCanceled) return;

      if (!_this.options.removeCloneOnHide) {
        rootEl.insertBefore(cloneEl, dragEl);
      }

      _this._hideClone();

      _dispatchEvent({
        sortable: _this,
        name: 'clone'
      });
    });
    !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events

    if (fallback) {
      ignoreNextClick = true;
      _this._loopId = setInterval(_this._emulateDragOver, 50);
    } else {
      // Undo what was set in _prepareDragStart before drag started
      off(document, 'mouseup', _this._onDrop);
      off(document, 'touchend', _this._onDrop);
      off(document, 'touchcancel', _this._onDrop);

      if (dataTransfer) {
        dataTransfer.effectAllowed = 'move';
        options.setData && options.setData.call(_this, dataTransfer, dragEl);
      }

      on(document, 'drop', _this); // #1276 fix:

      css(dragEl, 'transform', 'translateZ(0)');
    }

    awaitingDragStarted = true;
    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
    on(document, 'selectstart', _this);
    moved = true;

    if (Safari) {
      css(document.body, 'user-select', 'none');
    }
  },
  // Returns true - if no further action is needed (either inserted or another condition)
  _onDragOver: function _onDragOver(
  /**Event*/
  evt) {
    var el = this.el,
        target = evt.target,
        dragRect,
        targetRect,
        revert,
        options = this.options,
        group = options.group,
        activeSortable = Sortable.active,
        isOwner = activeGroup === group,
        canSort = options.sort,
        fromSortable = putSortable || activeSortable,
        vertical,
        _this = this,
        completedFired = false;

    if (_silent) return;

    function dragOverEvent(name, extra) {
      pluginEvent(name, _this, _objectSpread({
        evt: evt,
        isOwner: isOwner,
        axis: vertical ? 'vertical' : 'horizontal',
        revert: revert,
        dragRect: dragRect,
        targetRect: targetRect,
        canSort: canSort,
        fromSortable: fromSortable,
        target: target,
        completed: completed,
        onMove: function onMove(target, after) {
          return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
        },
        changed: changed
      }, extra));
    } // Capture animation state


    function capture() {
      dragOverEvent('dragOverAnimationCapture');

      _this.captureAnimationState();

      if (_this !== fromSortable) {
        fromSortable.captureAnimationState();
      }
    } // Return invocation when dragEl is inserted (or completed)


    function completed(insertion) {
      dragOverEvent('dragOverCompleted', {
        insertion: insertion
      });

      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        } else {
          activeSortable._showClone(_this);
        }

        if (_this !== fromSortable) {
          // Set ghost class to new sortable's ghost class
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
          toggleClass(dragEl, options.ghostClass, true);
        }

        if (putSortable !== _this && _this !== Sortable.active) {
          putSortable = _this;
        } else if (_this === Sortable.active && putSortable) {
          putSortable = null;
        } // Animation


        if (fromSortable === _this) {
          _this._ignoreWhileAnimating = target;
        }

        _this.animateAll(function () {
          dragOverEvent('dragOverAnimationComplete');
          _this._ignoreWhileAnimating = null;
        });

        if (_this !== fromSortable) {
          fromSortable.animateAll();
          fromSortable._ignoreWhileAnimating = null;
        }
      } // Null lastTarget if it is not inside a previously swapped element


      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
        lastTarget = null;
      } // no bubbling and not fallback


      if (!options.dragoverBubble && !evt.rootEl && target !== document) {
        dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted


        !insertion && nearestEmptyInsertDetectEvent(evt);
      }

      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
      return completedFired = true;
    } // Call when dragEl has been inserted


    function changed() {
      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);

      _dispatchEvent({
        sortable: _this,
        name: 'change',
        toEl: el,
        newIndex: newIndex,
        newDraggableIndex: newDraggableIndex,
        originalEvent: evt
      });
    }

    if (evt.preventDefault !== void 0) {
      evt.cancelable && evt.preventDefault();
    }

    target = closest(target, options.draggable, el, true);
    dragOverEvent('dragOver');
    if (Sortable.eventCanceled) return completedFired;

    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
      return completed(false);
    }

    ignoreNextClick = false;

    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list
    : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
      vertical = this._getDirection(evt, target) === 'vertical';
      dragRect = getRect(dragEl);
      dragOverEvent('dragOverValid');
      if (Sortable.eventCanceled) return completedFired;

      if (revert) {
        parentEl = rootEl; // actualization

        capture();

        this._hideClone();

        dragOverEvent('revert');

        if (!Sortable.eventCanceled) {
          if (nextEl) {
            rootEl.insertBefore(dragEl, nextEl);
          } else {
            rootEl.appendChild(dragEl);
          }
        }

        return completed(true);
      }

      var elLastChild = lastChild(el, options.draggable);

      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
        // If already at end of list: Do not insert
        if (elLastChild === dragEl) {
          return completed(false);
        } // assign target only if condition is true


        if (elLastChild && el === evt.target) {
          target = elLastChild;
        }

        if (target) {
          targetRect = getRect(target);
        }

        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
          capture();
          el.appendChild(dragEl);
          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (target.parentNode === el) {
        targetRect = getRect(target);
        var direction = 0,
            targetBeforeFirstSwap,
            differentLevel = dragEl.parentNode !== el,
            differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
            side1 = vertical ? 'top' : 'left',
            scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
            scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;

        if (lastTarget !== target) {
          targetBeforeFirstSwap = targetRect[side1];
          pastFirstInvertThresh = false;
          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
        }

        direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
        var sibling;

        if (direction !== 0) {
          // Check if target is beside dragEl in respective direction (ignoring hidden elements)
          var dragIndex = index(dragEl);

          do {
            dragIndex -= direction;
            sibling = parentEl.children[dragIndex];
          } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
        } // If dragEl is already beside target: Do not insert


        if (direction === 0 || sibling === target) {
          return completed(false);
        }

        lastTarget = target;
        lastDirection = direction;
        var nextSibling = target.nextElementSibling,
            after = false;
        after = direction === 1;

        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

        if (moveVector !== false) {
          if (moveVector === 1 || moveVector === -1) {
            after = moveVector === 1;
          }

          _silent = true;
          setTimeout(_unsilent, 30);
          capture();

          if (after && !nextSibling) {
            el.appendChild(dragEl);
          } else {
            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
          } // Undo chrome's scroll adjustment (has no effect on other browsers)


          if (scrolledPastTop) {
            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
          }

          parentEl = dragEl.parentNode; // actualization
          // must be done before animation

          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
          }

          changed();
          return completed(true);
        }
      }

      if (el.contains(dragEl)) {
        return completed(false);
      }
    }

    return false;
  },
  _ignoreWhileAnimating: null,
  _offMoveEvents: function _offMoveEvents() {
    off(document, 'mousemove', this._onTouchMove);
    off(document, 'touchmove', this._onTouchMove);
    off(document, 'pointermove', this._onTouchMove);
    off(document, 'dragover', nearestEmptyInsertDetectEvent);
    off(document, 'mousemove', nearestEmptyInsertDetectEvent);
    off(document, 'touchmove', nearestEmptyInsertDetectEvent);
  },
  _offUpEvents: function _offUpEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._onDrop);
    off(ownerDocument, 'touchend', this._onDrop);
    off(ownerDocument, 'pointerup', this._onDrop);
    off(ownerDocument, 'touchcancel', this._onDrop);
    off(document, 'selectstart', this);
  },
  _onDrop: function _onDrop(
  /**Event*/
  evt) {
    var el = this.el,
        options = this.options; // Get the index of the dragged element within its parent

    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);
    pluginEvent('drop', this, {
      evt: evt
    });
    parentEl = dragEl && dragEl.parentNode; // Get again after plugin event

    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);

    if (Sortable.eventCanceled) {
      this._nulling();

      return;
    }

    awaitingDragStarted = false;
    isCircumstantialInvert = false;
    pastFirstInvertThresh = false;
    clearInterval(this._loopId);
    clearTimeout(this._dragStartTimer);

    _cancelNextTick(this.cloneId);

    _cancelNextTick(this._dragStartId); // Unbind events


    if (this.nativeDraggable) {
      off(document, 'drop', this);
      off(el, 'dragstart', this._onDragStart);
    }

    this._offMoveEvents();

    this._offUpEvents();

    if (Safari) {
      css(document.body, 'user-select', '');
    }

    css(dragEl, 'transform', '');

    if (evt) {
      if (moved) {
        evt.cancelable && evt.preventDefault();
        !options.dropBubble && evt.stopPropagation();
      }

      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        // Remove clone(s)
        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
      }

      if (dragEl) {
        if (this.nativeDraggable) {
          off(dragEl, 'dragend', this);
        }

        _disableDraggable(dragEl);

        dragEl.style['will-change'] = ''; // Remove classes
        // ghostClass is added in dragStarted

        if (moved && !awaitingDragStarted) {
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
        }

        toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event

        _dispatchEvent({
          sortable: this,
          name: 'unchoose',
          toEl: parentEl,
          newIndex: null,
          newDraggableIndex: null,
          originalEvent: evt
        });

        if (rootEl !== parentEl) {
          if (newIndex >= 0) {
            // Add event
            _dispatchEvent({
              rootEl: parentEl,
              name: 'add',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            }); // Remove event


            _dispatchEvent({
              sortable: this,
              name: 'remove',
              toEl: parentEl,
              originalEvent: evt
            }); // drag from one list and drop into another


            _dispatchEvent({
              rootEl: parentEl,
              name: 'sort',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });

            _dispatchEvent({
              sortable: this,
              name: 'sort',
              toEl: parentEl,
              originalEvent: evt
            });
          }

          putSortable && putSortable.save();
        } else {
          if (newIndex !== oldIndex) {
            if (newIndex >= 0) {
              // drag & drop within the same list
              _dispatchEvent({
                sortable: this,
                name: 'update',
                toEl: parentEl,
                originalEvent: evt
              });

              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }
          }
        }

        if (Sortable.active) {
          /* jshint eqnull:true */
          if (newIndex == null || newIndex === -1) {
            newIndex = oldIndex;
            newDraggableIndex = oldDraggableIndex;
          }

          _dispatchEvent({
            sortable: this,
            name: 'end',
            toEl: parentEl,
            originalEvent: evt
          }); // Save sorting


          this.save();
        }
      }
    }

    this._nulling();
  },
  _nulling: function _nulling() {
    pluginEvent('nulling', this);
    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
    savedInputChecked.forEach(function (el) {
      el.checked = true;
    });
    savedInputChecked.length = lastDx = lastDy = 0;
  },
  handleEvent: function handleEvent(
  /**Event*/
  evt) {
    switch (evt.type) {
      case 'drop':
      case 'dragend':
        this._onDrop(evt);

        break;

      case 'dragenter':
      case 'dragover':
        if (dragEl) {
          this._onDragOver(evt);

          _globalDragOver(evt);
        }

        break;

      case 'selectstart':
        evt.preventDefault();
        break;
    }
  },

  /**
   * Serializes the item into an array of string.
   * @returns {String[]}
   */
  toArray: function toArray() {
    var order = [],
        el,
        children = this.el.children,
        i = 0,
        n = children.length,
        options = this.options;

    for (; i < n; i++) {
      el = children[i];

      if (closest(el, options.draggable, this.el, false)) {
        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
      }
    }

    return order;
  },

  /**
   * Sorts the elements according to the array.
   * @param  {String[]}  order  order of the items
   */
  sort: function sort(order) {
    var items = {},
        rootEl = this.el;
    this.toArray().forEach(function (id, i) {
      var el = rootEl.children[i];

      if (closest(el, this.options.draggable, rootEl, false)) {
        items[id] = el;
      }
    }, this);
    order.forEach(function (id) {
      if (items[id]) {
        rootEl.removeChild(items[id]);
        rootEl.appendChild(items[id]);
      }
    });
  },

  /**
   * Save the current sorting
   */
  save: function save() {
    var store = this.options.store;
    store && store.set && store.set(this);
  },

  /**
   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
   * @param   {HTMLElement}  el
   * @param   {String}       [selector]  default: `options.draggable`
   * @returns {HTMLElement|null}
   */
  closest: function closest$1(el, selector) {
    return closest(el, selector || this.options.draggable, this.el, false);
  },

  /**
   * Set/get option
   * @param   {string} name
   * @param   {*}      [value]
   * @returns {*}
   */
  option: function option(name, value) {
    var options = this.options;

    if (value === void 0) {
      return options[name];
    } else {
      var modifiedValue = PluginManager.modifyOption(this, name, value);

      if (typeof modifiedValue !== 'undefined') {
        options[name] = modifiedValue;
      } else {
        options[name] = value;
      }

      if (name === 'group') {
        _prepareGroup(options);
      }
    }
  },

  /**
   * Destroy
   */
  destroy: function destroy() {
    pluginEvent('destroy', this);
    var el = this.el;
    el[expando] = null;
    off(el, 'mousedown', this._onTapStart);
    off(el, 'touchstart', this._onTapStart);
    off(el, 'pointerdown', this._onTapStart);

    if (this.nativeDraggable) {
      off(el, 'dragover', this);
      off(el, 'dragenter', this);
    } // Remove draggable attributes


    Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
      el.removeAttribute('draggable');
    });

    this._onDrop();

    this._disableDelayedDragEvents();

    sortables.splice(sortables.indexOf(this.el), 1);
    this.el = el = null;
  },
  _hideClone: function _hideClone() {
    if (!cloneHidden) {
      pluginEvent('hideClone', this);
      if (Sortable.eventCanceled) return;
      css(cloneEl, 'display', 'none');

      if (this.options.removeCloneOnHide && cloneEl.parentNode) {
        cloneEl.parentNode.removeChild(cloneEl);
      }

      cloneHidden = true;
    }
  },
  _showClone: function _showClone(putSortable) {
    if (putSortable.lastPutMode !== 'clone') {
      this._hideClone();

      return;
    }

    if (cloneHidden) {
      pluginEvent('showClone', this);
      if (Sortable.eventCanceled) return; // show clone at dragEl or original position

      if (rootEl.contains(dragEl) && !this.options.group.revertClone) {
        rootEl.insertBefore(cloneEl, dragEl);
      } else if (nextEl) {
        rootEl.insertBefore(cloneEl, nextEl);
      } else {
        rootEl.appendChild(cloneEl);
      }

      if (this.options.group.revertClone) {
        this.animate(dragEl, cloneEl);
      }

      css(cloneEl, 'display', '');
      cloneHidden = false;
    }
  }
};

function _globalDragOver(
/**Event*/
evt) {
  if (evt.dataTransfer) {
    evt.dataTransfer.dropEffect = 'move';
  }

  evt.cancelable && evt.preventDefault();
}

function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
  var evt,
      sortable = fromEl[expando],
      onMoveFn = sortable.options.onMove,
      retVal; // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent('move', {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent('move', true, true);
  }

  evt.to = toEl;
  evt.from = fromEl;
  evt.dragged = dragEl;
  evt.draggedRect = dragRect;
  evt.related = targetEl || toEl;
  evt.relatedRect = targetRect || getRect(toEl);
  evt.willInsertAfter = willInsertAfter;
  evt.originalEvent = originalEvent;
  fromEl.dispatchEvent(evt);

  if (onMoveFn) {
    retVal = onMoveFn.call(sortable, evt, originalEvent);
  }

  return retVal;
}

function _disableDraggable(el) {
  el.draggable = false;
}

function _unsilent() {
  _silent = false;
}

function _ghostIsLast(evt, vertical, sortable) {
  var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
  var spacer = 10;
  return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
}

function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
  var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
      targetLength = vertical ? targetRect.height : targetRect.width,
      targetS1 = vertical ? targetRect.top : targetRect.left,
      targetS2 = vertical ? targetRect.bottom : targetRect.right,
      invert = false;

  if (!invertSwap) {
    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
      // check if past first invert threshold on side opposite of lastDirection
      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
        // past first invert threshold, do not restrict inverted threshold to dragEl shadow
        pastFirstInvertThresh = true;
      }

      if (!pastFirstInvertThresh) {
        // dragEl shadow (target move distance shadow)
        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
        : mouseOnAxis > targetS2 - targetMoveDistance) {
          return -lastDirection;
        }
      } else {
        invert = true;
      }
    } else {
      // Regular
      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
        return _getInsertDirection(target);
      }
    }
  }

  invert = invert || invertSwap;

  if (invert) {
    // Invert of regular
    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
    }
  }

  return 0;
}
/**
 * Gets the direction dragEl must be swapped relative to target in order to make it
 * seem that dragEl has been "inserted" into that element's position
 * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
 * @return {Number}                   Direction dragEl must be swapped
 */


function _getInsertDirection(target) {
  if (index(dragEl) < index(target)) {
    return 1;
  } else {
    return -1;
  }
}
/**
 * Generate id
 * @param   {HTMLElement} el
 * @returns {String}
 * @private
 */


function _generateId(el) {
  var str = el.tagName + el.className + el.src + el.href + el.textContent,
      i = str.length,
      sum = 0;

  while (i--) {
    sum += str.charCodeAt(i);
  }

  return sum.toString(36);
}

function _saveInputCheckedState(root) {
  savedInputChecked.length = 0;
  var inputs = root.getElementsByTagName('input');
  var idx = inputs.length;

  while (idx--) {
    var el = inputs[idx];
    el.checked && savedInputChecked.push(el);
  }
}

function _nextTick(fn) {
  return setTimeout(fn, 0);
}

function _cancelNextTick(id) {
  return clearTimeout(id);
} // Fixed #973:


if (documentExists) {
  on(document, 'touchmove', function (evt) {
    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
      evt.preventDefault();
    }
  });
} // Export utils


Sortable.utils = {
  on: on,
  off: off,
  css: css,
  find: find,
  is: function is(el, selector) {
    return !!closest(el, selector, el, false);
  },
  extend: extend,
  throttle: throttle,
  closest: closest,
  toggleClass: toggleClass,
  clone: clone,
  index: index,
  nextTick: _nextTick,
  cancelNextTick: _cancelNextTick,
  detectDirection: _detectDirection,
  getChild: getChild
};
/**
 * Get the Sortable instance of an element
 * @param  {HTMLElement} element The element
 * @return {Sortable|undefined}         The instance of Sortable
 */

Sortable.get = function (element) {
  return element[expando];
};
/**
 * Mount a plugin to Sortable
 * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
 */


Sortable.mount = function () {
  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
    plugins[_key] = arguments[_key];
  }

  if (plugins[0].constructor === Array) plugins = plugins[0];
  plugins.forEach(function (plugin) {
    if (!plugin.prototype || !plugin.prototype.constructor) {
      throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
    }

    if (plugin.utils) Sortable.utils = _objectSpread({}, Sortable.utils, plugin.utils);
    PluginManager.mount(plugin);
  });
};
/**
 * Create sortable instance
 * @param {HTMLElement}  el
 * @param {Object}      [options]
 */


Sortable.create = function (el, options) {
  return new Sortable(el, options);
}; // Export


Sortable.version = version;
var autoScrolls = [],
    scrollEl,
    scrollRootEl,
    scrolling = false,
    lastAutoScrollX,
    lastAutoScrollY,
    touchEvt$1,
    pointerElemChangedInterval;

function AutoScrollPlugin() {
  function AutoScroll() {
    this.defaults = {
      scroll: true,
      scrollSensitivity: 30,
      scrollSpeed: 10,
      bubbleScroll: true
    }; // Bind all private methods

    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }
  }

  AutoScroll.prototype = {
    dragStarted: function dragStarted(_ref) {
      var originalEvent = _ref.originalEvent;

      if (this.sortable.nativeDraggable) {
        on(document, 'dragover', this._handleAutoScroll);
      } else {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._handleFallbackAutoScroll);
        } else if (originalEvent.touches) {
          on(document, 'touchmove', this._handleFallbackAutoScroll);
        } else {
          on(document, 'mousemove', this._handleFallbackAutoScroll);
        }
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref2) {
      var originalEvent = _ref2.originalEvent; // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)

      if (!this.options.dragOverBubble && !originalEvent.rootEl) {
        this._handleAutoScroll(originalEvent);
      }
    },
    drop: function drop() {
      if (this.sortable.nativeDraggable) {
        off(document, 'dragover', this._handleAutoScroll);
      } else {
        off(document, 'pointermove', this._handleFallbackAutoScroll);
        off(document, 'touchmove', this._handleFallbackAutoScroll);
        off(document, 'mousemove', this._handleFallbackAutoScroll);
      }

      clearPointerElemChangedInterval();
      clearAutoScrolls();
      cancelThrottle();
    },
    nulling: function nulling() {
      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
      autoScrolls.length = 0;
    },
    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
      this._handleAutoScroll(evt, true);
    },
    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
      var _this = this;

      var x = (evt.touches ? evt.touches[0] : evt).clientX,
          y = (evt.touches ? evt.touches[0] : evt).clientY,
          elem = document.elementFromPoint(x, y);
      touchEvt$1 = evt; // IE does not seem to have native autoscroll,
      // Edge's autoscroll seems too conditional,
      // MACOS Safari does not have autoscroll,
      // Firefox and Chrome are good

      if (fallback || Edge || IE11OrLess || Safari) {
        autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change

        var ogElemScroller = getParentAutoScrollElement(elem, true);

        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
          pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour

          pointerElemChangedInterval = setInterval(function () {
            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);

            if (newElem !== ogElemScroller) {
              ogElemScroller = newElem;
              clearAutoScrolls();
            }

            autoScroll(evt, _this.options, newElem, fallback);
          }, 10);
          lastAutoScrollX = x;
          lastAutoScrollY = y;
        }
      } else {
        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
          clearAutoScrolls();
          return;
        }

        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
      }
    }
  };
  return _extends(AutoScroll, {
    pluginName: 'scroll',
    initializeByDefault: true
  });
}

function clearAutoScrolls() {
  autoScrolls.forEach(function (autoScroll) {
    clearInterval(autoScroll.pid);
  });
  autoScrolls = [];
}

function clearPointerElemChangedInterval() {
  clearInterval(pointerElemChangedInterval);
}

var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
  if (!options.scroll) return;
  var x = (evt.touches ? evt.touches[0] : evt).clientX,
      y = (evt.touches ? evt.touches[0] : evt).clientY,
      sens = options.scrollSensitivity,
      speed = options.scrollSpeed,
      winScroller = getWindowScrollingElement();
  var scrollThisInstance = false,
      scrollCustomFn; // New scroll root, set scrollEl

  if (scrollRootEl !== rootEl) {
    scrollRootEl = rootEl;
    clearAutoScrolls();
    scrollEl = options.scroll;
    scrollCustomFn = options.scrollFn;

    if (scrollEl === true) {
      scrollEl = getParentAutoScrollElement(rootEl, true);
    }
  }

  var layersOut = 0;
  var currentParent = scrollEl;

  do {
    var el = currentParent,
        rect = getRect(el),
        top = rect.top,
        bottom = rect.bottom,
        left = rect.left,
        right = rect.right,
        width = rect.width,
        height = rect.height,
        canScrollX = void 0,
        canScrollY = void 0,
        scrollWidth = el.scrollWidth,
        scrollHeight = el.scrollHeight,
        elCSS = css(el),
        scrollPosX = el.scrollLeft,
        scrollPosY = el.scrollTop;

    if (el === winScroller) {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
    } else {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
    }

    var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
    var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);

    if (!autoScrolls[layersOut]) {
      for (var i = 0; i <= layersOut; i++) {
        if (!autoScrolls[i]) {
          autoScrolls[i] = {};
        }
      }
    }

    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
      autoScrolls[layersOut].el = el;
      autoScrolls[layersOut].vx = vx;
      autoScrolls[layersOut].vy = vy;
      clearInterval(autoScrolls[layersOut].pid);

      if (vx != 0 || vy != 0) {
        scrollThisInstance = true;
        /* jshint loopfunc:true */

        autoScrolls[layersOut].pid = setInterval(function () {
          // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
          if (isFallback && this.layer === 0) {
            Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely

          }

          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;

          if (typeof scrollCustomFn === 'function') {
            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
              return;
            }
          }

          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
        }.bind({
          layer: layersOut
        }), 24);
      }
    }

    layersOut++;
  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));

  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
}, 30);

var drop = function drop(_ref) {
  var originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      dragEl = _ref.dragEl,
      activeSortable = _ref.activeSortable,
      dispatchSortableEvent = _ref.dispatchSortableEvent,
      hideGhostForTarget = _ref.hideGhostForTarget,
      unhideGhostForTarget = _ref.unhideGhostForTarget;
  if (!originalEvent) return;
  var toSortable = putSortable || activeSortable;
  hideGhostForTarget();
  var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
  var target = document.elementFromPoint(touch.clientX, touch.clientY);
  unhideGhostForTarget();

  if (toSortable && !toSortable.el.contains(target)) {
    dispatchSortableEvent('spill');
    this.onSpill({
      dragEl: dragEl,
      putSortable: putSortable
    });
  }
};

function Revert() {}

Revert.prototype = {
  startIndex: null,
  dragStart: function dragStart(_ref2) {
    var oldDraggableIndex = _ref2.oldDraggableIndex;
    this.startIndex = oldDraggableIndex;
  },
  onSpill: function onSpill(_ref3) {
    var dragEl = _ref3.dragEl,
        putSortable = _ref3.putSortable;
    this.sortable.captureAnimationState();

    if (putSortable) {
      putSortable.captureAnimationState();
    }

    var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);

    if (nextSibling) {
      this.sortable.el.insertBefore(dragEl, nextSibling);
    } else {
      this.sortable.el.appendChild(dragEl);
    }

    this.sortable.animateAll();

    if (putSortable) {
      putSortable.animateAll();
    }
  },
  drop: drop
};

_extends(Revert, {
  pluginName: 'revertOnSpill'
});

function Remove() {}

Remove.prototype = {
  onSpill: function onSpill(_ref4) {
    var dragEl = _ref4.dragEl,
        putSortable = _ref4.putSortable;
    var parentSortable = putSortable || this.sortable;
    parentSortable.captureAnimationState();
    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
    parentSortable.animateAll();
  },
  drop: drop
};

_extends(Remove, {
  pluginName: 'removeOnSpill'
});

var lastSwapEl;

function SwapPlugin() {
  function Swap() {
    this.defaults = {
      swapClass: 'sortable-swap-highlight'
    };
  }

  Swap.prototype = {
    dragStart: function dragStart(_ref) {
      var dragEl = _ref.dragEl;
      lastSwapEl = dragEl;
    },
    dragOverValid: function dragOverValid(_ref2) {
      var completed = _ref2.completed,
          target = _ref2.target,
          onMove = _ref2.onMove,
          activeSortable = _ref2.activeSortable,
          changed = _ref2.changed,
          cancel = _ref2.cancel;
      if (!activeSortable.options.swap) return;
      var el = this.sortable.el,
          options = this.options;

      if (target && target !== el) {
        var prevSwapEl = lastSwapEl;

        if (onMove(target) !== false) {
          toggleClass(target, options.swapClass, true);
          lastSwapEl = target;
        } else {
          lastSwapEl = null;
        }

        if (prevSwapEl && prevSwapEl !== lastSwapEl) {
          toggleClass(prevSwapEl, options.swapClass, false);
        }
      }

      changed();
      completed(true);
      cancel();
    },
    drop: function drop(_ref3) {
      var activeSortable = _ref3.activeSortable,
          putSortable = _ref3.putSortable,
          dragEl = _ref3.dragEl;
      var toSortable = putSortable || this.sortable;
      var options = this.options;
      lastSwapEl && toggleClass(lastSwapEl, options.swapClass, false);

      if (lastSwapEl && (options.swap || putSortable && putSortable.options.swap)) {
        if (dragEl !== lastSwapEl) {
          toSortable.captureAnimationState();
          if (toSortable !== activeSortable) activeSortable.captureAnimationState();
          swapNodes(dragEl, lastSwapEl);
          toSortable.animateAll();
          if (toSortable !== activeSortable) activeSortable.animateAll();
        }
      }
    },
    nulling: function nulling() {
      lastSwapEl = null;
    }
  };
  return _extends(Swap, {
    pluginName: 'swap',
    eventProperties: function eventProperties() {
      return {
        swapItem: lastSwapEl
      };
    }
  });
}

function swapNodes(n1, n2) {
  var p1 = n1.parentNode,
      p2 = n2.parentNode,
      i1,
      i2;
  if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;
  i1 = index(n1);
  i2 = index(n2);

  if (p1.isEqualNode(p2) && i1 < i2) {
    i2++;
  }

  p1.insertBefore(n2, p1.children[i1]);
  p2.insertBefore(n1, p2.children[i2]);
}

var multiDragElements = [],
    multiDragClones = [],
    lastMultiDragSelect,
    // for selection with modifier key down (SHIFT)
multiDragSortable,
    initialFolding = false,
    // Initial multi-drag fold when drag started
folding = false,
    // Folding any other time
dragStarted = false,
    dragEl$1,
    clonesFromRect,
    clonesHidden;

function MultiDragPlugin() {
  function MultiDrag(sortable) {
    // Bind all private methods
    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }

    if (sortable.options.supportPointer) {
      on(document, 'pointerup', this._deselectMultiDrag);
    } else {
      on(document, 'mouseup', this._deselectMultiDrag);
      on(document, 'touchend', this._deselectMultiDrag);
    }

    on(document, 'keydown', this._checkKeyDown);
    on(document, 'keyup', this._checkKeyUp);
    this.defaults = {
      selectedClass: 'sortable-selected',
      multiDragKey: null,
      setData: function setData(dataTransfer, dragEl) {
        var data = '';

        if (multiDragElements.length && multiDragSortable === sortable) {
          multiDragElements.forEach(function (multiDragElement, i) {
            data += (!i ? '' : ', ') + multiDragElement.textContent;
          });
        } else {
          data = dragEl.textContent;
        }

        dataTransfer.setData('Text', data);
      }
    };
  }

  MultiDrag.prototype = {
    multiDragKeyDown: false,
    isMultiDrag: false,
    delayStartGlobal: function delayStartGlobal(_ref) {
      var dragged = _ref.dragEl;
      dragEl$1 = dragged;
    },
    delayEnded: function delayEnded() {
      this.isMultiDrag = ~multiDragElements.indexOf(dragEl$1);
    },
    setupClone: function setupClone(_ref2) {
      var sortable = _ref2.sortable,
          cancel = _ref2.cancel;
      if (!this.isMultiDrag) return;

      for (var i = 0; i < multiDragElements.length; i++) {
        multiDragClones.push(clone(multiDragElements[i]));
        multiDragClones[i].sortableIndex = multiDragElements[i].sortableIndex;
        multiDragClones[i].draggable = false;
        multiDragClones[i].style['will-change'] = '';
        toggleClass(multiDragClones[i], this.options.selectedClass, false);
        multiDragElements[i] === dragEl$1 && toggleClass(multiDragClones[i], this.options.chosenClass, false);
      }

      sortable._hideClone();

      cancel();
    },
    clone: function clone(_ref3) {
      var sortable = _ref3.sortable,
          rootEl = _ref3.rootEl,
          dispatchSortableEvent = _ref3.dispatchSortableEvent,
          cancel = _ref3.cancel;
      if (!this.isMultiDrag) return;

      if (!this.options.removeCloneOnHide) {
        if (multiDragElements.length && multiDragSortable === sortable) {
          insertMultiDragClones(true, rootEl);
          dispatchSortableEvent('clone');
          cancel();
        }
      }
    },
    showClone: function showClone(_ref4) {
      var cloneNowShown = _ref4.cloneNowShown,
          rootEl = _ref4.rootEl,
          cancel = _ref4.cancel;
      if (!this.isMultiDrag) return;
      insertMultiDragClones(false, rootEl);
      multiDragClones.forEach(function (clone) {
        css(clone, 'display', '');
      });
      cloneNowShown();
      clonesHidden = false;
      cancel();
    },
    hideClone: function hideClone(_ref5) {
      var _this = this;

      var sortable = _ref5.sortable,
          cloneNowHidden = _ref5.cloneNowHidden,
          cancel = _ref5.cancel;
      if (!this.isMultiDrag) return;
      multiDragClones.forEach(function (clone) {
        css(clone, 'display', 'none');

        if (_this.options.removeCloneOnHide && clone.parentNode) {
          clone.parentNode.removeChild(clone);
        }
      });
      cloneNowHidden();
      clonesHidden = true;
      cancel();
    },
    dragStartGlobal: function dragStartGlobal(_ref6) {
      var sortable = _ref6.sortable;

      if (!this.isMultiDrag && multiDragSortable) {
        multiDragSortable.multiDrag._deselectMultiDrag();
      }

      multiDragElements.forEach(function (multiDragElement) {
        multiDragElement.sortableIndex = index(multiDragElement);
      }); // Sort multi-drag elements

      multiDragElements = multiDragElements.sort(function (a, b) {
        return a.sortableIndex - b.sortableIndex;
      });
      dragStarted = true;
    },
    dragStarted: function dragStarted(_ref7) {
      var _this2 = this;

      var sortable = _ref7.sortable;
      if (!this.isMultiDrag) return;

      if (this.options.sort) {
        // Capture rects,
        // hide multi drag elements (by positioning them absolute),
        // set multi drag elements rects to dragRect,
        // show multi drag elements,
        // animate to rects,
        // unset rects & remove from DOM
        sortable.captureAnimationState();

        if (this.options.animation) {
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            css(multiDragElement, 'position', 'absolute');
          });
          var dragRect = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            setRect(multiDragElement, dragRect);
          });
          folding = true;
          initialFolding = true;
        }
      }

      sortable.animateAll(function () {
        folding = false;
        initialFolding = false;

        if (_this2.options.animation) {
          multiDragElements.forEach(function (multiDragElement) {
            unsetRect(multiDragElement);
          });
        } // Remove all auxiliary multidrag items from el, if sorting enabled


        if (_this2.options.sort) {
          removeMultiDragElements();
        }
      });
    },
    dragOver: function dragOver(_ref8) {
      var target = _ref8.target,
          completed = _ref8.completed,
          cancel = _ref8.cancel;

      if (folding && ~multiDragElements.indexOf(target)) {
        completed(false);
        cancel();
      }
    },
    revert: function revert(_ref9) {
      var fromSortable = _ref9.fromSortable,
          rootEl = _ref9.rootEl,
          sortable = _ref9.sortable,
          dragRect = _ref9.dragRect;

      if (multiDragElements.length > 1) {
        // Setup unfold animation
        multiDragElements.forEach(function (multiDragElement) {
          sortable.addAnimationState({
            target: multiDragElement,
            rect: folding ? getRect(multiDragElement) : dragRect
          });
          unsetRect(multiDragElement);
          multiDragElement.fromRect = dragRect;
          fromSortable.removeAnimationState(multiDragElement);
        });
        folding = false;
        insertMultiDragElements(!this.options.removeCloneOnHide, rootEl);
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref10) {
      var sortable = _ref10.sortable,
          isOwner = _ref10.isOwner,
          insertion = _ref10.insertion,
          activeSortable = _ref10.activeSortable,
          parentEl = _ref10.parentEl,
          putSortable = _ref10.putSortable;
      var options = this.options;

      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        }

        initialFolding = false; // If leaving sort:false root, or already folding - Fold to new location

        if (options.animation && multiDragElements.length > 1 && (folding || !isOwner && !activeSortable.options.sort && !putSortable)) {
          // Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible
          var dragRectAbsolute = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            setRect(multiDragElement, dragRectAbsolute); // Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted
            // while folding, and so that we can capture them again because old sortable will no longer be fromSortable

            parentEl.appendChild(multiDragElement);
          });
          folding = true;
        } // Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out


        if (!isOwner) {
          // Only remove if not folding (folding will remove them anyways)
          if (!folding) {
            removeMultiDragElements();
          }

          if (multiDragElements.length > 1) {
            var clonesHiddenBefore = clonesHidden;

            activeSortable._showClone(sortable); // Unfold animation for clones if showing from hidden


            if (activeSortable.options.animation && !clonesHidden && clonesHiddenBefore) {
              multiDragClones.forEach(function (clone) {
                activeSortable.addAnimationState({
                  target: clone,
                  rect: clonesFromRect
                });
                clone.fromRect = clonesFromRect;
                clone.thisAnimationDuration = null;
              });
            }
          } else {
            activeSortable._showClone(sortable);
          }
        }
      }
    },
    dragOverAnimationCapture: function dragOverAnimationCapture(_ref11) {
      var dragRect = _ref11.dragRect,
          isOwner = _ref11.isOwner,
          activeSortable = _ref11.activeSortable;
      multiDragElements.forEach(function (multiDragElement) {
        multiDragElement.thisAnimationDuration = null;
      });

      if (activeSortable.options.animation && !isOwner && activeSortable.multiDrag.isMultiDrag) {
        clonesFromRect = _extends({}, dragRect);
        var dragMatrix = matrix(dragEl$1, true);
        clonesFromRect.top -= dragMatrix.f;
        clonesFromRect.left -= dragMatrix.e;
      }
    },
    dragOverAnimationComplete: function dragOverAnimationComplete() {
      if (folding) {
        folding = false;
        removeMultiDragElements();
      }
    },
    drop: function drop(_ref12) {
      var evt = _ref12.originalEvent,
          rootEl = _ref12.rootEl,
          parentEl = _ref12.parentEl,
          sortable = _ref12.sortable,
          dispatchSortableEvent = _ref12.dispatchSortableEvent,
          oldIndex = _ref12.oldIndex,
          putSortable = _ref12.putSortable;
      var toSortable = putSortable || this.sortable;
      if (!evt) return;
      var options = this.options,
          children = parentEl.children; // Multi-drag selection

      if (!dragStarted) {
        if (options.multiDragKey && !this.multiDragKeyDown) {
          this._deselectMultiDrag();
        }

        toggleClass(dragEl$1, options.selectedClass, !~multiDragElements.indexOf(dragEl$1));

        if (!~multiDragElements.indexOf(dragEl$1)) {
          multiDragElements.push(dragEl$1);
          dispatchEvent({
            sortable: sortable,
            rootEl: rootEl,
            name: 'select',
            targetEl: dragEl$1,
            originalEvt: evt
          }); // Modifier activated, select from last to dragEl

          if (evt.shiftKey && lastMultiDragSelect && sortable.el.contains(lastMultiDragSelect)) {
            var lastIndex = index(lastMultiDragSelect),
                currentIndex = index(dragEl$1);

            if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {
              // Must include lastMultiDragSelect (select it), in case modified selection from no selection
              // (but previous selection existed)
              var n, i;

              if (currentIndex > lastIndex) {
                i = lastIndex;
                n = currentIndex;
              } else {
                i = currentIndex;
                n = lastIndex + 1;
              }

              for (; i < n; i++) {
                if (~multiDragElements.indexOf(children[i])) continue;
                toggleClass(children[i], options.selectedClass, true);
                multiDragElements.push(children[i]);
                dispatchEvent({
                  sortable: sortable,
                  rootEl: rootEl,
                  name: 'select',
                  targetEl: children[i],
                  originalEvt: evt
                });
              }
            }
          } else {
            lastMultiDragSelect = dragEl$1;
          }

          multiDragSortable = toSortable;
        } else {
          multiDragElements.splice(multiDragElements.indexOf(dragEl$1), 1);
          lastMultiDragSelect = null;
          dispatchEvent({
            sortable: sortable,
            rootEl: rootEl,
            name: 'deselect',
            targetEl: dragEl$1,
            originalEvt: evt
          });
        }
      } // Multi-drag drop


      if (dragStarted && this.isMultiDrag) {
        // Do not "unfold" after around dragEl if reverted
        if ((parentEl[expando].options.sort || parentEl !== rootEl) && multiDragElements.length > 1) {
          var dragRect = getRect(dragEl$1),
              multiDragIndex = index(dragEl$1, ':not(.' + this.options.selectedClass + ')');
          if (!initialFolding && options.animation) dragEl$1.thisAnimationDuration = null;
          toSortable.captureAnimationState();

          if (!initialFolding) {
            if (options.animation) {
              dragEl$1.fromRect = dragRect;
              multiDragElements.forEach(function (multiDragElement) {
                multiDragElement.thisAnimationDuration = null;

                if (multiDragElement !== dragEl$1) {
                  var rect = folding ? getRect(multiDragElement) : dragRect;
                  multiDragElement.fromRect = rect; // Prepare unfold animation

                  toSortable.addAnimationState({
                    target: multiDragElement,
                    rect: rect
                  });
                }
              });
            } // Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert
            // properly they must all be removed


            removeMultiDragElements();
            multiDragElements.forEach(function (multiDragElement) {
              if (children[multiDragIndex]) {
                parentEl.insertBefore(multiDragElement, children[multiDragIndex]);
              } else {
                parentEl.appendChild(multiDragElement);
              }

              multiDragIndex++;
            }); // If initial folding is done, the elements may have changed position because they are now
            // unfolding around dragEl, even though dragEl may not have his index changed, so update event
            // must be fired here as Sortable will not.

            if (oldIndex === index(dragEl$1)) {
              var update = false;
              multiDragElements.forEach(function (multiDragElement) {
                if (multiDragElement.sortableIndex !== index(multiDragElement)) {
                  update = true;
                  return;
                }
              });

              if (update) {
                dispatchSortableEvent('update');
              }
            }
          } // Must be done after capturing individual rects (scroll bar)


          multiDragElements.forEach(function (multiDragElement) {
            unsetRect(multiDragElement);
          });
          toSortable.animateAll();
        }

        multiDragSortable = toSortable;
      } // Remove clones if necessary


      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        multiDragClones.forEach(function (clone) {
          clone.parentNode && clone.parentNode.removeChild(clone);
        });
      }
    },
    nullingGlobal: function nullingGlobal() {
      this.isMultiDrag = dragStarted = false;
      multiDragClones.length = 0;
    },
    destroyGlobal: function destroyGlobal() {
      this._deselectMultiDrag();

      off(document, 'pointerup', this._deselectMultiDrag);
      off(document, 'mouseup', this._deselectMultiDrag);
      off(document, 'touchend', this._deselectMultiDrag);
      off(document, 'keydown', this._checkKeyDown);
      off(document, 'keyup', this._checkKeyUp);
    },
    _deselectMultiDrag: function _deselectMultiDrag(evt) {
      if (typeof dragStarted !== "undefined" && dragStarted) return; // Only deselect if selection is in this sortable

      if (multiDragSortable !== this.sortable) return; // Only deselect if target is not item in this sortable

      if (evt && closest(evt.target, this.options.draggable, this.sortable.el, false)) return; // Only deselect if left click

      if (evt && evt.button !== 0) return;

      while (multiDragElements.length) {
        var el = multiDragElements[0];
        toggleClass(el, this.options.selectedClass, false);
        multiDragElements.shift();
        dispatchEvent({
          sortable: this.sortable,
          rootEl: this.sortable.el,
          name: 'deselect',
          targetEl: el,
          originalEvt: evt
        });
      }
    },
    _checkKeyDown: function _checkKeyDown(evt) {
      if (evt.key === this.options.multiDragKey) {
        this.multiDragKeyDown = true;
      }
    },
    _checkKeyUp: function _checkKeyUp(evt) {
      if (evt.key === this.options.multiDragKey) {
        this.multiDragKeyDown = false;
      }
    }
  };
  return _extends(MultiDrag, {
    // Static methods & properties
    pluginName: 'multiDrag',
    utils: {
      /**
       * Selects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be selected
       */
      select: function select(el) {
        var sortable = el.parentNode[expando];
        if (!sortable || !sortable.options.multiDrag || ~multiDragElements.indexOf(el)) return;

        if (multiDragSortable && multiDragSortable !== sortable) {
          multiDragSortable.multiDrag._deselectMultiDrag();

          multiDragSortable = sortable;
        }

        toggleClass(el, sortable.options.selectedClass, true);
        multiDragElements.push(el);
      },

      /**
       * Deselects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be deselected
       */
      deselect: function deselect(el) {
        var sortable = el.parentNode[expando],
            index = multiDragElements.indexOf(el);
        if (!sortable || !sortable.options.multiDrag || !~index) return;
        toggleClass(el, sortable.options.selectedClass, false);
        multiDragElements.splice(index, 1);
      }
    },
    eventProperties: function eventProperties() {
      var _this3 = this;

      var oldIndicies = [],
          newIndicies = [];
      multiDragElements.forEach(function (multiDragElement) {
        oldIndicies.push({
          multiDragElement: multiDragElement,
          index: multiDragElement.sortableIndex
        }); // multiDragElements will already be sorted if folding

        var newIndex;

        if (folding && multiDragElement !== dragEl$1) {
          newIndex = -1;
        } else if (folding) {
          newIndex = index(multiDragElement, ':not(.' + _this3.options.selectedClass + ')');
        } else {
          newIndex = index(multiDragElement);
        }

        newIndicies.push({
          multiDragElement: multiDragElement,
          index: newIndex
        });
      });
      return {
        items: _toConsumableArray(multiDragElements),
        clones: [].concat(multiDragClones),
        oldIndicies: oldIndicies,
        newIndicies: newIndicies
      };
    },
    optionListeners: {
      multiDragKey: function multiDragKey(key) {
        key = key.toLowerCase();

        if (key === 'ctrl') {
          key = 'Control';
        } else if (key.length > 1) {
          key = key.charAt(0).toUpperCase() + key.substr(1);
        }

        return key;
      }
    }
  });
}

function insertMultiDragElements(clonesInserted, rootEl) {
  multiDragElements.forEach(function (multiDragElement, i) {
    var target = rootEl.children[multiDragElement.sortableIndex + (clonesInserted ? Number(i) : 0)];

    if (target) {
      rootEl.insertBefore(multiDragElement, target);
    } else {
      rootEl.appendChild(multiDragElement);
    }
  });
}
/**
 * Insert multi-drag clones
 * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted
 * @param  {HTMLElement} rootEl
 */


function insertMultiDragClones(elementsInserted, rootEl) {
  multiDragClones.forEach(function (clone, i) {
    var target = rootEl.children[clone.sortableIndex + (elementsInserted ? Number(i) : 0)];

    if (target) {
      rootEl.insertBefore(clone, target);
    } else {
      rootEl.appendChild(clone);
    }
  });
}

function removeMultiDragElements() {
  multiDragElements.forEach(function (multiDragElement) {
    if (multiDragElement === dragEl$1) return;
    multiDragElement.parentNode && multiDragElement.parentNode.removeChild(multiDragElement);
  });
}

Sortable.mount(new AutoScrollPlugin());
Sortable.mount(Remove, Revert);
/* harmony default export */ __webpack_exports__["default"] = (Sortable);


/***/ }),

/***/ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./src/components/main/main.scss?vue&type=style&index=0&lang=scss&":
/*!*******************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./src/components/main/main.scss?vue&type=style&index=0&lang=scss& ***!
  \*******************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/sass-loader/dist/cjs.js!./main.scss?vue&type=style&index=0&lang=scss& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./src/components/main/main.scss?vue&type=style&index=0&lang=scss&");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);



module.exports = content.locals || {};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : undefined;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && typeof btoa !== 'undefined') {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
var apply = Function.prototype.apply; // DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};

exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};

exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}

Timeout.prototype.unref = Timeout.prototype.ref = function () {};

Timeout.prototype.close = function () {
  this._clearFn.call(scope, this._id);
}; // Does not start the time, just sets up the members needed.


exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);
  var msecs = item._idleTimeout;

  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
}; // setimmediate attaches itself to the global object


__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js"); // On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.


exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || this && this.setImmediate;
exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || this && this.clearImmediate;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/main/main.vue?vue&type=template&id=5e2104ef&":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/components/main/main.vue?vue&type=template&id=5e2104ef& ***!
  \***************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function () {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "main" }, [
    _c("div", { staticClass: "todo-app" }, [
      _c("div", { staticClass: "chelik-input" }, [
        _c("div", [
          _vm._v("\n              Имя челика: "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.nameFirst,
                expression: "nameFirst",
              },
            ],
            domProps: { value: _vm.nameFirst },
            on: {
              input: function ($event) {
                if ($event.target.composing) {
                  return
                }
                _vm.nameFirst = $event.target.value
              },
            },
          }),
        ]),
        _vm._v(" "),
        _c("div", [
          _vm._v("\n              Фамилия челика: "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.nameSecond,
                expression: "nameSecond",
              },
            ],
            domProps: { value: _vm.nameSecond },
            on: {
              input: function ($event) {
                if ($event.target.composing) {
                  return
                }
                _vm.nameSecond = $event.target.value
              },
            },
          }),
        ]),
        _vm._v(" "),
        _c("div", [
          _vm._v("\n              Отчество челика: "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.nameLast,
                expression: "nameLast",
              },
            ],
            domProps: { value: _vm.nameLast },
            on: {
              input: function ($event) {
                if ($event.target.composing) {
                  return
                }
                _vm.nameLast = $event.target.value
              },
            },
          }),
        ]),
        _vm._v(" "),
        _c("div", [
          _vm._v("\n              Возраст челика: "),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.age,
                expression: "age",
              },
            ],
            domProps: { value: _vm.age },
            on: {
              input: function ($event) {
                if ($event.target.composing) {
                  return
                }
                _vm.age = $event.target.value
              },
            },
          }),
        ]),
      ]),
      _vm._v(" "),
      _c("button", { on: { click: _vm.addNew } }, [_vm._v("Добавить")]),
      _vm._v(" "),
      _c("button", { on: { click: _vm.clearInput } }, [_vm._v("Очисить ввод")]),
      _vm._v(" "),
      _vm.showFromLocal
        ? _c("div", { staticClass: "chelik-table" }, [
            _c(
              "div",
              { staticClass: "chelik-info__wrap" },
              [
                _c("div", { staticClass: "chelik-info__title" }, [
                  _vm._v("Запомнено"),
                ]),
                _vm._v(" "),
                _vm._m(0),
                _vm._v(" "),
                _c(
                  "draggable",
                  {
                    staticClass: "chelik-info__list",
                    attrs: {
                      group: "peoples",
                      tag: "div",
                      "ghost-class": "moving-item",
                    },
                    model: {
                      value: _vm.peoples,
                      callback: function ($$v) {
                        _vm.peoples = $$v
                      },
                      expression: "peoples",
                    },
                  },
                  _vm._l(_vm.peoples, function (chelik, index) {
                    return _c(
                      "div",
                      {
                        key: chelik.nameFirst,
                        staticClass: "chelik-info__item",
                      },
                      [
                        _c("div", { staticClass: "chelik-info__item-index" }, [
                          _vm._v(_vm._s(index + 1)),
                        ]),
                        _vm._v(" "),
                        _c("div", { staticClass: "chelik-info__item-name" }, [
                          chelik.nameFirst
                            ? _c("span", [_vm._v(_vm._s(chelik.nameFirst))])
                            : _vm._e(),
                          _vm._v(" "),
                          chelik.nameSecond
                            ? _c("span", [
                                _vm._v(" " + _vm._s(chelik.nameSecond)),
                              ])
                            : _vm._e(),
                          _vm._v(" "),
                          chelik.nameLast
                            ? _c("span", [
                                _vm._v(" " + _vm._s(chelik.nameLast)),
                              ])
                            : _vm._e(),
                        ]),
                        _vm._v(" "),
                        _c("div", { staticClass: "chelik-info__item-age" }, [
                          chelik.savedAge
                            ? _c("span", [_vm._v(_vm._s(chelik.savedAge))])
                            : _vm._e(),
                        ]),
                        _vm._v(" "),
                        _c("div", { staticClass: "chelik-info__item-del" }, [
                          _c(
                            "button",
                            {
                              on: {
                                click: function ($event) {
                                  return _vm.deleteChelik(index)
                                },
                              },
                            },
                            [_vm._v("X")]
                          ),
                        ]),
                      ]
                    )
                  }),
                  0
                ),
              ],
              1
            ),
            _vm._v(" "),
            _c("button", { on: { click: _vm.clearLocal } }, [
              _vm._v("Очистить"),
            ]),
          ])
        : _vm._e(),
    ]),
  ])
}
var staticRenderFns = [
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "chelik-info__properties-list" }, [
      _c("div", { staticClass: "chelik-info__properties-index" }, [
        _vm._v("Номер:"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "chelik-info__properties-name" }, [
        _vm._v("ФИО:"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "chelik-info__properties-age" }, [
        _vm._v("Возраст:"),
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "chelik-info__properties-blank" }),
    ])
  },
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
        injectStyles.call(
          this,
          (options.functional ? this.parent : this).$root.$options.shadowRoot
        )
      }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "./node_modules/vue/dist/vue.runtime.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/vue/dist/vue.runtime.esm.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */

/*  */
var emptyObject = Object.freeze({}); // These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive.
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  typeof value === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject(obj) {
  return obj !== null && typeof obj === 'object';
}
/**
 * Get the raw type string of a value, e.g., [object Object].
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}

function isPromise(val) {
  return isDef(val) && typeof val.then === 'function' && typeof val.catch === 'function';
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString(val) {
  return val == null ? '' : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if an attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array.
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether an object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function (a, b, c) {
  return false;
};
/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */


var identity = function (_) {
  return _;
};
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject(a);
  var isObjectB = isObject(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */


function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured', 'serverPrefetch'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */

var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
/**
 * Check if a string starts with $ or _
 */

function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = ('__proto__' in {}); // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/); // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;
var supportsPassive = false;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer;

var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}
/*  */


var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function (str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function (str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */


var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  if ( true && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) {
      return a.id - b.id;
    });
  }

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.


Dep.target = null;
var targetStack = [];

function pushTarget(target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function (text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, // #7975
  // clone children array to avoid mutating original in case of cloning
  // a child.
  vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) args[len] = arguments[len];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }

    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;
  var setter = property && property.set;

  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if ( true && customSetter) {
        customSetter();
      } // #7981: for accessor properties without setter


      if (getter && !setter) {
        return;
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */


function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i]; // in case the object is already observed...

    if (key === '__ob__') {
      continue;
    }

    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       true && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}

function dedupeHooks(hooks) {
  var res = [];

  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }

  return res;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
     true && assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  if (true) {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!new RegExp("^[a-zA-Z][\\-\\.0-9_" + unicodeRegExp.source + "]*$").test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'should conform to valid custom element name in html5 specification.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];

      if (typeof def$$1 === 'function') {
        dirs[key] = {
          bind: def$$1,
          update: def$$1
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child); // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.

  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }

    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if ( true && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  if (true) {
    assertProp(prop, key, value, vm, absent);
  }

  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined;
  }

  var def = prop.default; // warn against non-factory defaults for Object & Array

  if ( true && isObject(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i], vm);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  var haveExpectedTypes = expectedTypes.some(function (t) {
    return t;
  });

  if (!valid && haveExpectedTypes) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;

function assertType(value, type, vm) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    try {
      valid = value instanceof type;
    } catch (e) {
      warn('Invalid prop type: "' + String(type) + '" is not a constructor', vm);
      valid = false;
    }
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}

var functionTypeCheckRE = /^\s*function (\w+)/;
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */

function getType(fn) {
  var match = fn && fn.toString().match(functionTypeCheckRE);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}

function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ');
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value); // check if we need to specify expected value

  if (expectedTypes.length === 1 && isExplicable(expectedType) && isExplicable(typeof value) && !isBoolean(expectedType, receivedType)) {
    message += " with value " + styleValue(value, expectedType);
  }

  message += ", got " + receivedType + " "; // check if we need to specify received value

  if (isExplicable(receivedType)) {
    message += "with value " + styleValue(value, receivedType) + ".";
  }

  return message;
}

function styleValue(value, type) {
  if (type === 'String') {
    return "\"" + value + "\"";
  } else if (type === 'Number') {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}

var EXPLICABLE_TYPES = ['string', 'number', 'boolean'];

function isExplicable(value) {
  return EXPLICABLE_TYPES.some(function (elem) {
    return value.toLowerCase() === elem;
  });
}

function isBoolean() {
  var args = [],
      len = arguments.length;

  while (len--) args[len] = arguments[len];

  return args.some(function (elem) {
    return elem.toLowerCase() === 'boolean';
  });
}
/*  */


function handleError(err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();

  try {
    if (vm) {
      var cur = vm;

      while (cur = cur.$parent) {
        var hooks = cur.$options.errorCaptured;

        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;

              if (capture) {
                return;
              }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }

    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling(handler, context, args, vm, info) {
  var res;

  try {
    res = args ? handler.apply(context, args) : handler.call(context);

    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) {
        return handleError(e, vm, info + " (Promise/async)");
      }); // issue #9511
      // avoid catch triggering multiple times when nested calls

      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }

  return res;
}

function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }

  logError(err, vm, info);
}

function logError(err, vm, info) {
  if (true) {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */


  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */


var isUsingMicroTask = false;
var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).


var timerFunc; // The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:

/* istanbul ignore next, $flow-disable-line */

if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  timerFunc = function () {
    p.then(flushCallbacks); // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };

  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) || // PhantomJS and iOS 7.x
MutationObserver.toString() === '[object MutationObserverConstructor]')) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });

  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };

  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;
    timerFunc();
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */

/* not type checking this file because flow doesn't play well with Proxy */


var initProxy;

if (true) {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var warnReservedPrefix = function (target, key) {
    warn("Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " + 'properties starting with "$" or "_" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals. ' + 'See: https://vuejs.org/v2/api/#data', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = (key in target);
      var isAllowed = allowedGlobals(key) || typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data);

      if (!has && !isAllowed) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */


var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}

var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function (tag) {
      return perf.mark(tag);
    };

    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag); // perf.clearMeasures(name)
    };
  }
}
/*  */


var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns, vm) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler");
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, createOnceHandler, vm) {
  var name, def$$1, cur, old, event;

  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);

    if (isUndef(cur)) {
       true && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }

      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }

      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);

      if (true) {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }

      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive$$1(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {}
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i]; // #6574 in case the inject object is observed...

      if (key === '__ob__') {
        continue;
      }

      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else if (true) {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }

  var slots = {};

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;

  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots;
  } else {
    res = {};

    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  } // expose normal slots on scopedSlots


  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  } // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error


  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }

  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res;
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res) ? [res] // single vnode
    : normalizeChildren(res);
    var vnode = res && res[0];
    return res && (!vnode || res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode) // #9658, #10391
    ) ? undefined : res;
  }; // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.


  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }

  return normalized;
}

function proxyNormalSlot(slots, key) {
  return function () {
    return slots[key];
  };
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();

      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);

      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }

  if (!isDef(ret)) {
    ret = [];
  }

  ret._isVList = true;
  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallbackRender, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if ( true && !isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
  } else {
    nodes = this.$slots[name] || (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }

  return eventKeyCode === undefined;
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
       true && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function (key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);

        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop(key);
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       true && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function resolveScopedSlots(fns, // see flow/vnode
res, // the following are added in 2.6
hasDynamicKeys, contentHashKey) {
  res = res || {
    $stable: !hasDynamicKeys
  };

  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];

    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }

      res[slot.key] = slot.fn;
    }
  }

  if (contentHashKey) {
    res.$key = contentHashKey;
  }

  return res;
}
/*  */


function bindDynamicKeys(baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];

    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ( true && key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn("Invalid value for dynamic directive argument (expected string or null): " + key, this);
    }
  }

  return baseObj;
} // helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.


function prependModifier(value, symbol) {
  return typeof value === 'string' ? symbol + value : value;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var this$1 = this;
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
    }

    return this$1.$slots;
  };

  Object.defineProperty(this, 'scopedSlots', {
    enumerable: true,
    get: function get() {
      return normalizeScopedSlots(data.scopedSlots, this.slots());
    }
  }); // support for compiled functional template

  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;

  if (true) {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */

/*  */

/*  */

/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    if (true) {
      warn("Invalid Component definition: " + String(Ctor), context);
    }

    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode( // we know it's MountedComponentVNode but flow doesn't
vnode, // activeInstance in lifecycle state
parent) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];

    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1(f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };

  merged._merged = true;
  return merged;
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;

  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
     true && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if ( true && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      default: children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if ( true && isDef(data) && isDef(data.nativeOn) && data.tag !== 'component') {
        warn("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">.", context);
      }

      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }

  if (isObject(data.class)) {
    traverse(data.class);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  if (true) {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {}
}

var currentRenderingInstance = null;

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      if ( true && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    } // if the returned array contains only a single node, allow it


    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if ( true && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp.default;
  }

  return isObject(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  var owner = currentRenderingInstance;

  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;
    owner.$on('hook:destroyed', function () {
      return remove(owners, owner);
    });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;

        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }

        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    var reject = once(function (reason) {
       true && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;

              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;

            if (isUndef(factory.resolved)) {
              reject( true ? "timeout (" + res.timeout + "ms)" : undefined);
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn) {
  target.$on(event, fn);
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);

    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    } // specific handler


    var cb;
    var i = cbs.length;

    while (i--) {
      cb = cbs[i];

      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;

    if (true) {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }

    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";

      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }

    return vm;
  };
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  };
}

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    restoreActiveInstance(); // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;

    if (true) {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  if ( true && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);

      var vnode = vm._render();

      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);

      vm._update(vnode, hydrating);

      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined


  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if (true) {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.
  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.


  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key || !newScopedSlots && vm.$scopedSlots.$key); // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.

  var needsForceUpdate = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (true) {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};

  if (true) {
    circular = {};
  }

  waiting = flushing = false;
} // Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.


var currentFlushTimestamp = 0; // Async edge case fix requires storing an event listener's attach timestamp.

var getNow = Date.now; // Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)

if (inBrowser && !isIE) {
  var performance = window.performance;

  if (performance && typeof performance.now === 'function' && getNow() > document.createEvent('Event').timeStamp) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () {
      return performance.now();
    };
  }
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];

    if (watcher.before) {
      watcher.before();
    }

    id = watcher.id;
    has[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if ( true && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has[id] == null) {
    has[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;

      if ( true && !config.async) {
        flushSchedulerQueue();
        return;
      }

      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$2 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$2; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true ? expOrFn.toString() : undefined; // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = noop;
       true && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var i = this.deps.length;

  while (i--) {
    var dep = this.deps[i];

    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        var info = "callback for watcher \"" + this.expression + "\"";
        invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var i = this.deps.length;

  while (i--) {
    this.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this.deps[i].removeSub(this);
    }

    this.active = false;
  }
};
/*  */


var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function (key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    if (true) {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {} // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.


    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop(key);

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
     true && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];

    if (true) {
      if (methods && hasOwn(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn(props, key)) {
       true && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if ( true && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      } else if (vm.$options.methods && key in vm.$options.methods) {
        warn("The computed property \"" + key + "\" is already defined as a method.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }

  if ( true && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    if (true) {
      if (typeof methods[key] !== 'function') {
        warn("Method \"" + key + "\" has type \"" + typeof methods[key] + "\" in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }

    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  if (true) {
    dataDef.set = function () {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }

  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      var info = "callback for immediate watcher \"" + watcher.expression + "\"";
      pushTarget();
      invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);
      popTarget();
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


var uid$3 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$3++;
    var startTag, endTag;
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    } // a flag to avoid this being observed


    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    if (true) {
      initProxy(vm);
    } else {} // expose real self


    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = latest[key];
    }
  }

  return modified;
}

function Vue(options) {
  if ( true && !(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if ( true && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if ( true && type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var entry = cache[key];

    if (entry) {
      var name = entry.name;

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var entry = cache[key];

  if (entry && (!current || entry.tag !== current.tag)) {
    entry.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  abstract: true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  methods: {
    cacheVNode: function cacheVNode() {
      var ref = this;
      var cache = ref.cache;
      var keys = ref.keys;
      var vnodeToCache = ref.vnodeToCache;
      var keyToCache = ref.keyToCache;

      if (vnodeToCache) {
        var tag = vnodeToCache.tag;
        var componentInstance = vnodeToCache.componentInstance;
        var componentOptions = vnodeToCache.componentOptions;
        cache[keyToCache] = {
          name: getComponentName(componentOptions),
          tag: tag,
          componentInstance: componentInstance
        };
        keys.push(keyToCache); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }

        this.vnodeToCache = null;
      }
    }
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.cacheVNode();
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  updated: function updated() {
    this.cacheVNode();
  },
  render: function render() {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        // delay setting the cache until update
        this.vnodeToCache = vnode;
        this.keyToCache = key;
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
};
/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  if (true) {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }

  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick; // 2.6 explicit observable API

  Vue.observable = function (obj) {
    observe(obj);
    return obj;
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.6.14';
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');

var mustUseProp = function (tag, type, attr) {
  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false' ? 'false' // allow arbitrary string value for contenteditable
  : key === 'contenteditable' && isValidContentEditableValue(value) ? value : 'true';
};

var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,' + 'truespeed,typemustmatch,visible');
var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : '';
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false;
};
/*  */


function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data.class);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};
var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag);
};

function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return 'svg';
  } // basic support for MathML
  // note it doesn't support other MathML elements being component roots


  if (tag === 'math') {
    return 'math';
  }
}

var unknownElementCache = Object.create(null);

function isUnknownElement(tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true;
  }

  if (isReservedTag(tag)) {
    return false;
  }

  tag = tag.toLowerCase();
  /* istanbul ignore if */

  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }

  var el = document.createElement(tag);

  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/*  */

/**
 * Query an element selector if it's not an element already.
 */

function query(el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);

    if (!selected) {
       true && warn('Cannot find element: ' + el);
      return document.createElement('div');
    }

    return selected;
  } else {
    return el;
  }
}
/*  */


function createElement$1(tagName, vnode) {
  var elm = document.createElement(tagName);

  if (tagName !== 'select') {
    return elm;
  } // false or null will remove the attribute but undefined will not


  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }

  return elm;
}

function createElementNS(namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName);
}

function createTextNode(text) {
  return document.createTextNode(text);
}

function createComment(text) {
  return document.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild(node, child) {
  node.removeChild(child);
}

function appendChild(node, child) {
  node.appendChild(child);
}

function parentNode(node) {
  return node.parentNode;
}

function nextSibling(node) {
  return node.nextSibling;
}

function tagName(node) {
  return node.tagName;
}

function setTextContent(node, text) {
  node.textContent = text;
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});
/*  */

var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */


var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && a.asyncFactory === b.asyncFactory && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove$$1() {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove$$1.listeners = listeners;
    return remove$$1;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      if (true) {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }

      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if ( true && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        );
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (true) {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;

    if (true) {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (true) {
          checkDuplicateKeys(ch);
        }

        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    if (true) {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if (true) {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];
/*  */

function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;

  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }

  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      setAttr(elm, key, cur, vnode.data.pre);
    }
  } // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max

  /* istanbul ignore if */


  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }

  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr(el, key, value, isInPre) {
  if (isInPre || el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.

    /* istanbul ignore if */
    if (isIE && !isIE9 && el.tagName === 'TEXTAREA' && key === 'placeholder' && value !== '' && !el.__ieph) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };

      el.addEventListener('input', blocker); // $flow-disable-line

      el.__ieph = true;
      /* IE placeholder patched */
    }

    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
/*  */

function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};
/*  */

/*  */

/*  */

/*  */
// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.

var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';
/*  */
// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.

function normalizeEvents(on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  } // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4

  /* istanbul ignore if */


  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1(event, handler, capture) {
  var _target = target$1; // save current target element in closure

  return function onceHandler() {
    var res = handler.apply(null, arguments);

    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  };
} // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.


var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1(name, handler, capture, passive) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;

    handler = original._wrapper = function (e) {
      if ( // no bubbling, should always fire.
      // this is just a safety net in case event.timeStamp is unreliable in
      // certain weird environments...
      e.target === e.currentTarget || // event is fired after handler attachment
      e.timeStamp >= attachedTimestamp || // bail for environments that have buggy event.timeStamp implementations
      // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
      // #9681 QtWebEngine event.timeStamp is negative value
      e.timeStamp <= 0 || // #9448 bail if event is fired in another document in a multi-page
      // electron/nw.js app, since event.timeStamp will be using a different
      // starting reference
      e.target.ownerDocument !== document) {
        return original.apply(this, arguments);
      }
    };
  }

  target$1.addEventListener(name, handler, supportsPassive ? {
    capture: capture,
    passive: passive
  } : capture);
}

function remove$2(name, handler, capture, _target) {
  (_target || target$1).removeEventListener(name, handler._wrapper || handler, capture);
}

function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
/*  */

var svgContainer;

function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }

  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key]; // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)

    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) {
        vnode.children.length = 0;
      }

      if (cur === oldProps[key]) {
        continue;
      } // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property


      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur; // avoid resetting cursor position when value is the same

      var strCur = isUndef(cur) ? '' : String(cur);

      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;

      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }

      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if ( // skip the update if old and new VDOM state is the same.
    // `value` is handled separately because the DOM value may be temporarily
    // out of sync with VDOM state due to focus, composition and modifiers.
    // This  #4521 by skipping the unnecessary `checked` update.
    cur !== oldProps[key]) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
} // check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === 'OPTION' || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}

function isNotInFocusAndDirty(elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true; // #6157
  // work around IE bug when accessing document.activeElement in an iframe

  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {}

  return notInFocus && elm.value !== checkVal;
}

function isDirtyWithModifiers(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime

  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }

    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }

  return value !== newVal;
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};
/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
}); // merge static and dynamic style data on the same vnode

function normalizeStyleData(data) {
  var style = normalizeStyleBinding(data.style); // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it

  return data.staticStyle ? extend(data.staticStyle, style) : style;
} // normalize possible array / string values into Object


function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }

  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle);
  }

  return bindingStyle;
}
/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */


function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;

    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;

      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }

  var parentNode = vnode;

  while (parentNode = parentNode.parent) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }

  return res;
}
/*  */


var cssVarRE = /^--/;
var importantRE = /\s*!important$/;

var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);

    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];
var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);

  if (prop !== 'filter' && prop in emptyStyle) {
    return prop;
  }

  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);

  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;

    if (name in emptyStyle) {
      return name;
    }
  }
});

function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {}; // if static style exists, stylebinding already merged into it when doing normalizeStyleData

  var oldStyle = oldStaticStyle || oldStyleBinding;
  var style = normalizeStyleBinding(vnode.data.style) || {}; // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.

  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;
  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }

  for (name in newStyle) {
    cur = newStyle[name];

    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};
/*  */

var whitespaceRE = /\s+/;
/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  /* istanbul ignore else */


  if (typeof def$$1 === 'object') {
    var res = {};

    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }

    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation'; // Transition property/event sniffing

var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }

  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function whenTransitionEnds(el, expectedType, cb) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;

  if (!type) {
    return cb();
  }

  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;

  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };

  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };

  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el); // JSDOM may return undefined for transition properties

  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);
  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */

  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }

  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  };
}

function getTimeout(delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
} // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors


function toMs(s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}
/*  */


function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

  if ( true && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

  if ( true && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};
var platformModules = [attrs, klass, events, domProps, style, transition];
/*  */
// the directive module should be applied last, after all
// built-in modules have been applied.

var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */

if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;

    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted(el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }

      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;

      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd); // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.

        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */

        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated(el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context); // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.

      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);

      if (curOptions.some(function (o, i) {
        return !looseEqual(o, prevOptions[i]);
      })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple ? binding.value.some(function (v) {
          return hasNoMatchingOption(v, curOptions);
        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);

        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */

  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;

  if (isMultiple && !Array.isArray(value)) {
     true && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }

  var selected, option;

  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];

    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;

      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }

        return;
      }
    }
  }

  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption(value, options) {
  return options.every(function (o) {
    return !looseEqual(o, value);
  });
}

function getValue(option) {
  return '_value' in option ? option._value : option.value;
}

function onCompositionStart(e) {
  e.target.composing = true;
}

function onCompositionEnd(e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) {
    return;
  }

  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger(el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
/*  */
// recursively search for possible transition defined inside the component root


function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;

    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;

    if (transition$$1) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};
var platformDirectives = {
  model: directive,
  show: show
};
/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var isNotTextNode = function (c) {
  return c.tag || isAsyncPlaceholder(c);
};

var isVShowDirective = function (d) {
  return d.name === 'show';
};

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(isNotTextNode);
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if ( true && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if ( true && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function () {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};
/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);
delete props.mode;
var TransitionGroup = {
  props: props,
  beforeMount: function beforeMount() {
    var this$1 = this;
    var update = this._update;

    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1); // force removing pass

      this$1.__patch__(this$1._vnode, this$1.kept, false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
      );

      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },
  render: function render(h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];

      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c;
          (c.data || (c.data = {})).transition = transitionData;
        } else if (true) {
          var opts = c.componentOptions;
          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
          warn("<transition-group> children must be keyed: <" + name + ">");
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];

      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();

        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }

      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children);
  },
  updated: function updated() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || 'v') + '-move';

    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    } // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.


    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation); // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line

    this._reflow = document.body.offsetHeight;
    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (e && e.target !== el) {
            return;
          }

          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },
  methods: {
    hasMove: function hasMove(el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false;
      }
      /* istanbul ignore if */


      if (this._hasMove) {
        return this._hasMove;
      } // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.


      var clone = el.cloneNode();

      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) {
          removeClass(clone, cls);
        });
      }

      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};

function callPendingCbs(c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */


  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;

  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};
/*  */
// install platform specific utils

Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement; // install platform runtime directives & components

extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents); // install platform patch function

Vue.prototype.__patch__ = inBrowser ? patch : noop; // public mount method

Vue.prototype.$mount = function (el, hydrating) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating);
}; // devtools global hook

/* istanbul ignore next */


if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if (true) {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }

    if ( true && config.productionTip !== false && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);
}
/*  */


/* harmony default export */ __webpack_exports__["default"] = (Vue);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/vuedraggable/dist/vuedraggable.umd.js":
/*!************************************************************!*\
  !*** ./node_modules/vuedraggable/dist/vuedraggable.umd.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
  if (true) module.exports = factory(__webpack_require__(/*! sortablejs */ "./node_modules/sortablejs/modular/sortable.esm.js"));else {}
})(typeof self !== 'undefined' ? self : this, function (__WEBPACK_EXTERNAL_MODULE_a352__) {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.l = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // define getter function for harmony exports

      /******/

      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            enumerable: true,
            get: getter
          });
          /******/
        }
        /******/

      };
      /******/

      /******/
      // define __esModule on exports

      /******/


      __webpack_require__.r = function (exports) {
        /******/
        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
          /******/
          Object.defineProperty(exports, Symbol.toStringTag, {
            value: 'Module'
          });
          /******/
        }
        /******/


        Object.defineProperty(exports, '__esModule', {
          value: true
        });
        /******/
      };
      /******/

      /******/
      // create a fake namespace object

      /******/
      // mode & 1: value is a module id, require it

      /******/
      // mode & 2: merge all properties of value into the ns

      /******/
      // mode & 4: return value when already ns object

      /******/
      // mode & 8|1: behave like require

      /******/


      __webpack_require__.t = function (value, mode) {
        /******/
        if (mode & 1) value = __webpack_require__(value);
        /******/

        if (mode & 8) return value;
        /******/

        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;
        /******/

        var ns = Object.create(null);
        /******/

        __webpack_require__.r(ns);
        /******/


        Object.defineProperty(ns, 'default', {
          enumerable: true,
          value: value
        });
        /******/

        if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {
          return value[key];
        }.bind(null, key));
        /******/

        return ns;
        /******/
      };
      /******/

      /******/
      // getDefaultExport function for compatibility with non-harmony modules

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module['default'];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, 'a', getter);
        /******/


        return getter;
        /******/
      };
      /******/

      /******/
      // Object.prototype.hasOwnProperty.call

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/

      /******/
      // __webpack_public_path__

      /******/


      __webpack_require__.p = "";
      /******/

      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(__webpack_require__.s = "fb15");
      /******/
    }
    /************************************************************************/

    /******/
    ({
      /***/
      "01f9":
      /***/
      function (module, exports, __webpack_require__) {
        "use strict";

        var LIBRARY = __webpack_require__("2d00");

        var $export = __webpack_require__("5ca1");

        var redefine = __webpack_require__("2aba");

        var hide = __webpack_require__("32e9");

        var Iterators = __webpack_require__("84f2");

        var $iterCreate = __webpack_require__("41a0");

        var setToStringTag = __webpack_require__("7f20");

        var getPrototypeOf = __webpack_require__("38fd");

        var ITERATOR = __webpack_require__("2b4c")('iterator');

        var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

        var FF_ITERATOR = '@@iterator';
        var KEYS = 'keys';
        var VALUES = 'values';

        var returnThis = function () {
          return this;
        };

        module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
          $iterCreate(Constructor, NAME, next);

          var getMethod = function (kind) {
            if (!BUGGY && kind in proto) return proto[kind];

            switch (kind) {
              case KEYS:
                return function keys() {
                  return new Constructor(this, kind);
                };

              case VALUES:
                return function values() {
                  return new Constructor(this, kind);
                };
            }

            return function entries() {
              return new Constructor(this, kind);
            };
          };

          var TAG = NAME + ' Iterator';
          var DEF_VALUES = DEFAULT == VALUES;
          var VALUES_BUG = false;
          var proto = Base.prototype;
          var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
          var $default = $native || getMethod(DEFAULT);
          var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
          var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
          var methods, key, IteratorPrototype; // Fix native

          if ($anyNative) {
            IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

            if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
              // Set @@toStringTag to native iterators
              setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines

              if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
            }
          } // fix Array#{values, @@iterator}.name in V8 / FF


          if (DEF_VALUES && $native && $native.name !== VALUES) {
            VALUES_BUG = true;

            $default = function values() {
              return $native.call(this);
            };
          } // Define iterator


          if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
            hide(proto, ITERATOR, $default);
          } // Plug for library


          Iterators[NAME] = $default;
          Iterators[TAG] = returnThis;

          if (DEFAULT) {
            methods = {
              values: DEF_VALUES ? $default : getMethod(VALUES),
              keys: IS_SET ? $default : getMethod(KEYS),
              entries: $entries
            };
            if (FORCED) for (key in methods) {
              if (!(key in proto)) redefine(proto, key, methods[key]);
            } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
          }

          return methods;
        };
        /***/

      },

      /***/
      "02f4":
      /***/
      function (module, exports, __webpack_require__) {
        var toInteger = __webpack_require__("4588");

        var defined = __webpack_require__("be13"); // true  -> String#at
        // false -> String#codePointAt


        module.exports = function (TO_STRING) {
          return function (that, pos) {
            var s = String(defined(that));
            var i = toInteger(pos);
            var l = s.length;
            var a, b;
            if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
            a = s.charCodeAt(i);
            return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
          };
        };
        /***/

      },

      /***/
      "0390":
      /***/
      function (module, exports, __webpack_require__) {
        "use strict";

        var at = __webpack_require__("02f4")(true); // `AdvanceStringIndex` abstract operation
        // https://tc39.github.io/ecma262/#sec-advancestringindex


        module.exports = function (S, index, unicode) {
          return index + (unicode ? at(S, index).length : 1);
        };
        /***/

      },

      /***/
      "0bfb":
      /***/
      function (module, exports, __webpack_require__) {
        "use strict"; // 21.2.5.3 get RegExp.prototype.flags

        var anObject = __webpack_require__("cb7c");

        module.exports = function () {
          var that = anObject(this);
          var result = '';
          if (that.global) result += 'g';
          if (that.ignoreCase) result += 'i';
          if (that.multiline) result += 'm';
          if (that.unicode) result += 'u';
          if (that.sticky) result += 'y';
          return result;
        };
        /***/

      },

      /***/
      "0d58":
      /***/
      function (module, exports, __webpack_require__) {
        // 19.1.2.14 / 15.2.3.14 Object.keys(O)
        var $keys = __webpack_require__("ce10");

        var enumBugKeys = __webpack_require__("e11e");

        module.exports = Object.keys || function keys(O) {
          return $keys(O, enumBugKeys);
        };
        /***/

      },

      /***/
      "1495":
      /***/
      function (module, exports, __webpack_require__) {
        var dP = __webpack_require__("86cc");

        var anObject = __webpack_require__("cb7c");

        var getKeys = __webpack_require__("0d58");

        module.exports = __webpack_require__("9e1e") ? Object.defineProperties : function defineProperties(O, Properties) {
          anObject(O);
          var keys = getKeys(Properties);
          var length = keys.length;
          var i = 0;
          var P;

          while (length > i) dP.f(O, P = keys[i++], Properties[P]);

          return O;
        };
        /***/
      },

      /***/
      "214f":
      /***/
      function (module, exports, __webpack_require__) {
        "use strict";

        __webpack_require__("b0c5");

        var redefine = __webpack_require__("2aba");

        var hide = __webpack_require__("32e9");

        var fails = __webpack_require__("79e5");

        var defined = __webpack_require__("be13");

        var wks = __webpack_require__("2b4c");

        var regexpExec = __webpack_require__("520a");

        var SPECIES = wks('species');
        var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
          // #replace needs built-in support for named groups.
          // #match works fine because it just return the exec results, even if it has
          // a "grops" property.
          var re = /./;

          re.exec = function () {
            var result = [];
            result.groups = {
              a: '7'
            };
            return result;
          };

          return ''.replace(re, '$<a>') !== '7';
        });

        var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function () {
          // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
          var re = /(?:)/;
          var originalExec = re.exec;

          re.exec = function () {
            return originalExec.apply(this, arguments);
          };

          var result = 'ab'.split(re);
          return result.length === 2 && result[0] === 'a' && result[1] === 'b';
        }();

        module.exports = function (KEY, length, exec) {
          var SYMBOL = wks(KEY);
          var DELEGATES_TO_SYMBOL = !fails(function () {
            // String methods call symbol-named RegEp methods
            var O = {};

            O[SYMBOL] = function () {
              return 7;
            };

            return ''[KEY](O) != 7;
          });
          var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
            // Symbol-named RegExp methods call .exec
            var execCalled = false;
            var re = /a/;

            re.exec = function () {
              execCalled = true;
              return null;
            };

            if (KEY === 'split') {
              // RegExp[@@split] doesn't call the regex's exec method, but first creates
              // a new one. We need to return the patched regex when creating the new one.
              re.constructor = {};

              re.constructor[SPECIES] = function () {
                return re;
              };
            }

            re[SYMBOL]('');
            return !execCalled;
          }) : undefined;

          if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
            var nativeRegExpMethod = /./[SYMBOL];
            var fns = exec(defined, SYMBOL, ''[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
              if (regexp.exec === regexpExec) {
                if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                  // The native String method already delegates to @@method (this
                  // polyfilled function), leasing to infinite recursion.
                  // We avoid it by directly calling the native @@method method.
                  return {
                    done: true,
                    value: nativeRegExpMethod.call(regexp, str, arg2)
                  };
                }

                return {
                  done: true,
                  value: nativeMethod.call(str, regexp, arg2)
                };
              }

              return {
                done: false
              };
            });
            var strfn = fns[0];
            var rxfn = fns[1];
            redefine(String.prototype, KEY, strfn);
            hide(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
            // 21.2.5.11 RegExp.prototype[@@split](string, limit)
            ? function (string, arg) {
              return rxfn.call(string, this, arg);
            } // 21.2.5.6 RegExp.prototype[@@match](string)
            // 21.2.5.9 RegExp.prototype[@@search](string)
            : function (string) {
              return rxfn.call(string, this);
            });
          }
        };
        /***/

      },

      /***/
      "230e":
      /***/
      function (module, exports, __webpack_require__) {
        var isObject = __webpack_require__("d3f4");

        var document = __webpack_require__("7726").document; // typeof document.createElement is 'object' in old IE


        var is = isObject(document) && isObject(document.createElement);

        module.exports = function (it) {
          return is ? document.createElement(it) : {};
        };
        /***/

      },

      /***/
      "23c6":
      /***/
      function (module, exports, __webpack_require__) {
        // getting tag from 19.1.3.6 Object.prototype.toString()
        var cof = __webpack_require__("2d95");

        var TAG = __webpack_require__("2b4c")('toStringTag'); // ES3 wrong here


        var ARG = cof(function () {
          return arguments;
        }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

        var tryGet = function (it, key) {
          try {
            return it[key];
          } catch (e) {
            /* empty */
          }
        };

        module.exports = function (it) {
          var O, T, B;
          return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
          : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // builtinTag case
          : ARG ? cof(O) // ES3 arguments fallback
          : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
        };
        /***/

      },

      /***/
      "2621":
      /***/
      function (module, exports) {
        exports.f = Object.getOwnPropertySymbols;
        /***/
      },

      /***/
      "2aba":
      /***/
      function (module, exports, __webpack_require__) {
        var global = __webpack_require__("7726");

        var hide = __webpack_require__("32e9");

        var has = __webpack_require__("69a8");

        var SRC = __webpack_require__("ca5a")('src');

        var $toString = __webpack_require__("fa5b");

        var TO_STRING = 'toString';
        var TPL = ('' + $toString).split(TO_STRING);

        __webpack_require__("8378").inspectSource = function (it) {
          return $toString.call(it);
        };

        (module.exports = function (O, key, val, safe) {
          var isFunction = typeof val == 'function';
          if (isFunction) has(val, 'name') || hide(val, 'name', key);
          if (O[key] === val) return;
          if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));

          if (O === global) {
            O[key] = val;
          } else if (!safe) {
            delete O[key];
            hide(O, key, val);
          } else if (O[key]) {
            O[key] = val;
          } else {
            hide(O, key, val);
          } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative

        })(Function.prototype, TO_STRING, function toString() {
          return typeof this == 'function' && this[SRC] || $toString.call(this);
        });
        /***/
      },

      /***/
      "2aeb":
      /***/
      function (module, exports, __webpack_require__) {
        // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
        var anObject = __webpack_require__("cb7c");

        var dPs = __webpack_require__("1495");

        var enumBugKeys = __webpack_require__("e11e");

        var IE_PROTO = __webpack_require__("613b")('IE_PROTO');

        var Empty = function () {
          /* empty */
        };

        var PROTOTYPE = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

        var createDict = function () {
          // Thrash, waste and sodomy: IE GC bug
          var iframe = __webpack_require__("230e")('iframe');

          var i = enumBugKeys.length;
          var lt = '<';
          var gt = '>';
          var iframeDocument;
          iframe.style.display = 'none';

          __webpack_require__("fab2").appendChild(iframe);

          iframe.src = 'javascript:'; // eslint-disable-line no-script-url
          // createDict = iframe.contentWindow.Object;
          // html.removeChild(iframe);

          iframeDocument = iframe.contentWindow.document;
          iframeDocument.open();
          iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
          iframeDocument.close();
          createDict = iframeDocument.F;

          while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];

          return createDict();
        };

        module.exports = Object.create || function create(O, Properties) {
          var result;

          if (O !== null) {
            Empty[PROTOTYPE] = anObject(O);
            result = new Empty();
            Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

            result[IE_PROTO] = O;
          } else result = createDict();

          return Properties === undefined ? result : dPs(result, Properties);
        };
        /***/

      },

      /***/
      "2b4c":
      /***/
      function (module, exports, __webpack_require__) {
        var store = __webpack_require__("5537")('wks');

        var uid = __webpack_require__("ca5a");

        var Symbol = __webpack_require__("7726").Symbol;

        var USE_SYMBOL = typeof Symbol == 'function';

        var $exports = module.exports = function (name) {
          return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
        };

        $exports.store = store;
        /***/
      },

      /***/
      "2d00":
      /***/
      function (module, exports) {
        module.exports = false;
        /***/
      },

      /***/
      "2d95":
      /***/
      function (module, exports) {
        var toString = {}.toString;

        module.exports = function (it) {
          return toString.call(it).slice(8, -1);
        };
        /***/

      },

      /***/
      "2fdb":
      /***/
      function (module, exports, __webpack_require__) {
        "use strict"; // 21.1.3.7 String.prototype.includes(searchString, position = 0)

        var $export = __webpack_require__("5ca1");

        var context = __webpack_require__("d2c8");

        var INCLUDES = 'includes';
        $export($export.P + $export.F * __webpack_require__("5147")(INCLUDES), 'String', {
          includes: function includes(searchString
          /* , position = 0 */
          ) {
            return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
          }
        });
        /***/
      },

      /***/
      "32e9":
      /***/
      function (module, exports, __webpack_require__) {
        var dP = __webpack_require__("86cc");

        var createDesc = __webpack_require__("4630");

        module.exports = __webpack_require__("9e1e") ? function (object, key, value) {
          return dP.f(object, key, createDesc(1, value));
        } : function (object, key, value) {
          object[key] = value;
          return object;
        };
        /***/
      },

      /***/
      "38fd":
      /***/
      function (module, exports, __webpack_require__) {
        // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
        var has = __webpack_require__("69a8");

        var toObject = __webpack_require__("4bf8");

        var IE_PROTO = __webpack_require__("613b")('IE_PROTO');

        var ObjectProto = Object.prototype;

        module.exports = Object.getPrototypeOf || function (O) {
          O = toObject(O);
          if (has(O, IE_PROTO)) return O[IE_PROTO];

          if (typeof O.constructor == 'function' && O instanceof O.constructor) {
            return O.constructor.prototype;
          }

          return O instanceof Object ? ObjectProto : null;
        };
        /***/

      },

      /***/
      "41a0":
      /***/
      function (module, exports, __webpack_require__) {
        "use strict";

        var create = __webpack_require__("2aeb");

        var descriptor = __webpack_require__("4630");

        var setToStringTag = __webpack_require__("7f20");

        var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

        __webpack_require__("32e9")(IteratorPrototype, __webpack_require__("2b4c")('iterator'), function () {
          return this;
        });

        module.exports = function (Constructor, NAME, next) {
          Constructor.prototype = create(IteratorPrototype, {
            next: descriptor(1, next)
          });
          setToStringTag(Constructor, NAME + ' Iterator');
        };
        /***/

      },

      /***/
      "456d":
      /***/
      function (module, exports, __webpack_require__) {
        // 19.1.2.14 Object.keys(O)
        var toObject = __webpack_require__("4bf8");

        var $keys = __webpack_require__("0d58");

        __webpack_require__("5eda")('keys', function () {
          return function keys(it) {
            return $keys(toObject(it));
          };
        });
        /***/

      },

      /***/
      "4588":
      /***/
      function (module, exports) {
        // 7.1.4 ToInteger
        var ceil = Math.ceil;
        var floor = Math.floor;

        module.exports = function (it) {
          return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
        };
        /***/

      },

      /***/
      "4630":
      /***/
      function (module, exports) {
        module.exports = function (bitmap, value) {
          return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value
          };
        };
        /***/

      },

      /***/
      "4bf8":
      /***/
      function (module, exports, __webpack_require__) {
        // 7.1.13 ToObject(argument)
        var defined = __webpack_require__("be13");

        module.exports = function (it) {
          return Object(defined(it));
        };
        /***/

      },

      /***/
      "5147":
      /***/
      function (module, exports, __webpack_require__) {
        var MATCH = __webpack_require__("2b4c")('match');

        module.exports = function (KEY) {
          var re = /./;

          try {
            '/./'[KEY](re);
          } catch (e) {
            try {
              re[MATCH] = false;
              return !'/./'[KEY](re);
            } catch (f) {
              /* empty */
            }
          }

          return true;
        };
        /***/

      },

      /***/
      "520a":
      /***/
      function (module, exports, __webpack_require__) {
        "use strict";

        var regexpFlags = __webpack_require__("0bfb");

        var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the
        // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
        // which loads this file before patching the method.

        var nativeReplace = String.prototype.replace;
        var patchedExec = nativeExec;
        var LAST_INDEX = 'lastIndex';

        var UPDATES_LAST_INDEX_WRONG = function () {
          var re1 = /a/,
              re2 = /b*/g;
          nativeExec.call(re1, 'a');
          nativeExec.call(re2, 'a');
          return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
        }(); // nonparticipating capturing group, copied from es5-shim's String#split patch.


        var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
        var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

        if (PATCH) {
          patchedExec = function exec(str) {
            var re = this;
            var lastIndex, reCopy, match, i;

            if (NPCG_INCLUDED) {
              reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
            }

            if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];
            match = nativeExec.call(re, str);

            if (UPDATES_LAST_INDEX_WRONG && match) {
              re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
            }

            if (NPCG_INCLUDED && match && match.length > 1) {
              // Fix browsers whose `exec` methods don't consistently return `undefined`
              // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
              // eslint-disable-next-line no-loop-func
              nativeReplace.call(match[0], reCopy, function () {
                for (i = 1; i < arguments.length - 2; i++) {
                  if (arguments[i] === undefined) match[i] = undefined;
                }
              });
            }

            return match;
          };
        }

        module.exports = patchedExec;
        /***/
      },

      /***/
      "52a7":
      /***/
      function (module, exports) {
        exports.f = {}.propertyIsEnumerable;
        /***/
      },

      /***/
      "5537":
      /***/
      function (module, exports, __webpack_require__) {
        var core = __webpack_require__("8378");

        var global = __webpack_require__("7726");

        var SHARED = '__core-js_shared__';
        var store = global[SHARED] || (global[SHARED] = {});
        (module.exports = function (key, value) {
          return store[key] || (store[key] = value !== undefined ? value : {});
        })('versions', []).push({
          version: core.version,
          mode: __webpack_require__("2d00") ? 'pure' : 'global',
          copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
        });
        /***/
      },

      /***/
      "5ca1":
      /***/
      function (module, exports, __webpack_require__) {
        var global = __webpack_require__("7726");

        var core = __webpack_require__("8378");

        var hide = __webpack_require__("32e9");

        var redefine = __webpack_require__("2aba");

        var ctx = __webpack_require__("9b43");

        var PROTOTYPE = 'prototype';

        var $export = function (type, name, source) {
          var IS_FORCED = type & $export.F;
          var IS_GLOBAL = type & $export.G;
          var IS_STATIC = type & $export.S;
          var IS_PROTO = type & $export.P;
          var IS_BIND = type & $export.B;
          var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
          var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
          var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
          var key, own, out, exp;
          if (IS_GLOBAL) source = name;

          for (key in source) {
            // contains in native
            own = !IS_FORCED && target && target[key] !== undefined; // export native or passed

            out = (own ? target : source)[key]; // bind timers to global for call from export context

            exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // extend global

            if (target) redefine(target, key, out, type & $export.U); // export

            if (exports[key] != out) hide(exports, key, exp);
            if (IS_PROTO && expProto[key] != out) expProto[key] = out;
          }
        };

        global.core = core; // type bitmap

        $export.F = 1; // forced

        $export.G = 2; // global

        $export.S = 4; // static

        $export.P = 8; // proto

        $export.B = 16; // bind

        $export.W = 32; // wrap

        $export.U = 64; // safe

        $export.R = 128; // real proto method for `library`

        module.exports = $export;
        /***/
      },

      /***/
      "5eda":
      /***/
      function (module, exports, __webpack_require__) {
        // most Object methods by ES6 should accept primitives
        var $export = __webpack_require__("5ca1");

        var core = __webpack_require__("8378");

        var fails = __webpack_require__("79e5");

        module.exports = function (KEY, exec) {
          var fn = (core.Object || {})[KEY] || Object[KEY];
          var exp = {};
          exp[KEY] = exec(fn);
          $export($export.S + $export.F * fails(function () {
            fn(1);
          }), 'Object', exp);
        };
        /***/

      },

      /***/
      "5f1b":
      /***/
      function (module, exports, __webpack_require__) {
        "use strict";

        var classof = __webpack_require__("23c6");

        var builtinExec = RegExp.prototype.exec; // `RegExpExec` abstract operation
        // https://tc39.github.io/ecma262/#sec-regexpexec

        module.exports = function (R, S) {
          var exec = R.exec;

          if (typeof exec === 'function') {
            var result = exec.call(R, S);

            if (typeof result !== 'object') {
              throw new TypeError('RegExp exec method returned something other than an Object or null');
            }

            return result;
          }

          if (classof(R) !== 'RegExp') {
            throw new TypeError('RegExp#exec called on incompatible receiver');
          }

          return builtinExec.call(R, S);
        };
        /***/

      },

      /***/
      "613b":
      /***/
      function (module, exports, __webpack_require__) {
        var shared = __webpack_require__("5537")('keys');

        var uid = __webpack_require__("ca5a");

        module.exports = function (key) {
          return shared[key] || (shared[key] = uid(key));
        };
        /***/

      },

      /***/
      "626a":
      /***/
      function (module, exports, __webpack_require__) {
        // fallback for non-array-like ES3 and non-enumerable old V8 strings
        var cof = __webpack_require__("2d95"); // eslint-disable-next-line no-prototype-builtins


        module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
          return cof(it) == 'String' ? it.split('') : Object(it);
        };
        /***/
      },

      /***/
      "6762":
      /***/
      function (module, exports, __webpack_require__) {
        "use strict"; // https://github.com/tc39/Array.prototype.includes

        var $export = __webpack_require__("5ca1");

        var $includes = __webpack_require__("c366")(true);

        $export($export.P, 'Array', {
          includes: function includes(el
          /* , fromIndex = 0 */
          ) {
            return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
          }
        });

        __webpack_require__("9c6c")('includes');
        /***/

      },

      /***/
      "6821":
      /***/
      function (module, exports, __webpack_require__) {
        // to indexed object, toObject with fallback for non-array-like ES3 strings
        var IObject = __webpack_require__("626a");

        var defined = __webpack_require__("be13");

        module.exports = function (it) {
          return IObject(defined(it));
        };
        /***/

      },

      /***/
      "69a8":
      /***/
      function (module, exports) {
        var hasOwnProperty = {}.hasOwnProperty;

        module.exports = function (it, key) {
          return hasOwnProperty.call(it, key);
        };
        /***/

      },

      /***/
      "6a99":
      /***/
      function (module, exports, __webpack_require__) {
        // 7.1.1 ToPrimitive(input [, PreferredType])
        var isObject = __webpack_require__("d3f4"); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
        // and the second argument - flag - preferred type is a string


        module.exports = function (it, S) {
          if (!isObject(it)) return it;
          var fn, val;
          if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
          if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
          if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
          throw TypeError("Can't convert object to primitive value");
        };
        /***/

      },

      /***/
      "7333":
      /***/
      function (module, exports, __webpack_require__) {
        "use strict"; // 19.1.2.1 Object.assign(target, source, ...)

        var getKeys = __webpack_require__("0d58");

        var gOPS = __webpack_require__("2621");

        var pIE = __webpack_require__("52a7");

        var toObject = __webpack_require__("4bf8");

        var IObject = __webpack_require__("626a");

        var $assign = Object.assign; // should work with symbols and should have deterministic property order (V8 bug)

        module.exports = !$assign || __webpack_require__("79e5")(function () {
          var A = {};
          var B = {}; // eslint-disable-next-line no-undef

          var S = Symbol();
          var K = 'abcdefghijklmnopqrst';
          A[S] = 7;
          K.split('').forEach(function (k) {
            B[k] = k;
          });
          return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
        }) ? function assign(target, source) {
          // eslint-disable-line no-unused-vars
          var T = toObject(target);
          var aLen = arguments.length;
          var index = 1;
          var getSymbols = gOPS.f;
          var isEnum = pIE.f;

          while (aLen > index) {
            var S = IObject(arguments[index++]);
            var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
            var length = keys.length;
            var j = 0;
            var key;

            while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
          }

          return T;
        } : $assign;
        /***/
      },

      /***/
      "7726":
      /***/
      function (module, exports) {
        // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
        var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
        : Function('return this')();
        if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

        /***/
      },

      /***/
      "77f1":
      /***/
      function (module, exports, __webpack_require__) {
        var toInteger = __webpack_require__("4588");

        var max = Math.max;
        var min = Math.min;

        module.exports = function (index, length) {
          index = toInteger(index);
          return index < 0 ? max(index + length, 0) : min(index, length);
        };
        /***/

      },

      /***/
      "79e5":
      /***/
      function (module, exports) {
        module.exports = function (exec) {
          try {
            return !!exec();
          } catch (e) {
            return true;
          }
        };
        /***/

      },

      /***/
      "7f20":
      /***/
      function (module, exports, __webpack_require__) {
        var def = __webpack_require__("86cc").f;

        var has = __webpack_require__("69a8");

        var TAG = __webpack_require__("2b4c")('toStringTag');

        module.exports = function (it, tag, stat) {
          if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
            configurable: true,
            value: tag
          });
        };
        /***/

      },

      /***/
      "8378":
      /***/
      function (module, exports) {
        var core = module.exports = {
          version: '2.6.5'
        };
        if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

        /***/
      },

      /***/
      "84f2":
      /***/
      function (module, exports) {
        module.exports = {};
        /***/
      },

      /***/
      "86cc":
      /***/
      function (module, exports, __webpack_require__) {
        var anObject = __webpack_require__("cb7c");

        var IE8_DOM_DEFINE = __webpack_require__("c69a");

        var toPrimitive = __webpack_require__("6a99");

        var dP = Object.defineProperty;
        exports.f = __webpack_require__("9e1e") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
          anObject(O);
          P = toPrimitive(P, true);
          anObject(Attributes);
          if (IE8_DOM_DEFINE) try {
            return dP(O, P, Attributes);
          } catch (e) {
            /* empty */
          }
          if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
          if ('value' in Attributes) O[P] = Attributes.value;
          return O;
        };
        /***/
      },

      /***/
      "9b43":
      /***/
      function (module, exports, __webpack_require__) {
        // optional / simple context binding
        var aFunction = __webpack_require__("d8e8");

        module.exports = function (fn, that, length) {
          aFunction(fn);
          if (that === undefined) return fn;

          switch (length) {
            case 1:
              return function (a) {
                return fn.call(that, a);
              };

            case 2:
              return function (a, b) {
                return fn.call(that, a, b);
              };

            case 3:
              return function (a, b, c) {
                return fn.call(that, a, b, c);
              };
          }

          return function
            /* ...args */
          () {
            return fn.apply(that, arguments);
          };
        };
        /***/

      },

      /***/
      "9c6c":
      /***/
      function (module, exports, __webpack_require__) {
        // 22.1.3.31 Array.prototype[@@unscopables]
        var UNSCOPABLES = __webpack_require__("2b4c")('unscopables');

        var ArrayProto = Array.prototype;
        if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__("32e9")(ArrayProto, UNSCOPABLES, {});

        module.exports = function (key) {
          ArrayProto[UNSCOPABLES][key] = true;
        };
        /***/

      },

      /***/
      "9def":
      /***/
      function (module, exports, __webpack_require__) {
        // 7.1.15 ToLength
        var toInteger = __webpack_require__("4588");

        var min = Math.min;

        module.exports = function (it) {
          return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
        };
        /***/

      },

      /***/
      "9e1e":
      /***/
      function (module, exports, __webpack_require__) {
        // Thank's IE8 for his funny defineProperty
        module.exports = !__webpack_require__("79e5")(function () {
          return Object.defineProperty({}, 'a', {
            get: function () {
              return 7;
            }
          }).a != 7;
        });
        /***/
      },

      /***/
      "a352":
      /***/
      function (module, exports) {
        module.exports = __WEBPACK_EXTERNAL_MODULE_a352__;
        /***/
      },

      /***/
      "a481":
      /***/
      function (module, exports, __webpack_require__) {
        "use strict";

        var anObject = __webpack_require__("cb7c");

        var toObject = __webpack_require__("4bf8");

        var toLength = __webpack_require__("9def");

        var toInteger = __webpack_require__("4588");

        var advanceStringIndex = __webpack_require__("0390");

        var regExpExec = __webpack_require__("5f1b");

        var max = Math.max;
        var min = Math.min;
        var floor = Math.floor;
        var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
        var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

        var maybeToString = function (it) {
          return it === undefined ? it : String(it);
        }; // @@replace logic


        __webpack_require__("214f")('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
          return [// `String.prototype.replace` method
          // https://tc39.github.io/ecma262/#sec-string.prototype.replace
          function replace(searchValue, replaceValue) {
            var O = defined(this);
            var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
            return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
          }, // `RegExp.prototype[@@replace]` method
          // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
          function (regexp, replaceValue) {
            var res = maybeCallNative($replace, regexp, this, replaceValue);
            if (res.done) return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            var functionalReplace = typeof replaceValue === 'function';
            if (!functionalReplace) replaceValue = String(replaceValue);
            var global = rx.global;

            if (global) {
              var fullUnicode = rx.unicode;
              rx.lastIndex = 0;
            }

            var results = [];

            while (true) {
              var result = regExpExec(rx, S);
              if (result === null) break;
              results.push(result);
              if (!global) break;
              var matchStr = String(result[0]);
              if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            }

            var accumulatedResult = '';
            var nextSourcePosition = 0;

            for (var i = 0; i < results.length; i++) {
              result = results[i];
              var matched = String(result[0]);
              var position = max(min(toInteger(result.index), S.length), 0);
              var captures = []; // NOTE: This is equivalent to
              //   captures = result.slice(1).map(maybeToString)
              // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
              // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
              // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

              for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));

              var namedCaptures = result.groups;

              if (functionalReplace) {
                var replacerArgs = [matched].concat(captures, position, S);
                if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
                var replacement = String(replaceValue.apply(undefined, replacerArgs));
              } else {
                replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
              }

              if (position >= nextSourcePosition) {
                accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
                nextSourcePosition = position + matched.length;
              }
            }

            return accumulatedResult + S.slice(nextSourcePosition);
          }]; // https://tc39.github.io/ecma262/#sec-getsubstitution

          function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
            var tailPos = position + matched.length;
            var m = captures.length;
            var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

            if (namedCaptures !== undefined) {
              namedCaptures = toObject(namedCaptures);
              symbols = SUBSTITUTION_SYMBOLS;
            }

            return $replace.call(replacement, symbols, function (match, ch) {
              var capture;

              switch (ch.charAt(0)) {
                case '$':
                  return '$';

                case '&':
                  return matched;

                case '`':
                  return str.slice(0, position);

                case "'":
                  return str.slice(tailPos);

                case '<':
                  capture = namedCaptures[ch.slice(1, -1)];
                  break;

                default:
                  // \d\d?
                  var n = +ch;
                  if (n === 0) return match;

                  if (n > m) {
                    var f = floor(n / 10);
                    if (f === 0) return match;
                    if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                    return match;
                  }

                  capture = captures[n - 1];
              }

              return capture === undefined ? '' : capture;
            });
          }
        });
        /***/

      },

      /***/
      "aae3":
      /***/
      function (module, exports, __webpack_require__) {
        // 7.2.8 IsRegExp(argument)
        var isObject = __webpack_require__("d3f4");

        var cof = __webpack_require__("2d95");

        var MATCH = __webpack_require__("2b4c")('match');

        module.exports = function (it) {
          var isRegExp;
          return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
        };
        /***/

      },

      /***/
      "ac6a":
      /***/
      function (module, exports, __webpack_require__) {
        var $iterators = __webpack_require__("cadf");

        var getKeys = __webpack_require__("0d58");

        var redefine = __webpack_require__("2aba");

        var global = __webpack_require__("7726");

        var hide = __webpack_require__("32e9");

        var Iterators = __webpack_require__("84f2");

        var wks = __webpack_require__("2b4c");

        var ITERATOR = wks('iterator');
        var TO_STRING_TAG = wks('toStringTag');
        var ArrayValues = Iterators.Array;
        var DOMIterables = {
          CSSRuleList: true,
          // TODO: Not spec compliant, should be false.
          CSSStyleDeclaration: false,
          CSSValueList: false,
          ClientRectList: false,
          DOMRectList: false,
          DOMStringList: false,
          DOMTokenList: true,
          DataTransferItemList: false,
          FileList: false,
          HTMLAllCollection: false,
          HTMLCollection: false,
          HTMLFormElement: false,
          HTMLSelectElement: false,
          MediaList: true,
          // TODO: Not spec compliant, should be false.
          MimeTypeArray: false,
          NamedNodeMap: false,
          NodeList: true,
          PaintRequestList: false,
          Plugin: false,
          PluginArray: false,
          SVGLengthList: false,
          SVGNumberList: false,
          SVGPathSegList: false,
          SVGPointList: false,
          SVGStringList: false,
          SVGTransformList: false,
          SourceBufferList: false,
          StyleSheetList: true,
          // TODO: Not spec compliant, should be false.
          TextTrackCueList: false,
          TextTrackList: false,
          TouchList: false
        };

        for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
          var NAME = collections[i];
          var explicit = DOMIterables[NAME];
          var Collection = global[NAME];
          var proto = Collection && Collection.prototype;
          var key;

          if (proto) {
            if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
            if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
            Iterators[NAME] = ArrayValues;
            if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
          }
        }
        /***/

      },

      /***/
      "b0c5":
      /***/
      function (module, exports, __webpack_require__) {
        "use strict";

        var regexpExec = __webpack_require__("520a");

        __webpack_require__("5ca1")({
          target: 'RegExp',
          proto: true,
          forced: regexpExec !== /./.exec
        }, {
          exec: regexpExec
        });
        /***/

      },

      /***/
      "be13":
      /***/
      function (module, exports) {
        // 7.2.1 RequireObjectCoercible(argument)
        module.exports = function (it) {
          if (it == undefined) throw TypeError("Can't call method on  " + it);
          return it;
        };
        /***/

      },

      /***/
      "c366":
      /***/
      function (module, exports, __webpack_require__) {
        // false -> Array#indexOf
        // true  -> Array#includes
        var toIObject = __webpack_require__("6821");

        var toLength = __webpack_require__("9def");

        var toAbsoluteIndex = __webpack_require__("77f1");

        module.exports = function (IS_INCLUDES) {
          return function ($this, el, fromIndex) {
            var O = toIObject($this);
            var length = toLength(O.length);
            var index = toAbsoluteIndex(fromIndex, length);
            var value; // Array#includes uses SameValueZero equality algorithm
            // eslint-disable-next-line no-self-compare

            if (IS_INCLUDES && el != el) while (length > index) {
              value = O[index++]; // eslint-disable-next-line no-self-compare

              if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
            } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
              if (O[index] === el) return IS_INCLUDES || index || 0;
            }
            return !IS_INCLUDES && -1;
          };
        };
        /***/

      },

      /***/
      "c649":
      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */

        (function (global) {
          /* harmony export (binding) */
          __webpack_require__.d(__webpack_exports__, "c", function () {
            return insertNodeAt;
          });
          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "a", function () {
            return camelize;
          });
          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "b", function () {
            return console;
          });
          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "d", function () {
            return removeNode;
          });
          /* harmony import */


          var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a481");
          /* harmony import */


          var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0__);

          function getConsole() {
            if (typeof window !== "undefined") {
              return window.console;
            }

            return global.console;
          }

          var console = getConsole();

          function cached(fn) {
            var cache = Object.create(null);
            return function cachedFn(str) {
              var hit = cache[str];
              return hit || (cache[str] = fn(str));
            };
          }

          var regex = /-(\w)/g;
          var camelize = cached(function (str) {
            return str.replace(regex, function (_, c) {
              return c ? c.toUpperCase() : "";
            });
          });

          function removeNode(node) {
            if (node.parentElement !== null) {
              node.parentElement.removeChild(node);
            }
          }

          function insertNodeAt(fatherNode, node, position) {
            var refNode = position === 0 ? fatherNode.children[0] : fatherNode.children[position - 1].nextSibling;
            fatherNode.insertBefore(node, refNode);
          }
          /* WEBPACK VAR INJECTION */

        }).call(this, __webpack_require__("c8ba"));
        /***/
      },

      /***/
      "c69a":
      /***/
      function (module, exports, __webpack_require__) {
        module.exports = !__webpack_require__("9e1e") && !__webpack_require__("79e5")(function () {
          return Object.defineProperty(__webpack_require__("230e")('div'), 'a', {
            get: function () {
              return 7;
            }
          }).a != 7;
        });
        /***/
      },

      /***/
      "c8ba":
      /***/
      function (module, exports) {
        var g; // This works in non-strict mode

        g = function () {
          return this;
        }();

        try {
          // This works if eval is allowed (see CSP)
          g = g || new Function("return this")();
        } catch (e) {
          // This works if the window reference is available
          if (typeof window === "object") g = window;
        } // g can still be undefined, but nothing to do about it...
        // We return undefined, instead of nothing here, so it's
        // easier to handle this case. if(!global) { ...}


        module.exports = g;
        /***/
      },

      /***/
      "ca5a":
      /***/
      function (module, exports) {
        var id = 0;
        var px = Math.random();

        module.exports = function (key) {
          return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
        };
        /***/

      },

      /***/
      "cadf":
      /***/
      function (module, exports, __webpack_require__) {
        "use strict";

        var addToUnscopables = __webpack_require__("9c6c");

        var step = __webpack_require__("d53b");

        var Iterators = __webpack_require__("84f2");

        var toIObject = __webpack_require__("6821"); // 22.1.3.4 Array.prototype.entries()
        // 22.1.3.13 Array.prototype.keys()
        // 22.1.3.29 Array.prototype.values()
        // 22.1.3.30 Array.prototype[@@iterator]()


        module.exports = __webpack_require__("01f9")(Array, 'Array', function (iterated, kind) {
          this._t = toIObject(iterated); // target

          this._i = 0; // next index

          this._k = kind; // kind
          // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
        }, function () {
          var O = this._t;
          var kind = this._k;
          var index = this._i++;

          if (!O || index >= O.length) {
            this._t = undefined;
            return step(1);
          }

          if (kind == 'keys') return step(0, index);
          if (kind == 'values') return step(0, O[index]);
          return step(0, [index, O[index]]);
        }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

        Iterators.Arguments = Iterators.Array;
        addToUnscopables('keys');
        addToUnscopables('values');
        addToUnscopables('entries');
        /***/
      },

      /***/
      "cb7c":
      /***/
      function (module, exports, __webpack_require__) {
        var isObject = __webpack_require__("d3f4");

        module.exports = function (it) {
          if (!isObject(it)) throw TypeError(it + ' is not an object!');
          return it;
        };
        /***/

      },

      /***/
      "ce10":
      /***/
      function (module, exports, __webpack_require__) {
        var has = __webpack_require__("69a8");

        var toIObject = __webpack_require__("6821");

        var arrayIndexOf = __webpack_require__("c366")(false);

        var IE_PROTO = __webpack_require__("613b")('IE_PROTO');

        module.exports = function (object, names) {
          var O = toIObject(object);
          var i = 0;
          var result = [];
          var key;

          for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key); // Don't enum bug & hidden keys


          while (names.length > i) if (has(O, key = names[i++])) {
            ~arrayIndexOf(result, key) || result.push(key);
          }

          return result;
        };
        /***/

      },

      /***/
      "d2c8":
      /***/
      function (module, exports, __webpack_require__) {
        // helper for String#{startsWith, endsWith, includes}
        var isRegExp = __webpack_require__("aae3");

        var defined = __webpack_require__("be13");

        module.exports = function (that, searchString, NAME) {
          if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
          return String(defined(that));
        };
        /***/

      },

      /***/
      "d3f4":
      /***/
      function (module, exports) {
        module.exports = function (it) {
          return typeof it === 'object' ? it !== null : typeof it === 'function';
        };
        /***/

      },

      /***/
      "d53b":
      /***/
      function (module, exports) {
        module.exports = function (done, value) {
          return {
            value: value,
            done: !!done
          };
        };
        /***/

      },

      /***/
      "d8e8":
      /***/
      function (module, exports) {
        module.exports = function (it) {
          if (typeof it != 'function') throw TypeError(it + ' is not a function!');
          return it;
        };
        /***/

      },

      /***/
      "e11e":
      /***/
      function (module, exports) {
        // IE 8- don't enum bug keys
        module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
        /***/
      },

      /***/
      "f559":
      /***/
      function (module, exports, __webpack_require__) {
        "use strict"; // 21.1.3.18 String.prototype.startsWith(searchString [, position ])

        var $export = __webpack_require__("5ca1");

        var toLength = __webpack_require__("9def");

        var context = __webpack_require__("d2c8");

        var STARTS_WITH = 'startsWith';
        var $startsWith = ''[STARTS_WITH];
        $export($export.P + $export.F * __webpack_require__("5147")(STARTS_WITH), 'String', {
          startsWith: function startsWith(searchString
          /* , position = 0 */
          ) {
            var that = context(this, searchString, STARTS_WITH);
            var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
            var search = String(searchString);
            return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
          }
        });
        /***/
      },

      /***/
      "f6fd":
      /***/
      function (module, exports) {
        // document.currentScript polyfill by Adam Miller
        // MIT license
        (function (document) {
          var currentScript = "currentScript",
              scripts = document.getElementsByTagName('script'); // Live NodeList collection
          // If browser needs currentScript polyfill, add get currentScript() to the document object

          if (!(currentScript in document)) {
            Object.defineProperty(document, currentScript, {
              get: function () {
                // IE 6-10 supports script readyState
                // IE 10+ support stack trace
                try {
                  throw new Error();
                } catch (err) {
                  // Find the second match for the "at" string to get file src url from stack.
                  // Specifically works with the format of stack traces in IE.
                  var i,
                      res = (/.*at [^\(]*\((.*):.+:.+\)$/ig.exec(err.stack) || [false])[1]; // For all scripts on the page, if src matches or if ready state is interactive, return the script tag

                  for (i in scripts) {
                    if (scripts[i].src == res || scripts[i].readyState == "interactive") {
                      return scripts[i];
                    }
                  } // If no match, return null


                  return null;
                }
              }
            });
          }
        })(document);
        /***/

      },

      /***/
      "f751":
      /***/
      function (module, exports, __webpack_require__) {
        // 19.1.3.1 Object.assign(target, source)
        var $export = __webpack_require__("5ca1");

        $export($export.S + $export.F, 'Object', {
          assign: __webpack_require__("7333")
        });
        /***/
      },

      /***/
      "fa5b":
      /***/
      function (module, exports, __webpack_require__) {
        module.exports = __webpack_require__("5537")('native-function-to-string', Function.toString);
        /***/
      },

      /***/
      "fab2":
      /***/
      function (module, exports, __webpack_require__) {
        var document = __webpack_require__("7726").document;

        module.exports = document && document.documentElement;
        /***/
      },

      /***/
      "fb15":
      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict"; // ESM COMPAT FLAG

        __webpack_require__.r(__webpack_exports__); // CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js
        // This file is imported into lib/wc client bundles.


        if (typeof window !== 'undefined') {
          if (true) {
            __webpack_require__("f6fd");
          }

          var setPublicPath_i;

          if ((setPublicPath_i = window.document.currentScript) && (setPublicPath_i = setPublicPath_i.src.match(/(.+\/)[^/]+\.js(\?.*)?$/))) {
            __webpack_require__.p = setPublicPath_i[1]; // eslint-disable-line
          }
        } // Indicate to webpack that this file can be concatenated

        /* harmony default export */


        var setPublicPath = null; // EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.assign.js

        var es6_object_assign = __webpack_require__("f751"); // EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.starts-with.js


        var es6_string_starts_with = __webpack_require__("f559"); // EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom.iterable.js


        var web_dom_iterable = __webpack_require__("ac6a"); // EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.iterator.js


        var es6_array_iterator = __webpack_require__("cadf"); // EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.keys.js


        var es6_object_keys = __webpack_require__("456d"); // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js


        function _arrayWithHoles(arr) {
          if (Array.isArray(arr)) return arr;
        } // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js


        function _iterableToArrayLimit(arr, i) {
          if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = undefined;

          try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);

              if (i && _arr.length === i) break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null) _i["return"]();
            } finally {
              if (_d) throw _e;
            }
          }

          return _arr;
        } // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js


        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length) len = arr.length;

          for (var i = 0, arr2 = new Array(len); i < len; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        } // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js


        function _unsupportedIterableToArray(o, minLen) {
          if (!o) return;
          if (typeof o === "string") return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor) n = o.constructor.name;
          if (n === "Map" || n === "Set") return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
        } // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js


        function _nonIterableRest() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        } // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js


        function _slicedToArray(arr, i) {
          return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
        } // EXTERNAL MODULE: ./node_modules/core-js/modules/es7.array.includes.js


        var es7_array_includes = __webpack_require__("6762"); // EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.includes.js


        var es6_string_includes = __webpack_require__("2fdb"); // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js


        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr)) return _arrayLikeToArray(arr);
        } // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js


        function _iterableToArray(iter) {
          if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
        } // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js


        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        } // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js


        function _toConsumableArray(arr) {
          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
        } // EXTERNAL MODULE: external {"commonjs":"sortablejs","commonjs2":"sortablejs","amd":"sortablejs","root":"Sortable"}


        var external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_ = __webpack_require__("a352");

        var external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_default = /*#__PURE__*/__webpack_require__.n(external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_); // EXTERNAL MODULE: ./src/util/helper.js


        var helper = __webpack_require__("c649"); // CONCATENATED MODULE: ./src/vuedraggable.js


        function buildAttribute(object, propName, value) {
          if (value === undefined) {
            return object;
          }

          object = object || {};
          object[propName] = value;
          return object;
        }

        function computeVmIndex(vnodes, element) {
          return vnodes.map(function (elt) {
            return elt.elm;
          }).indexOf(element);
        }

        function _computeIndexes(slots, children, isTransition, footerOffset) {
          if (!slots) {
            return [];
          }

          var elmFromNodes = slots.map(function (elt) {
            return elt.elm;
          });
          var footerIndex = children.length - footerOffset;

          var rawIndexes = _toConsumableArray(children).map(function (elt, idx) {
            return idx >= footerIndex ? elmFromNodes.length : elmFromNodes.indexOf(elt);
          });

          return isTransition ? rawIndexes.filter(function (ind) {
            return ind !== -1;
          }) : rawIndexes;
        }

        function emit(evtName, evtData) {
          var _this = this;

          this.$nextTick(function () {
            return _this.$emit(evtName.toLowerCase(), evtData);
          });
        }

        function delegateAndEmit(evtName) {
          var _this2 = this;

          return function (evtData) {
            if (_this2.realList !== null) {
              _this2["onDrag" + evtName](evtData);
            }

            emit.call(_this2, evtName, evtData);
          };
        }

        function isTransitionName(name) {
          return ["transition-group", "TransitionGroup"].includes(name);
        }

        function vuedraggable_isTransition(slots) {
          if (!slots || slots.length !== 1) {
            return false;
          }

          var _slots = _slicedToArray(slots, 1),
              componentOptions = _slots[0].componentOptions;

          if (!componentOptions) {
            return false;
          }

          return isTransitionName(componentOptions.tag);
        }

        function getSlot(slot, scopedSlot, key) {
          return slot[key] || (scopedSlot[key] ? scopedSlot[key]() : undefined);
        }

        function computeChildrenAndOffsets(children, slot, scopedSlot) {
          var headerOffset = 0;
          var footerOffset = 0;
          var header = getSlot(slot, scopedSlot, "header");

          if (header) {
            headerOffset = header.length;
            children = children ? [].concat(_toConsumableArray(header), _toConsumableArray(children)) : _toConsumableArray(header);
          }

          var footer = getSlot(slot, scopedSlot, "footer");

          if (footer) {
            footerOffset = footer.length;
            children = children ? [].concat(_toConsumableArray(children), _toConsumableArray(footer)) : _toConsumableArray(footer);
          }

          return {
            children: children,
            headerOffset: headerOffset,
            footerOffset: footerOffset
          };
        }

        function getComponentAttributes($attrs, componentData) {
          var attributes = null;

          var update = function update(name, value) {
            attributes = buildAttribute(attributes, name, value);
          };

          var attrs = Object.keys($attrs).filter(function (key) {
            return key === "id" || key.startsWith("data-");
          }).reduce(function (res, key) {
            res[key] = $attrs[key];
            return res;
          }, {});
          update("attrs", attrs);

          if (!componentData) {
            return attributes;
          }

          var on = componentData.on,
              props = componentData.props,
              componentDataAttrs = componentData.attrs;
          update("on", on);
          update("props", props);
          Object.assign(attributes.attrs, componentDataAttrs);
          return attributes;
        }

        var eventsListened = ["Start", "Add", "Remove", "Update", "End"];
        var eventsToEmit = ["Choose", "Unchoose", "Sort", "Filter", "Clone"];
        var readonlyProperties = ["Move"].concat(eventsListened, eventsToEmit).map(function (evt) {
          return "on" + evt;
        });
        var draggingElement = null;
        var props = {
          options: Object,
          list: {
            type: Array,
            required: false,
            default: null
          },
          value: {
            type: Array,
            required: false,
            default: null
          },
          noTransitionOnDrag: {
            type: Boolean,
            default: false
          },
          clone: {
            type: Function,
            default: function _default(original) {
              return original;
            }
          },
          element: {
            type: String,
            default: "div"
          },
          tag: {
            type: String,
            default: null
          },
          move: {
            type: Function,
            default: null
          },
          componentData: {
            type: Object,
            required: false,
            default: null
          }
        };
        var draggableComponent = {
          name: "draggable",
          inheritAttrs: false,
          props: props,
          data: function data() {
            return {
              transitionMode: false,
              noneFunctionalComponentMode: false
            };
          },
          render: function render(h) {
            var slots = this.$slots.default;
            this.transitionMode = vuedraggable_isTransition(slots);

            var _computeChildrenAndOf = computeChildrenAndOffsets(slots, this.$slots, this.$scopedSlots),
                children = _computeChildrenAndOf.children,
                headerOffset = _computeChildrenAndOf.headerOffset,
                footerOffset = _computeChildrenAndOf.footerOffset;

            this.headerOffset = headerOffset;
            this.footerOffset = footerOffset;
            var attributes = getComponentAttributes(this.$attrs, this.componentData);
            return h(this.getTag(), attributes, children);
          },
          created: function created() {
            if (this.list !== null && this.value !== null) {
              helper["b"
              /* console */
              ].error("Value and list props are mutually exclusive! Please set one or another.");
            }

            if (this.element !== "div") {
              helper["b"
              /* console */
              ].warn("Element props is deprecated please use tag props instead. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#element-props");
            }

            if (this.options !== undefined) {
              helper["b"
              /* console */
              ].warn("Options props is deprecated, add sortable options directly as vue.draggable item, or use v-bind. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#options-props");
            }
          },
          mounted: function mounted() {
            var _this3 = this;

            this.noneFunctionalComponentMode = this.getTag().toLowerCase() !== this.$el.nodeName.toLowerCase() && !this.getIsFunctional();

            if (this.noneFunctionalComponentMode && this.transitionMode) {
              throw new Error("Transition-group inside component is not supported. Please alter tag value or remove transition-group. Current tag value: ".concat(this.getTag()));
            }

            var optionsAdded = {};
            eventsListened.forEach(function (elt) {
              optionsAdded["on" + elt] = delegateAndEmit.call(_this3, elt);
            });
            eventsToEmit.forEach(function (elt) {
              optionsAdded["on" + elt] = emit.bind(_this3, elt);
            });
            var attributes = Object.keys(this.$attrs).reduce(function (res, key) {
              res[Object(helper["a"
              /* camelize */
              ])(key)] = _this3.$attrs[key];
              return res;
            }, {});
            var options = Object.assign({}, this.options, attributes, optionsAdded, {
              onMove: function onMove(evt, originalEvent) {
                return _this3.onDragMove(evt, originalEvent);
              }
            });
            !("draggable" in options) && (options.draggable = ">*");
            this._sortable = new external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_default.a(this.rootContainer, options);
            this.computeIndexes();
          },
          beforeDestroy: function beforeDestroy() {
            if (this._sortable !== undefined) this._sortable.destroy();
          },
          computed: {
            rootContainer: function rootContainer() {
              return this.transitionMode ? this.$el.children[0] : this.$el;
            },
            realList: function realList() {
              return this.list ? this.list : this.value;
            }
          },
          watch: {
            options: {
              handler: function handler(newOptionValue) {
                this.updateOptions(newOptionValue);
              },
              deep: true
            },
            $attrs: {
              handler: function handler(newOptionValue) {
                this.updateOptions(newOptionValue);
              },
              deep: true
            },
            realList: function realList() {
              this.computeIndexes();
            }
          },
          methods: {
            getIsFunctional: function getIsFunctional() {
              var fnOptions = this._vnode.fnOptions;
              return fnOptions && fnOptions.functional;
            },
            getTag: function getTag() {
              return this.tag || this.element;
            },
            updateOptions: function updateOptions(newOptionValue) {
              for (var property in newOptionValue) {
                var value = Object(helper["a"
                /* camelize */
                ])(property);

                if (readonlyProperties.indexOf(value) === -1) {
                  this._sortable.option(value, newOptionValue[property]);
                }
              }
            },
            getChildrenNodes: function getChildrenNodes() {
              if (this.noneFunctionalComponentMode) {
                return this.$children[0].$slots.default;
              }

              var rawNodes = this.$slots.default;
              return this.transitionMode ? rawNodes[0].child.$slots.default : rawNodes;
            },
            computeIndexes: function computeIndexes() {
              var _this4 = this;

              this.$nextTick(function () {
                _this4.visibleIndexes = _computeIndexes(_this4.getChildrenNodes(), _this4.rootContainer.children, _this4.transitionMode, _this4.footerOffset);
              });
            },
            getUnderlyingVm: function getUnderlyingVm(htmlElt) {
              var index = computeVmIndex(this.getChildrenNodes() || [], htmlElt);

              if (index === -1) {
                //Edge case during move callback: related element might be
                //an element different from collection
                return null;
              }

              var element = this.realList[index];
              return {
                index: index,
                element: element
              };
            },
            getUnderlyingPotencialDraggableComponent: function getUnderlyingPotencialDraggableComponent(_ref) {
              var vue = _ref.__vue__;

              if (!vue || !vue.$options || !isTransitionName(vue.$options._componentTag)) {
                if (!("realList" in vue) && vue.$children.length === 1 && "realList" in vue.$children[0]) return vue.$children[0];
                return vue;
              }

              return vue.$parent;
            },
            emitChanges: function emitChanges(evt) {
              var _this5 = this;

              this.$nextTick(function () {
                _this5.$emit("change", evt);
              });
            },
            alterList: function alterList(onList) {
              if (this.list) {
                onList(this.list);
                return;
              }

              var newList = _toConsumableArray(this.value);

              onList(newList);
              this.$emit("input", newList);
            },
            spliceList: function spliceList() {
              var _arguments = arguments;

              var spliceList = function spliceList(list) {
                return list.splice.apply(list, _toConsumableArray(_arguments));
              };

              this.alterList(spliceList);
            },
            updatePosition: function updatePosition(oldIndex, newIndex) {
              var updatePosition = function updatePosition(list) {
                return list.splice(newIndex, 0, list.splice(oldIndex, 1)[0]);
              };

              this.alterList(updatePosition);
            },
            getRelatedContextFromMoveEvent: function getRelatedContextFromMoveEvent(_ref2) {
              var to = _ref2.to,
                  related = _ref2.related;
              var component = this.getUnderlyingPotencialDraggableComponent(to);

              if (!component) {
                return {
                  component: component
                };
              }

              var list = component.realList;
              var context = {
                list: list,
                component: component
              };

              if (to !== related && list && component.getUnderlyingVm) {
                var destination = component.getUnderlyingVm(related);

                if (destination) {
                  return Object.assign(destination, context);
                }
              }

              return context;
            },
            getVmIndex: function getVmIndex(domIndex) {
              var indexes = this.visibleIndexes;
              var numberIndexes = indexes.length;
              return domIndex > numberIndexes - 1 ? numberIndexes : indexes[domIndex];
            },
            getComponent: function getComponent() {
              return this.$slots.default[0].componentInstance;
            },
            resetTransitionData: function resetTransitionData(index) {
              if (!this.noTransitionOnDrag || !this.transitionMode) {
                return;
              }

              var nodes = this.getChildrenNodes();
              nodes[index].data = null;
              var transitionContainer = this.getComponent();
              transitionContainer.children = [];
              transitionContainer.kept = undefined;
            },
            onDragStart: function onDragStart(evt) {
              this.context = this.getUnderlyingVm(evt.item);
              evt.item._underlying_vm_ = this.clone(this.context.element);
              draggingElement = evt.item;
            },
            onDragAdd: function onDragAdd(evt) {
              var element = evt.item._underlying_vm_;

              if (element === undefined) {
                return;
              }

              Object(helper["d"
              /* removeNode */
              ])(evt.item);
              var newIndex = this.getVmIndex(evt.newIndex);
              this.spliceList(newIndex, 0, element);
              this.computeIndexes();
              var added = {
                element: element,
                newIndex: newIndex
              };
              this.emitChanges({
                added: added
              });
            },
            onDragRemove: function onDragRemove(evt) {
              Object(helper["c"
              /* insertNodeAt */
              ])(this.rootContainer, evt.item, evt.oldIndex);

              if (evt.pullMode === "clone") {
                Object(helper["d"
                /* removeNode */
                ])(evt.clone);
                return;
              }

              var oldIndex = this.context.index;
              this.spliceList(oldIndex, 1);
              var removed = {
                element: this.context.element,
                oldIndex: oldIndex
              };
              this.resetTransitionData(oldIndex);
              this.emitChanges({
                removed: removed
              });
            },
            onDragUpdate: function onDragUpdate(evt) {
              Object(helper["d"
              /* removeNode */
              ])(evt.item);
              Object(helper["c"
              /* insertNodeAt */
              ])(evt.from, evt.item, evt.oldIndex);
              var oldIndex = this.context.index;
              var newIndex = this.getVmIndex(evt.newIndex);
              this.updatePosition(oldIndex, newIndex);
              var moved = {
                element: this.context.element,
                oldIndex: oldIndex,
                newIndex: newIndex
              };
              this.emitChanges({
                moved: moved
              });
            },
            updateProperty: function updateProperty(evt, propertyName) {
              evt.hasOwnProperty(propertyName) && (evt[propertyName] += this.headerOffset);
            },
            computeFutureIndex: function computeFutureIndex(relatedContext, evt) {
              if (!relatedContext.element) {
                return 0;
              }

              var domChildren = _toConsumableArray(evt.to.children).filter(function (el) {
                return el.style["display"] !== "none";
              });

              var currentDOMIndex = domChildren.indexOf(evt.related);
              var currentIndex = relatedContext.component.getVmIndex(currentDOMIndex);
              var draggedInList = domChildren.indexOf(draggingElement) !== -1;
              return draggedInList || !evt.willInsertAfter ? currentIndex : currentIndex + 1;
            },
            onDragMove: function onDragMove(evt, originalEvent) {
              var onMove = this.move;

              if (!onMove || !this.realList) {
                return true;
              }

              var relatedContext = this.getRelatedContextFromMoveEvent(evt);
              var draggedContext = this.context;
              var futureIndex = this.computeFutureIndex(relatedContext, evt);
              Object.assign(draggedContext, {
                futureIndex: futureIndex
              });
              var sendEvt = Object.assign({}, evt, {
                relatedContext: relatedContext,
                draggedContext: draggedContext
              });
              return onMove(sendEvt, originalEvent);
            },
            onDragEnd: function onDragEnd() {
              this.computeIndexes();
              draggingElement = null;
            }
          }
        };

        if (typeof window !== "undefined" && "Vue" in window) {
          window.Vue.component("draggable", draggableComponent);
        }
        /* harmony default export */


        var vuedraggable = draggableComponent; // CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js

        /* harmony default export */

        var entry_lib = __webpack_exports__["default"] = vuedraggable;
        /***/
      }
      /******/

    })["default"]
  );
});

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./src/components/main/main.scss?vue&type=style&index=0&lang=scss&":
/*!*************************************************************************!*\
  !*** ./src/components/main/main.scss?vue&type=style&index=0&lang=scss& ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_cjs_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_main_scss_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/style-loader/dist/cjs.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/sass-loader/dist/cjs.js!./main.scss?vue&type=style&index=0&lang=scss& */ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./src/components/main/main.scss?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_style_loader_dist_cjs_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_main_scss_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_cjs_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_main_scss_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_cjs_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_main_scss_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_cjs_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_main_scss_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "./src/components/main/main.vue":
/*!**************************************!*\
  !*** ./src/components/main/main.vue ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _main_vue_vue_type_template_id_5e2104ef___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main.vue?vue&type=template&id=5e2104ef& */ "./src/components/main/main.vue?vue&type=template&id=5e2104ef&");
/* harmony import */ var _main_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./main.vue?vue&type=script&lang=js& */ "./src/components/main/main.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _main_scss_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./main.scss?vue&type=style&index=0&lang=scss& */ "./src/components/main/main.scss?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _main_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _main_vue_vue_type_template_id_5e2104ef___WEBPACK_IMPORTED_MODULE_0__["render"],
  _main_vue_vue_type_template_id_5e2104ef___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/components/main/main.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/main/main.vue?vue&type=script&lang=js&":
/*!***************************************************************!*\
  !*** ./src/components/main/main.vue?vue&type=script&lang=js& ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_main_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib!../../../node_modules/vue-loader/lib??vue-loader-options!./main.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/components/main/main.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_main_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/components/main/main.vue?vue&type=template&id=5e2104ef&":
/*!*********************************************************************!*\
  !*** ./src/components/main/main.vue?vue&type=template&id=5e2104ef& ***!
  \*********************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_main_vue_vue_type_template_id_5e2104ef___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./main.vue?vue&type=template&id=5e2104ef& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/main/main.vue?vue&type=template&id=5e2104ef&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_main_vue_vue_type_template_id_5e2104ef___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_main_vue_vue_type_template_id_5e2104ef___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm.js");
/* harmony import */ var _components_main_main_vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/main/main.vue */ "./src/components/main/main.vue");


new vue__WEBPACK_IMPORTED_MODULE_0__["default"]({
  el: '#root',
  render: function render(h) {
    return h(_components_main_main_vue__WEBPACK_IMPORTED_MODULE_1__["default"]);
  }
});

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL21haW4vbWFpbi52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbWFpbi9tYWluLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb3J0YWJsZWpzL21vZHVsYXIvc29ydGFibGUuZXNtLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL21haW4vbWFpbi5zY3NzP2QxMDMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL21haW4vbWFpbi52dWU/OGI1YSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUucnVudGltZS5lc20uanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvZXh0ZXJuYWwge1wiY29tbW9uanNcIjpcInNvcnRhYmxlanNcIixcImNvbW1vbmpzMlwiOlwic29ydGFibGVqc1wiLFwiYW1kXCI6XCJzb3J0YWJsZWpzXCIsXCJyb290XCI6XCJTb3J0YWJsZVwifSIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9zcmMvdXRpbC9oZWxwZXIuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2N1cnJlbnQtc2NyaXB0LXBvbHlmaWxsL2N1cnJlbnRTY3JpcHQuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZnVuY3Rpb24tdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9AdnVlL2NsaS1zZXJ2aWNlL2xpYi9jb21tYW5kcy9idWlsZC9zZXRQdWJsaWNQYXRoLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVSZXN0LmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vL3Z1ZWRyYWdnYWJsZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy92dWVkcmFnZ2FibGUvc3JjL3Z1ZWRyYWdnYWJsZS5qcyIsIndlYnBhY2s6Ly8vdnVlZHJhZ2dhYmxlL25vZGVfbW9kdWxlcy9AdnVlL2NsaS1zZXJ2aWNlL2xpYi9jb21tYW5kcy9idWlsZC9lbnRyeS1saWIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tYWluL21haW4uc2Nzcz80NGY3Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL21haW4vbWFpbi52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbWFpbi9tYWluLnZ1ZT8wYjgwIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL21haW4vbWFpbi52dWU/Mjg1NyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsibmFtZSIsImRhdGEiLCJuYW1lRmlyc3QiLCJuYW1lU2Vjb25kIiwibmFtZUxhc3QiLCJhZ2UiLCJwZW9wbGVzIiwic2hvd0Zyb21Mb2NhbCIsIndhdGNoIiwibW91bnRlZCIsImNvbXBvbmVudHMiLCJkcmFnZ2FibGUiLCJtZXRob2RzIiwiYWRkTmV3Iiwic2F2ZWRBZ2UiLCJsb2NhbFN0b3JhZ2UiLCJjb25zb2xlIiwiY2xlYXJMb2NhbCIsImNsZWFySW5wdXQiLCJkZWxldGVDaGVsaWsiLCJpbmRleCIsImNyZWF0ZWQiLCJtb2R1bGUiLCJleHBvcnRzIiwidXNlU291cmNlTWFwIiwibGlzdCIsInRvU3RyaW5nIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJpZCIsIl9pIiwicHVzaCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInRvQ29tbWVudCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInNvdXJjZU1hcCIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInByb2Nlc3MiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsIkVycm9yIiwiZGVmYXVsdENsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJlIiwiY2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNhbGwiLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJxdWV1ZSIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibGVuIiwicnVuIiwibmV4dFRpY2siLCJhcmdzIiwiQXJyYXkiLCJhcmd1bWVudHMiLCJJdGVtIiwiYXJyYXkiLCJwcm90b3R5cGUiLCJhcHBseSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJub29wIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJnbG9iYWwiLCJ1bmRlZmluZWQiLCJzZXRJbW1lZGlhdGUiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImRvY3VtZW50IiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJjYWxsYmFjayIsIkZ1bmN0aW9uIiwidGFzayIsImNsZWFySW1tZWRpYXRlIiwiaGFuZGxlIiwicnVuSWZQcmVzZW50IiwiaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24iLCJjYW5Vc2VQb3N0TWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbiIsIm1lc3NhZ2VQcmVmaXgiLCJNYXRoIiwicmFuZG9tIiwib25HbG9iYWxNZXNzYWdlIiwiZXZlbnQiLCJpbmRleE9mIiwic2xpY2UiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbiIsImNoYW5uZWwiLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uIiwiaHRtbCIsImRvY3VtZW50RWxlbWVudCIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbiIsImF0dGFjaFRvIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJzZWxmIiwiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJoYXNPd25Qcm9wZXJ0eSIsIl9vYmplY3RTcHJlYWQiLCJvd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImZvckVhY2giLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInNvdXJjZVN5bWJvbEtleXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl90b0NvbnN1bWFibGVBcnJheSIsImFyciIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJpc0FycmF5IiwiYXJyMiIsIml0ZXIiLCJmcm9tIiwiVHlwZUVycm9yIiwidXNlckFnZW50IiwicGF0dGVybiIsIndpbmRvdyIsIm5hdmlnYXRvciIsIm1hdGNoIiwiSUUxMU9yTGVzcyIsIkVkZ2UiLCJGaXJlRm94IiwiU2FmYXJpIiwiSU9TIiwiQ2hyb21lRm9yQW5kcm9pZCIsImNhcHR1cmVNb2RlIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJlbCIsImZuIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm1hdGNoZXMiLCJzZWxlY3RvciIsInN1YnN0cmluZyIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwiXyIsImdldFBhcmVudE9ySG9zdCIsImhvc3QiLCJub2RlVHlwZSIsInBhcmVudE5vZGUiLCJjbG9zZXN0IiwiY3R4IiwiaW5jbHVkZUNUWCIsIlJfU1BBQ0UiLCJ0b2dnbGVDbGFzcyIsInN0YXRlIiwiY2xhc3NMaXN0IiwiY2xhc3NOYW1lIiwicmVwbGFjZSIsImNzcyIsInByb3AiLCJ2YWwiLCJzdHlsZSIsImRlZmF1bHRWaWV3IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImN1cnJlbnRTdHlsZSIsIm1hdHJpeCIsInNlbGZPbmx5IiwiYXBwbGllZFRyYW5zZm9ybXMiLCJ0cmFuc2Zvcm0iLCJtYXRyaXhGbiIsIkRPTU1hdHJpeCIsIldlYktpdENTU01hdHJpeCIsIkNTU01hdHJpeCIsIk1TQ1NTTWF0cml4IiwiZmluZCIsInRhZ05hbWUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIm4iLCJnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50Iiwic2Nyb2xsaW5nRWxlbWVudCIsImdldFJlY3QiLCJyZWxhdGl2ZVRvQ29udGFpbmluZ0Jsb2NrIiwicmVsYXRpdmVUb05vblN0YXRpY1BhcmVudCIsInVuZG9TY2FsZSIsImNvbnRhaW5lciIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImVsUmVjdCIsInRvcCIsImxlZnQiLCJib3R0b20iLCJyaWdodCIsImhlaWdodCIsIndpZHRoIiwiaW5uZXJIZWlnaHQiLCJpbm5lcldpZHRoIiwiY29udGFpbmVyUmVjdCIsInBhcnNlSW50IiwiZWxNYXRyaXgiLCJzY2FsZVgiLCJhIiwic2NhbGVZIiwiZCIsImlzU2Nyb2xsZWRQYXN0IiwiZWxTaWRlIiwicGFyZW50U2lkZSIsInBhcmVudCIsImdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50IiwiZWxTaWRlVmFsIiwicGFyZW50U2lkZVZhbCIsInZpc2libGUiLCJnZXRDaGlsZCIsImNoaWxkTnVtIiwib3B0aW9ucyIsImN1cnJlbnRDaGlsZCIsImNoaWxkcmVuIiwiZGlzcGxheSIsIlNvcnRhYmxlIiwiZ2hvc3QiLCJkcmFnZ2VkIiwibGFzdENoaWxkIiwibGFzdCIsImxhc3RFbGVtZW50Q2hpbGQiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwibm9kZU5hbWUiLCJ0b1VwcGVyQ2FzZSIsImNsb25lIiwiZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwid2luU2Nyb2xsZXIiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiaW5kZXhPZk9iamVjdCIsIk51bWJlciIsImluY2x1ZGVTZWxmIiwiZWxlbSIsImdvdFNlbGYiLCJjbGllbnRXaWR0aCIsInNjcm9sbFdpZHRoIiwiY2xpZW50SGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwiZWxlbUNTUyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImJvZHkiLCJleHRlbmQiLCJkc3QiLCJzcmMiLCJpc1JlY3RFcXVhbCIsInJlY3QxIiwicmVjdDIiLCJyb3VuZCIsIl90aHJvdHRsZVRpbWVvdXQiLCJ0aHJvdHRsZSIsIm1zIiwiX3RoaXMiLCJjYW5jZWxUaHJvdHRsZSIsInNjcm9sbEJ5IiwieCIsInkiLCJQb2x5bWVyIiwiJCIsImpRdWVyeSIsIlplcHRvIiwiZG9tIiwiY2xvbmVOb2RlIiwic2V0UmVjdCIsInJlY3QiLCJ1bnNldFJlY3QiLCJleHBhbmRvIiwiRGF0ZSIsImdldFRpbWUiLCJBbmltYXRpb25TdGF0ZU1hbmFnZXIiLCJhbmltYXRpb25TdGF0ZXMiLCJhbmltYXRpb25DYWxsYmFja0lkIiwiY2FwdHVyZUFuaW1hdGlvblN0YXRlIiwiYW5pbWF0aW9uIiwiY2hpbGQiLCJmcm9tUmVjdCIsInRoaXNBbmltYXRpb25EdXJhdGlvbiIsImNoaWxkTWF0cml4IiwiZiIsImFkZEFuaW1hdGlvblN0YXRlIiwicmVtb3ZlQW5pbWF0aW9uU3RhdGUiLCJzcGxpY2UiLCJhbmltYXRlQWxsIiwiYW5pbWF0aW5nIiwiYW5pbWF0aW9uVGltZSIsInRpbWUiLCJ0b1JlY3QiLCJwcmV2RnJvbVJlY3QiLCJwcmV2VG9SZWN0IiwiYW5pbWF0aW5nUmVjdCIsInRhcmdldE1hdHJpeCIsImNhbGN1bGF0ZVJlYWxUaW1lIiwiYW5pbWF0ZSIsIm1heCIsImFuaW1hdGlvblJlc2V0VGltZXIiLCJjdXJyZW50UmVjdCIsImR1cmF0aW9uIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJhbmltYXRpbmdYIiwiYW5pbWF0aW5nWSIsInJlcGFpbnQiLCJlYXNpbmciLCJhbmltYXRlZCIsIm9mZnNldFdpZHRoIiwic3FydCIsInBvdyIsInBsdWdpbnMiLCJkZWZhdWx0cyIsImluaXRpYWxpemVCeURlZmF1bHQiLCJQbHVnaW5NYW5hZ2VyIiwibW91bnQiLCJwbHVnaW4iLCJvcHRpb24iLCJwbHVnaW5FdmVudCIsImV2ZW50TmFtZSIsInNvcnRhYmxlIiwiZXZ0IiwiZXZlbnRDYW5jZWxlZCIsImNhbmNlbCIsImV2ZW50TmFtZUdsb2JhbCIsInBsdWdpbk5hbWUiLCJpbml0aWFsaXplUGx1Z2lucyIsImluaXRpYWxpemVkIiwibW9kaWZpZWQiLCJtb2RpZnlPcHRpb24iLCJnZXRFdmVudFByb3BlcnRpZXMiLCJldmVudFByb3BlcnRpZXMiLCJtb2RpZmllZFZhbHVlIiwib3B0aW9uTGlzdGVuZXJzIiwiZGlzcGF0Y2hFdmVudCIsIl9yZWYiLCJyb290RWwiLCJ0YXJnZXRFbCIsImNsb25lRWwiLCJ0b0VsIiwiZnJvbUVsIiwib2xkSW5kZXgiLCJuZXdJbmRleCIsIm9sZERyYWdnYWJsZUluZGV4IiwibmV3RHJhZ2dhYmxlSW5kZXgiLCJvcmlnaW5hbEV2ZW50IiwicHV0U29ydGFibGUiLCJleHRyYUV2ZW50UHJvcGVydGllcyIsIm9uTmFtZSIsImNoYXJBdCIsInN1YnN0ciIsIkN1c3RvbUV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsInRvIiwicHVsbE1vZGUiLCJsYXN0UHV0TW9kZSIsImFsbEV2ZW50UHJvcGVydGllcyIsImJpbmQiLCJkcmFnRWwiLCJwYXJlbnRFbCIsImdob3N0RWwiLCJuZXh0RWwiLCJsYXN0RG93bkVsIiwiY2xvbmVIaWRkZW4iLCJkcmFnU3RhcnRlZCIsIm1vdmVkIiwiYWN0aXZlU29ydGFibGUiLCJhY3RpdmUiLCJoaWRlR2hvc3RGb3JUYXJnZXQiLCJfaGlkZUdob3N0Rm9yVGFyZ2V0IiwidW5oaWRlR2hvc3RGb3JUYXJnZXQiLCJfdW5oaWRlR2hvc3RGb3JUYXJnZXQiLCJjbG9uZU5vd0hpZGRlbiIsImNsb25lTm93U2hvd24iLCJkaXNwYXRjaFNvcnRhYmxlRXZlbnQiLCJfZGlzcGF0Y2hFdmVudCIsImluZm8iLCJhY3RpdmVHcm91cCIsImF3YWl0aW5nRHJhZ1N0YXJ0ZWQiLCJpZ25vcmVOZXh0Q2xpY2siLCJzb3J0YWJsZXMiLCJ0YXBFdnQiLCJ0b3VjaEV2dCIsImxhc3REeCIsImxhc3REeSIsInRhcERpc3RhbmNlTGVmdCIsInRhcERpc3RhbmNlVG9wIiwibGFzdFRhcmdldCIsImxhc3REaXJlY3Rpb24iLCJwYXN0Rmlyc3RJbnZlcnRUaHJlc2giLCJpc0NpcmN1bXN0YW50aWFsSW52ZXJ0IiwidGFyZ2V0TW92ZURpc3RhbmNlIiwiZ2hvc3RSZWxhdGl2ZVBhcmVudCIsImdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsIiwiX3NpbGVudCIsInNhdmVkSW5wdXRDaGVja2VkIiwiZG9jdW1lbnRFeGlzdHMiLCJQb3NpdGlvbkdob3N0QWJzb2x1dGVseSIsIkNTU0Zsb2F0UHJvcGVydHkiLCJzdXBwb3J0RHJhZ2dhYmxlIiwic3VwcG9ydENzc1BvaW50ZXJFdmVudHMiLCJjc3NUZXh0IiwicG9pbnRlckV2ZW50cyIsIl9kZXRlY3REaXJlY3Rpb24iLCJlbENTUyIsImVsV2lkdGgiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJjaGlsZDEiLCJjaGlsZDIiLCJmaXJzdENoaWxkQ1NTIiwic2Vjb25kQ2hpbGRDU1MiLCJmaXJzdENoaWxkV2lkdGgiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJzZWNvbmRDaGlsZFdpZHRoIiwiZmxleERpcmVjdGlvbiIsImdyaWRUZW1wbGF0ZUNvbHVtbnMiLCJzcGxpdCIsInRvdWNoaW5nU2lkZUNoaWxkMiIsImNsZWFyIiwiX2RyYWdFbEluUm93Q29sdW1uIiwiZHJhZ1JlY3QiLCJ0YXJnZXRSZWN0IiwidmVydGljYWwiLCJkcmFnRWxTMU9wcCIsImRyYWdFbFMyT3BwIiwiZHJhZ0VsT3BwTGVuZ3RoIiwidGFyZ2V0UzFPcHAiLCJ0YXJnZXRTMk9wcCIsInRhcmdldE9wcExlbmd0aCIsIl9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZSIsInJldCIsInNvbWUiLCJ0aHJlc2hvbGQiLCJlbXB0eUluc2VydFRocmVzaG9sZCIsImluc2lkZUhvcml6b250YWxseSIsImluc2lkZVZlcnRpY2FsbHkiLCJfcHJlcGFyZUdyb3VwIiwidG9GbiIsInB1bGwiLCJzYW1lR3JvdXAiLCJncm91cCIsIm90aGVyR3JvdXAiLCJvcmlnaW5hbEdyb3VwIiwiY2hlY2tQdWxsIiwiY2hlY2tQdXQiLCJwdXQiLCJyZXZlcnRDbG9uZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwibmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQiLCJ0b3VjaGVzIiwibmVhcmVzdCIsImNsaWVudFgiLCJjbGllbnRZIiwiX29uRHJhZ092ZXIiLCJfY2hlY2tPdXRzaWRlVGFyZ2V0RWwiLCJfaXNPdXRzaWRlVGhpc0VsIiwic29ydCIsImRpc2FibGVkIiwic3RvcmUiLCJ0ZXN0Iiwic3dhcFRocmVzaG9sZCIsImludmVydFN3YXAiLCJpbnZlcnRlZFN3YXBUaHJlc2hvbGQiLCJyZW1vdmVDbG9uZU9uSGlkZSIsImRpcmVjdGlvbiIsImdob3N0Q2xhc3MiLCJjaG9zZW5DbGFzcyIsImRyYWdDbGFzcyIsImlnbm9yZSIsInByZXZlbnRPbkZpbHRlciIsInNldERhdGEiLCJkYXRhVHJhbnNmZXIiLCJ0ZXh0Q29udGVudCIsImRyb3BCdWJibGUiLCJkcmFnb3ZlckJ1YmJsZSIsImRhdGFJZEF0dHIiLCJkZWxheSIsImRlbGF5T25Ub3VjaE9ubHkiLCJ0b3VjaFN0YXJ0VGhyZXNob2xkIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImZvcmNlRmFsbGJhY2siLCJmYWxsYmFja0NsYXNzIiwiZmFsbGJhY2tPbkJvZHkiLCJmYWxsYmFja1RvbGVyYW5jZSIsImZhbGxiYWNrT2Zmc2V0Iiwic3VwcG9ydFBvaW50ZXIiLCJuYXRpdmVEcmFnZ2FibGUiLCJfb25UYXBTdGFydCIsImdldCIsImNvbnRhaW5zIiwiX2dldERpcmVjdGlvbiIsInR5cGUiLCJ0b3VjaCIsInBvaW50ZXJUeXBlIiwib3JpZ2luYWxUYXJnZXQiLCJzaGFkb3dSb290IiwicGF0aCIsImNvbXBvc2VkUGF0aCIsIl9zYXZlSW5wdXRDaGVja2VkU3RhdGUiLCJidXR0b24iLCJpc0NvbnRlbnRFZGl0YWJsZSIsImNyaXRlcmlhIiwidHJpbSIsIl9wcmVwYXJlRHJhZ1N0YXJ0Iiwib3duZXJEb2N1bWVudCIsImRyYWdTdGFydEZuIiwibmV4dFNpYmxpbmciLCJfbGFzdFgiLCJfbGFzdFkiLCJfb25Ecm9wIiwiX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cyIsIl90cmlnZ2VyRHJhZ1N0YXJ0IiwiX2Rpc2FibGVEcmFnZ2FibGUiLCJfZGlzYWJsZURlbGF5ZWREcmFnIiwiX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlciIsIl9kcmFnU3RhcnRUaW1lciIsImFicyIsImZsb29yIiwiX29uVG91Y2hNb3ZlIiwiX29uRHJhZ1N0YXJ0Iiwic2VsZWN0aW9uIiwiX25leHRUaWNrIiwiZW1wdHkiLCJnZXRTZWxlY3Rpb24iLCJyZW1vdmVBbGxSYW5nZXMiLCJlcnIiLCJfZHJhZ1N0YXJ0ZWQiLCJmYWxsYmFjayIsIl9hcHBlbmRHaG9zdCIsIl9udWxsaW5nIiwiX2VtdWxhdGVEcmFnT3ZlciIsImVsZW1lbnRGcm9tUG9pbnQiLCJpbnNlcnRlZCIsImdob3N0TWF0cml4IiwicmVsYXRpdmVTY3JvbGxPZmZzZXQiLCJkeCIsImR5IiwiYiIsImMiLCJjc3NNYXRyaXgiLCJfaGlkZUNsb25lIiwiY2xvbmVJZCIsImluc2VydEJlZm9yZSIsIl9sb29wSWQiLCJzZXRJbnRlcnZhbCIsImVmZmVjdEFsbG93ZWQiLCJfZHJhZ1N0YXJ0SWQiLCJyZXZlcnQiLCJpc093bmVyIiwiY2FuU29ydCIsImZyb21Tb3J0YWJsZSIsImNvbXBsZXRlZEZpcmVkIiwiZHJhZ092ZXJFdmVudCIsImV4dHJhIiwiYXhpcyIsImNvbXBsZXRlZCIsIm9uTW92ZSIsImFmdGVyIiwiX29uTW92ZSIsImNoYW5nZWQiLCJpbnNlcnRpb24iLCJfc2hvd0Nsb25lIiwiX2lnbm9yZVdoaWxlQW5pbWF0aW5nIiwiZWxMYXN0Q2hpbGQiLCJfZ2hvc3RJc0xhc3QiLCJ0YXJnZXRCZWZvcmVGaXJzdFN3YXAiLCJkaWZmZXJlbnRMZXZlbCIsImRpZmZlcmVudFJvd0NvbCIsInNpZGUxIiwic2Nyb2xsZWRQYXN0VG9wIiwic2Nyb2xsQmVmb3JlIiwiX2dldFN3YXBEaXJlY3Rpb24iLCJzaWJsaW5nIiwiZHJhZ0luZGV4IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibW92ZVZlY3RvciIsIl91bnNpbGVudCIsIl9vZmZNb3ZlRXZlbnRzIiwiX29mZlVwRXZlbnRzIiwiY2xlYXJJbnRlcnZhbCIsIl9jYW5jZWxOZXh0VGljayIsInNhdmUiLCJjaGVja2VkIiwiaGFuZGxlRXZlbnQiLCJfZ2xvYmFsRHJhZ092ZXIiLCJ0b0FycmF5Iiwib3JkZXIiLCJnZXRBdHRyaWJ1dGUiLCJfZ2VuZXJhdGVJZCIsIml0ZW1zIiwic2V0IiwiY2xvc2VzdCQxIiwiZGVzdHJveSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyZW1vdmVBdHRyaWJ1dGUiLCJkcm9wRWZmZWN0Iiwid2lsbEluc2VydEFmdGVyIiwib25Nb3ZlRm4iLCJyZXRWYWwiLCJkcmFnZ2VkUmVjdCIsInJlbGF0ZWQiLCJyZWxhdGVkUmVjdCIsInNwYWNlciIsImlzTGFzdFRhcmdldCIsIm1vdXNlT25BeGlzIiwidGFyZ2V0TGVuZ3RoIiwidGFyZ2V0UzEiLCJ0YXJnZXRTMiIsImludmVydCIsIl9nZXRJbnNlcnREaXJlY3Rpb24iLCJzdHIiLCJocmVmIiwic3VtIiwiY2hhckNvZGVBdCIsInJvb3QiLCJpbnB1dHMiLCJpZHgiLCJ1dGlscyIsImlzIiwiY2FuY2VsTmV4dFRpY2siLCJkZXRlY3REaXJlY3Rpb24iLCJlbGVtZW50IiwiX2xlbiIsIl9rZXkiLCJjcmVhdGUiLCJhdXRvU2Nyb2xscyIsInNjcm9sbEVsIiwic2Nyb2xsUm9vdEVsIiwic2Nyb2xsaW5nIiwibGFzdEF1dG9TY3JvbGxYIiwibGFzdEF1dG9TY3JvbGxZIiwidG91Y2hFdnQkMSIsInBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsIiwiQXV0b1Njcm9sbFBsdWdpbiIsIkF1dG9TY3JvbGwiLCJzY3JvbGwiLCJzY3JvbGxTZW5zaXRpdml0eSIsInNjcm9sbFNwZWVkIiwiYnViYmxlU2Nyb2xsIiwiX2hhbmRsZUF1dG9TY3JvbGwiLCJfaGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsIiwiZHJhZ092ZXJDb21wbGV0ZWQiLCJfcmVmMiIsImRyYWdPdmVyQnViYmxlIiwiZHJvcCIsImNsZWFyUG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwiLCJjbGVhckF1dG9TY3JvbGxzIiwibnVsbGluZyIsImF1dG9TY3JvbGwiLCJvZ0VsZW1TY3JvbGxlciIsIm5ld0VsZW0iLCJwaWQiLCJpc0ZhbGxiYWNrIiwic2VucyIsInNwZWVkIiwic2Nyb2xsVGhpc0luc3RhbmNlIiwic2Nyb2xsQ3VzdG9tRm4iLCJzY3JvbGxGbiIsImxheWVyc091dCIsImN1cnJlbnRQYXJlbnQiLCJjYW5TY3JvbGxYIiwiY2FuU2Nyb2xsWSIsInNjcm9sbFBvc1giLCJzY3JvbGxQb3NZIiwidngiLCJ2eSIsImxheWVyIiwic2Nyb2xsT2Zmc2V0WSIsInNjcm9sbE9mZnNldFgiLCJ0b1NvcnRhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJvblNwaWxsIiwiUmV2ZXJ0Iiwic3RhcnRJbmRleCIsImRyYWdTdGFydCIsIl9yZWYzIiwiUmVtb3ZlIiwiX3JlZjQiLCJwYXJlbnRTb3J0YWJsZSIsImxhc3RTd2FwRWwiLCJTd2FwUGx1Z2luIiwiU3dhcCIsInN3YXBDbGFzcyIsImRyYWdPdmVyVmFsaWQiLCJzd2FwIiwicHJldlN3YXBFbCIsInN3YXBOb2RlcyIsInN3YXBJdGVtIiwibjEiLCJuMiIsInAxIiwicDIiLCJpMSIsImkyIiwiaXNFcXVhbE5vZGUiLCJtdWx0aURyYWdFbGVtZW50cyIsIm11bHRpRHJhZ0Nsb25lcyIsImxhc3RNdWx0aURyYWdTZWxlY3QiLCJtdWx0aURyYWdTb3J0YWJsZSIsImluaXRpYWxGb2xkaW5nIiwiZm9sZGluZyIsImRyYWdFbCQxIiwiY2xvbmVzRnJvbVJlY3QiLCJjbG9uZXNIaWRkZW4iLCJNdWx0aURyYWdQbHVnaW4iLCJNdWx0aURyYWciLCJfZGVzZWxlY3RNdWx0aURyYWciLCJfY2hlY2tLZXlEb3duIiwiX2NoZWNrS2V5VXAiLCJzZWxlY3RlZENsYXNzIiwibXVsdGlEcmFnS2V5IiwibXVsdGlEcmFnRWxlbWVudCIsIm11bHRpRHJhZ0tleURvd24iLCJpc011bHRpRHJhZyIsImRlbGF5U3RhcnRHbG9iYWwiLCJkZWxheUVuZGVkIiwic2V0dXBDbG9uZSIsInNvcnRhYmxlSW5kZXgiLCJpbnNlcnRNdWx0aURyYWdDbG9uZXMiLCJzaG93Q2xvbmUiLCJoaWRlQ2xvbmUiLCJfcmVmNSIsImRyYWdTdGFydEdsb2JhbCIsIl9yZWY2IiwibXVsdGlEcmFnIiwiX3JlZjciLCJfdGhpczIiLCJyZW1vdmVNdWx0aURyYWdFbGVtZW50cyIsImRyYWdPdmVyIiwiX3JlZjgiLCJfcmVmOSIsImluc2VydE11bHRpRHJhZ0VsZW1lbnRzIiwiX3JlZjEwIiwiZHJhZ1JlY3RBYnNvbHV0ZSIsImNsb25lc0hpZGRlbkJlZm9yZSIsImRyYWdPdmVyQW5pbWF0aW9uQ2FwdHVyZSIsIl9yZWYxMSIsImRyYWdNYXRyaXgiLCJkcmFnT3ZlckFuaW1hdGlvbkNvbXBsZXRlIiwiX3JlZjEyIiwib3JpZ2luYWxFdnQiLCJzaGlmdEtleSIsImxhc3RJbmRleCIsImN1cnJlbnRJbmRleCIsIm11bHRpRHJhZ0luZGV4IiwidXBkYXRlIiwibnVsbGluZ0dsb2JhbCIsImRlc3Ryb3lHbG9iYWwiLCJzaGlmdCIsInNlbGVjdCIsImRlc2VsZWN0IiwiX3RoaXMzIiwib2xkSW5kaWNpZXMiLCJuZXdJbmRpY2llcyIsImNsb25lcyIsInRvTG93ZXJDYXNlIiwiY2xvbmVzSW5zZXJ0ZWQiLCJlbGVtZW50c0luc2VydGVkIiwic2NvcGUiLCJUaW1lb3V0IiwiY2xvc2UiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsIm9uVGltZW91dCIsIl9vblRpbWVvdXQiLCJyZXF1aXJlIiwiZW1wdHlPYmplY3QiLCJmcmVlemUiLCJpc1VuZGVmIiwidiIsImlzRGVmIiwiaXNUcnVlIiwiaXNGYWxzZSIsImlzUHJpbWl0aXZlIiwiaXNPYmplY3QiLCJfdG9TdHJpbmciLCJ0b1Jhd1R5cGUiLCJpc1BsYWluT2JqZWN0IiwiaXNSZWdFeHAiLCJpc1ZhbGlkQXJyYXlJbmRleCIsInBhcnNlRmxvYXQiLCJTdHJpbmciLCJpc0Zpbml0ZSIsImlzUHJvbWlzZSIsInRoZW4iLCJjYXRjaCIsInRvTnVtYmVyIiwiaXNOYU4iLCJtYWtlTWFwIiwiZXhwZWN0c0xvd2VyQ2FzZSIsImlzQnVpbHRJblRhZyIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJyZW1vdmUiLCJoYXNPd24iLCJjYWNoZWQiLCJjYWNoZSIsImNhY2hlZEZuIiwiaGl0IiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwiY2FwaXRhbGl6ZSIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwicG9seWZpbGxCaW5kIiwiYm91bmRGbiIsImwiLCJfbGVuZ3RoIiwibmF0aXZlQmluZCIsInN0YXJ0IiwiX2Zyb20iLCJ0b09iamVjdCIsInJlcyIsIm5vIiwiaWRlbnRpdHkiLCJsb29zZUVxdWFsIiwiaXNPYmplY3RBIiwiaXNPYmplY3RCIiwiaXNBcnJheUEiLCJpc0FycmF5QiIsImV2ZXJ5Iiwia2V5c0EiLCJrZXlzQiIsImxvb3NlSW5kZXhPZiIsImNhbGxlZCIsIlNTUl9BVFRSIiwiQVNTRVRfVFlQRVMiLCJMSUZFQ1lDTEVfSE9PS1MiLCJjb25maWciLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJzaWxlbnQiLCJwcm9kdWN0aW9uVGlwIiwiZGV2dG9vbHMiLCJwZXJmb3JtYW5jZSIsImVycm9ySGFuZGxlciIsIndhcm5IYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNSZXNlcnZlZEF0dHIiLCJpc1Vua25vd25FbGVtZW50IiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJtdXN0VXNlUHJvcCIsImFzeW5jIiwiX2xpZmVjeWNsZUhvb2tzIiwidW5pY29kZVJlZ0V4cCIsImlzUmVzZXJ2ZWQiLCJkZWYiLCJiYWlsUkUiLCJSZWdFeHAiLCJwYXJzZVBhdGgiLCJzZWdtZW50cyIsImhhc1Byb3RvIiwiaW5Ccm93c2VyIiwiaW5XZWV4IiwiV1hFbnZpcm9ubWVudCIsInBsYXRmb3JtIiwid2VleFBsYXRmb3JtIiwiVUEiLCJpc0lFIiwiaXNJRTkiLCJpc0VkZ2UiLCJpc0FuZHJvaWQiLCJpc0lPUyIsImlzQ2hyb21lIiwiaXNQaGFudG9tSlMiLCJpc0ZGIiwibmF0aXZlV2F0Y2giLCJzdXBwb3J0c1Bhc3NpdmUiLCJvcHRzIiwiX2lzU2VydmVyIiwiaXNTZXJ2ZXJSZW5kZXJpbmciLCJWVUVfRU5WIiwiX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzTmF0aXZlIiwiQ3RvciIsImhhc1N5bWJvbCIsIlJlZmxlY3QiLCJfU2V0IiwiU2V0IiwiaGFzIiwiYWRkIiwid2FybiIsInRpcCIsImdlbmVyYXRlQ29tcG9uZW50VHJhY2UiLCJmb3JtYXRDb21wb25lbnROYW1lIiwiaGFzQ29uc29sZSIsImNsYXNzaWZ5UkUiLCJjbGFzc2lmeSIsIm1zZyIsInZtIiwidHJhY2UiLCJlcnJvciIsImluY2x1ZGVGaWxlIiwiJHJvb3QiLCJjaWQiLCJfaXNWdWUiLCIkb3B0aW9ucyIsIl9jb21wb25lbnRUYWciLCJmaWxlIiwiX19maWxlIiwicmVwZWF0IiwiJHBhcmVudCIsInRyZWUiLCJjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UiLCJ1aWQiLCJEZXAiLCJzdWJzIiwiYWRkU3ViIiwic3ViIiwicmVtb3ZlU3ViIiwiZGVwZW5kIiwiYWRkRGVwIiwibm90aWZ5IiwidGFyZ2V0U3RhY2siLCJwdXNoVGFyZ2V0IiwicG9wVGFyZ2V0IiwicG9wIiwiVk5vZGUiLCJ0YWciLCJ0ZXh0IiwiZWxtIiwiY29udGV4dCIsImNvbXBvbmVudE9wdGlvbnMiLCJhc3luY0ZhY3RvcnkiLCJucyIsImZuQ29udGV4dCIsImZuT3B0aW9ucyIsImZuU2NvcGVJZCIsImNvbXBvbmVudEluc3RhbmNlIiwicmF3IiwiaXNTdGF0aWMiLCJpc1Jvb3RJbnNlcnQiLCJpc0NvbW1lbnQiLCJpc0Nsb25lZCIsImlzT25jZSIsImFzeW5jTWV0YSIsImlzQXN5bmNQbGFjZWhvbGRlciIsInByb3RvdHlwZUFjY2Vzc29ycyIsImRlZmluZVByb3BlcnRpZXMiLCJjcmVhdGVFbXB0eVZOb2RlIiwibm9kZSIsImNyZWF0ZVRleHRWTm9kZSIsImNsb25lVk5vZGUiLCJ2bm9kZSIsImNsb25lZCIsImFycmF5UHJvdG8iLCJhcnJheU1ldGhvZHMiLCJtZXRob2RzVG9QYXRjaCIsIm1ldGhvZCIsIm9yaWdpbmFsIiwibXV0YXRvciIsInJlc3VsdCIsIm9iIiwiX19vYl9fIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNob3VsZE9ic2VydmUiLCJ0b2dnbGVPYnNlcnZpbmciLCJPYnNlcnZlciIsInZtQ291bnQiLCJwcm90b0F1Z21lbnQiLCJjb3B5QXVnbWVudCIsIndhbGsiLCJkZWZpbmVSZWFjdGl2ZSQkMSIsIm9ic2VydmUiLCJfX3Byb3RvX18iLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiY3VzdG9tU2V0dGVyIiwic2hhbGxvdyIsInByb3BlcnR5IiwiZ2V0dGVyIiwic2V0dGVyIiwiY2hpbGRPYiIsInJlYWN0aXZlR2V0dGVyIiwiZGVwZW5kQXJyYXkiLCJyZWFjdGl2ZVNldHRlciIsIm5ld1ZhbCIsImRlbCIsInN0cmF0cyIsInByb3BzRGF0YSIsImRlZmF1bHRTdHJhdCIsIm1lcmdlRGF0YSIsInRvVmFsIiwiZnJvbVZhbCIsIm1lcmdlRGF0YU9yRm4iLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsIm1lcmdlZERhdGFGbiIsIm1lcmdlZEluc3RhbmNlRGF0YUZuIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJtZXJnZUhvb2siLCJkZWR1cGVIb29rcyIsImhvb2tzIiwiaG9vayIsIm1lcmdlQXNzZXRzIiwiYXNzZXJ0T2JqZWN0VHlwZSIsImtleSQxIiwicHJvcHMiLCJpbmplY3QiLCJjb21wdXRlZCIsInByb3ZpZGUiLCJjaGVja0NvbXBvbmVudHMiLCJ2YWxpZGF0ZUNvbXBvbmVudE5hbWUiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZUluamVjdCIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiZGlycyIsImRpcmVjdGl2ZXMiLCJkZWYkJDEiLCJtZXJnZU9wdGlvbnMiLCJfYmFzZSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJhYnNlbnQiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJCb29sZWFuIiwic3RyaW5nSW5kZXgiLCJnZXRQcm9wRGVmYXVsdFZhbHVlIiwicHJldlNob3VsZE9ic2VydmUiLCJhc3NlcnRQcm9wIiwiZGVmYXVsdCIsIl9wcm9wcyIsImdldFR5cGUiLCJyZXF1aXJlZCIsInZhbGlkIiwiZXhwZWN0ZWRUeXBlcyIsImFzc2VydGVkVHlwZSIsImFzc2VydFR5cGUiLCJleHBlY3RlZFR5cGUiLCJoYXZlRXhwZWN0ZWRUeXBlcyIsInQiLCJnZXRJbnZhbGlkVHlwZU1lc3NhZ2UiLCJ2YWxpZGF0b3IiLCJzaW1wbGVDaGVja1JFIiwiZnVuY3Rpb25UeXBlQ2hlY2tSRSIsImlzU2FtZVR5cGUiLCJtZXNzYWdlIiwicmVjZWl2ZWRUeXBlIiwiaXNFeHBsaWNhYmxlIiwiaXNCb29sZWFuIiwic3R5bGVWYWx1ZSIsIkVYUExJQ0FCTEVfVFlQRVMiLCJoYW5kbGVFcnJvciIsImN1ciIsImVycm9yQ2FwdHVyZWQiLCJnbG9iYWxIYW5kbGVFcnJvciIsImludm9rZVdpdGhFcnJvckhhbmRsaW5nIiwiaGFuZGxlciIsIl9oYW5kbGVkIiwibG9nRXJyb3IiLCJpc1VzaW5nTWljcm9UYXNrIiwiY2FsbGJhY2tzIiwicGVuZGluZyIsImZsdXNoQ2FsbGJhY2tzIiwiY29waWVzIiwidGltZXJGdW5jIiwiUHJvbWlzZSIsInAiLCJyZXNvbHZlIiwiTXV0YXRpb25PYnNlcnZlciIsImNvdW50ZXIiLCJvYnNlcnZlciIsInRleHROb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGFyYWN0ZXJEYXRhIiwiY2IiLCJfcmVzb2x2ZSIsImluaXRQcm94eSIsImFsbG93ZWRHbG9iYWxzIiwid2Fybk5vblByZXNlbnQiLCJ3YXJuUmVzZXJ2ZWRQcmVmaXgiLCJoYXNQcm94eSIsIlByb3h5IiwiaXNCdWlsdEluTW9kaWZpZXIiLCJoYXNIYW5kbGVyIiwiaXNBbGxvd2VkIiwiJGRhdGEiLCJnZXRIYW5kbGVyIiwiaGFuZGxlcnMiLCJyZW5kZXIiLCJfd2l0aFN0cmlwcGVkIiwiX3JlbmRlclByb3h5Iiwic2Vlbk9iamVjdHMiLCJ0cmF2ZXJzZSIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJpc0Zyb3plbiIsImRlcElkIiwibWFyayIsIm1lYXN1cmUiLCJwZXJmIiwiY2xlYXJNYXJrcyIsImNsZWFyTWVhc3VyZXMiLCJzdGFydFRhZyIsImVuZFRhZyIsIm5vcm1hbGl6ZUV2ZW50Iiwib25jZSQkMSIsImNyZWF0ZUZuSW52b2tlciIsImZucyIsImludm9rZXIiLCJhcmd1bWVudHMkMSIsInVwZGF0ZUxpc3RlbmVycyIsIm9sZE9uIiwicmVtb3ZlJCQxIiwiY3JlYXRlT25jZUhhbmRsZXIiLCJvbGQiLCJwYXJhbXMiLCJtZXJnZVZOb2RlSG9vayIsImhvb2tLZXkiLCJvbGRIb29rIiwid3JhcHBlZEhvb2siLCJtZXJnZWQiLCJleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIiwiYXR0cnMiLCJhbHRLZXkiLCJrZXlJbkxvd2VyQ2FzZSIsImNoZWNrUHJvcCIsImhhc2giLCJwcmVzZXJ2ZSIsInNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVBcnJheUNoaWxkcmVuIiwiaXNUZXh0Tm9kZSIsIm5lc3RlZEluZGV4IiwiX2lzVkxpc3QiLCJpbml0UHJvdmlkZSIsIl9wcm92aWRlZCIsImluaXRJbmplY3Rpb25zIiwicmVzb2x2ZUluamVjdCIsInByb3ZpZGVLZXkiLCJwcm92aWRlRGVmYXVsdCIsInJlc29sdmVTbG90cyIsInNsb3RzIiwic2xvdCIsIm5hbWUkMSIsImlzV2hpdGVzcGFjZSIsIm5vcm1hbGl6ZVNjb3BlZFNsb3RzIiwibm9ybWFsU2xvdHMiLCJwcmV2U2xvdHMiLCJoYXNOb3JtYWxTbG90cyIsImlzU3RhYmxlIiwiJHN0YWJsZSIsIiRrZXkiLCJfbm9ybWFsaXplZCIsIiRoYXNOb3JtYWwiLCJub3JtYWxpemVTY29wZWRTbG90Iiwia2V5JDIiLCJwcm94eU5vcm1hbFNsb3QiLCJwcm94eSIsInJlbmRlckxpc3QiLCJuZXh0IiwiZG9uZSIsInJlbmRlclNsb3QiLCJmYWxsYmFja1JlbmRlciIsImJpbmRPYmplY3QiLCJzY29wZWRTbG90Rm4iLCIkc2NvcGVkU2xvdHMiLCJub2RlcyIsIiRzbG90cyIsIiRjcmVhdGVFbGVtZW50IiwicmVzb2x2ZUZpbHRlciIsImlzS2V5Tm90TWF0Y2giLCJleHBlY3QiLCJhY3R1YWwiLCJjaGVja0tleUNvZGVzIiwiZXZlbnRLZXlDb2RlIiwiYnVpbHRJbktleUNvZGUiLCJldmVudEtleU5hbWUiLCJidWlsdEluS2V5TmFtZSIsIm1hcHBlZEtleUNvZGUiLCJiaW5kT2JqZWN0UHJvcHMiLCJhc1Byb3AiLCJpc1N5bmMiLCJsb29wIiwiZG9tUHJvcHMiLCJjYW1lbGl6ZWRLZXkiLCJoeXBoZW5hdGVkS2V5IiwiJGV2ZW50IiwicmVuZGVyU3RhdGljIiwiaXNJbkZvciIsIl9zdGF0aWNUcmVlcyIsInN0YXRpY1JlbmRlckZucyIsIm1hcmtTdGF0aWMiLCJtYXJrT25jZSIsIm1hcmtTdGF0aWNOb2RlIiwiYmluZE9iamVjdExpc3RlbmVycyIsImV4aXN0aW5nIiwib3VycyIsInJlc29sdmVTY29wZWRTbG90cyIsImhhc0R5bmFtaWNLZXlzIiwiY29udGVudEhhc2hLZXkiLCJiaW5kRHluYW1pY0tleXMiLCJiYXNlT2JqIiwidmFsdWVzIiwicHJlcGVuZE1vZGlmaWVyIiwic3ltYm9sIiwiaW5zdGFsbFJlbmRlckhlbHBlcnMiLCJfbyIsIl9uIiwiX3MiLCJfbCIsIl90IiwiX3EiLCJfbSIsIl9mIiwiX2siLCJfYiIsIl92IiwiX2UiLCJfdSIsIl9nIiwiX2QiLCJfcCIsIkZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IiwidGhpcyQxIiwiY29udGV4dFZtIiwiX29yaWdpbmFsIiwiaXNDb21waWxlZCIsIl9jb21waWxlZCIsIm5lZWROb3JtYWxpemF0aW9uIiwiaW5qZWN0aW9ucyIsInNjb3BlZFNsb3RzIiwiX3Njb3BlSWQiLCJfYyIsImNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJtZXJnZVByb3BzIiwicmVuZGVyQ29udGV4dCIsImNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQiLCJ2bm9kZXMiLCJkZXZ0b29sc01ldGEiLCJjb21wb25lbnRWTm9kZUhvb2tzIiwiaW5pdCIsImh5ZHJhdGluZyIsIl9pc0Rlc3Ryb3llZCIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwicHJlcGF0Y2giLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIiwiYWN0aXZlSW5zdGFuY2UiLCIkbW91bnQiLCJvbGRWbm9kZSIsInVwZGF0ZUNoaWxkQ29tcG9uZW50IiwiaW5zZXJ0IiwiX2lzTW91bnRlZCIsImNhbGxIb29rIiwicXVldWVBY3RpdmF0ZWRDb21wb25lbnQiLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiJGRlc3Ryb3kiLCJkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCJob29rc1RvTWVyZ2UiLCJjcmVhdGVDb21wb25lbnQiLCJiYXNlQ3RvciIsInJlc29sdmVBc3luY0NvbXBvbmVudCIsImNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwibW9kZWwiLCJ0cmFuc2Zvcm1Nb2RlbCIsImZ1bmN0aW9uYWwiLCJuYXRpdmVPbiIsImFic3RyYWN0IiwiaW5zdGFsbENvbXBvbmVudEhvb2tzIiwiX2lzQ29tcG9uZW50IiwiX3BhcmVudFZub2RlIiwiaW5saW5lVGVtcGxhdGUiLCJ0b01lcmdlIiwiX21lcmdlZCIsIm1lcmdlSG9vayQxIiwiZjEiLCJmMiIsIlNJTVBMRV9OT1JNQUxJWkUiLCJBTFdBWVNfTk9STUFMSVpFIiwibm9ybWFsaXphdGlvblR5cGUiLCJhbHdheXNOb3JtYWxpemUiLCJfY3JlYXRlRWxlbWVudCIsIiR2bm9kZSIsInByZSIsImFwcGx5TlMiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsImZvcmNlIiwiY2xhc3MiLCJpbml0UmVuZGVyIiwiX3Zub2RlIiwicGFyZW50Vm5vZGUiLCJfcmVuZGVyQ2hpbGRyZW4iLCJwYXJlbnREYXRhIiwiaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50IiwiX3BhcmVudExpc3RlbmVycyIsImN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsInJlbmRlck1peGluIiwiVnVlIiwiJG5leHRUaWNrIiwiX3JlbmRlciIsInJlbmRlckVycm9yIiwiZW5zdXJlQ3RvciIsImNvbXAiLCJiYXNlIiwiX19lc01vZHVsZSIsInRvU3RyaW5nVGFnIiwiZmFjdG9yeSIsImVycm9yQ29tcCIsInJlc29sdmVkIiwib3duZXIiLCJvd25lcnMiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJzeW5jIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCIkZm9yY2VVcGRhdGUiLCJyZWplY3QiLCJyZWFzb24iLCJjb21wb25lbnQiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwiaW5pdEV2ZW50cyIsIl9ldmVudHMiLCJfaGFzSG9va0V2ZW50IiwidXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIiwicmVtb3ZlJDEiLCIkb2ZmIiwiX3RhcmdldCIsIm9uY2VIYW5kbGVyIiwib2xkTGlzdGVuZXJzIiwiZXZlbnRzTWl4aW4iLCJob29rUkUiLCIkb25jZSIsImkkMSIsImNicyIsIiRlbWl0IiwibG93ZXJDYXNlRXZlbnQiLCJzZXRBY3RpdmVJbnN0YW5jZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsImluaXRMaWZlY3ljbGUiLCIkY2hpbGRyZW4iLCIkcmVmcyIsIl93YXRjaGVyIiwiX2luYWN0aXZlIiwiX2RpcmVjdEluYWN0aXZlIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJsaWZlY3ljbGVNaXhpbiIsIl91cGRhdGUiLCJwcmV2RWwiLCIkZWwiLCJwcmV2Vm5vZGUiLCJyZXN0b3JlQWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwidGVhcmRvd24iLCJfd2F0Y2hlcnMiLCJfZGF0YSIsIm1vdW50Q29tcG9uZW50IiwidGVtcGxhdGUiLCJ1cGRhdGVDb21wb25lbnQiLCJfbmFtZSIsIl91aWQiLCJXYXRjaGVyIiwiYmVmb3JlIiwicmVuZGVyQ2hpbGRyZW4iLCJuZXdTY29wZWRTbG90cyIsIm9sZFNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY1Njb3BlZFNsb3QiLCJuZWVkc0ZvcmNlVXBkYXRlIiwiJGF0dHJzIiwiJGxpc3RlbmVycyIsInByb3BLZXlzIiwiX3Byb3BLZXlzIiwiaXNJbkluYWN0aXZlVHJlZSIsImRpcmVjdCIsImoiLCJNQVhfVVBEQVRFX0NPVU5UIiwiYWN0aXZhdGVkQ2hpbGRyZW4iLCJjaXJjdWxhciIsIndhaXRpbmciLCJmbHVzaGluZyIsInJlc2V0U2NoZWR1bGVyU3RhdGUiLCJjdXJyZW50Rmx1c2hUaW1lc3RhbXAiLCJnZXROb3ciLCJub3ciLCJ0aW1lU3RhbXAiLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsInVzZXIiLCJleHByZXNzaW9uIiwiYWN0aXZhdGVkUXVldWUiLCJ1cGRhdGVkUXVldWUiLCJjYWxsQWN0aXZhdGVkSG9va3MiLCJjYWxsVXBkYXRlZEhvb2tzIiwicXVldWVXYXRjaGVyIiwidWlkJDIiLCJleHBPckZuIiwiaXNSZW5kZXJXYXRjaGVyIiwiZGVlcCIsImxhenkiLCJkaXJ0eSIsImRlcHMiLCJuZXdEZXBzIiwiZGVwSWRzIiwibmV3RGVwSWRzIiwiY2xlYW51cERlcHMiLCJ0bXAiLCJvbGRWYWx1ZSIsImV2YWx1YXRlIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwic291cmNlS2V5IiwicHJveHlHZXR0ZXIiLCJwcm94eVNldHRlciIsImluaXRTdGF0ZSIsImluaXRQcm9wcyIsImluaXRNZXRob2RzIiwiaW5pdERhdGEiLCJpbml0Q29tcHV0ZWQiLCJpbml0V2F0Y2giLCJwcm9wc09wdGlvbnMiLCJpc1Jvb3QiLCJnZXREYXRhIiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsIndhdGNoZXJzIiwiX2NvbXB1dGVkV2F0Y2hlcnMiLCJpc1NTUiIsInVzZXJEZWYiLCJkZWZpbmVDb21wdXRlZCIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCJjcmVhdGVHZXR0ZXJJbnZva2VyIiwiY29tcHV0ZWRHZXR0ZXIiLCJjcmVhdGVXYXRjaGVyIiwiJHdhdGNoIiwic3RhdGVNaXhpbiIsImRhdGFEZWYiLCJwcm9wc0RlZiIsIiRzZXQiLCIkZGVsZXRlIiwiaW1tZWRpYXRlIiwidW53YXRjaEZuIiwidWlkJDMiLCJpbml0TWl4aW4iLCJfaW5pdCIsImluaXRJbnRlcm5hbENvbXBvbmVudCIsIl9zZWxmIiwidm5vZGVDb21wb25lbnRPcHRpb25zIiwic3VwZXIiLCJzdXBlck9wdGlvbnMiLCJjYWNoZWRTdXBlck9wdGlvbnMiLCJtb2RpZmllZE9wdGlvbnMiLCJyZXNvbHZlTW9kaWZpZWRPcHRpb25zIiwiZXh0ZW5kT3B0aW9ucyIsImxhdGVzdCIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJpbml0VXNlIiwidXNlIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwidW5zaGlmdCIsImluc3RhbGwiLCJpbml0TWl4aW4kMSIsIm1peGluIiwiaW5pdEV4dGVuZCIsIlN1cGVyIiwiU3VwZXJJZCIsImNhY2hlZEN0b3JzIiwiX0N0b3IiLCJTdWIiLCJWdWVDb21wb25lbnQiLCJpbml0UHJvcHMkMSIsImluaXRDb21wdXRlZCQxIiwiQ29tcCIsImluaXRBc3NldFJlZ2lzdGVycyIsImRlZmluaXRpb24iLCJnZXRDb21wb25lbnROYW1lIiwicHJ1bmVDYWNoZSIsImtlZXBBbGl2ZUluc3RhbmNlIiwiZW50cnkiLCJwcnVuZUNhY2hlRW50cnkiLCJjdXJyZW50IiwicGF0dGVyblR5cGVzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJjYWNoZVZOb2RlIiwidm5vZGVUb0NhY2hlIiwia2V5VG9DYWNoZSIsImRlc3Ryb3llZCIsInVwZGF0ZWQiLCJyZWYkMSIsImJ1aWx0SW5Db21wb25lbnRzIiwiaW5pdEdsb2JhbEFQSSIsImNvbmZpZ0RlZiIsInV0aWwiLCJkZWZpbmVSZWFjdGl2ZSIsImRlbGV0ZSIsIm9ic2VydmFibGUiLCJzc3JDb250ZXh0IiwiYWNjZXB0VmFsdWUiLCJhdHRyIiwiaXNFbnVtZXJhdGVkQXR0ciIsImlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSIsImNvbnZlcnRFbnVtZXJhdGVkVmFsdWUiLCJpc0ZhbHN5QXR0clZhbHVlIiwiaXNCb29sZWFuQXR0ciIsInhsaW5rTlMiLCJpc1hsaW5rIiwiZ2V0WGxpbmtQcm9wIiwiZ2VuQ2xhc3NGb3JWbm9kZSIsImNoaWxkTm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwicmVuZGVyQ2xhc3MiLCJzdGF0aWNDbGFzcyIsImR5bmFtaWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJzdHJpbmdpZmllZCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImlzVGV4dElucHV0VHlwZSIsInF1ZXJ5Iiwic2VsZWN0ZWQiLCJxdWVyeVNlbGVjdG9yIiwiY3JlYXRlRWxlbWVudCQxIiwibXVsdGlwbGUiLCJzZXRBdHRyaWJ1dGUiLCJjcmVhdGVFbGVtZW50TlMiLCJuYW1lc3BhY2UiLCJjcmVhdGVDb21tZW50IiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJzZXRUZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJzY29wZUlkIiwibm9kZU9wcyIsInJlZ2lzdGVyUmVmIiwiaXNSZW1vdmFsIiwicmVmcyIsInJlZkluRm9yIiwiZW1wdHlOb2RlIiwic2FtZVZub2RlIiwic2FtZUlucHV0VHlwZSIsInR5cGVBIiwidHlwZUIiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwiY3JlYXRlUGF0Y2hGdW5jdGlvbiIsImJhY2tlbmQiLCJlbXB0eU5vZGVBdCIsImNyZWF0ZVJtQ2IiLCJjaGlsZEVsbSIsInJlbW92ZU5vZGUiLCJpc1Vua25vd25FbGVtZW50JCQxIiwiaW5WUHJlIiwiY3JlYXRpbmdFbG1JblZQcmUiLCJjcmVhdGVFbG0iLCJpbnNlcnRlZFZub2RlUXVldWUiLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJuZXN0ZWQiLCJvd25lckFycmF5Iiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJyZWFjdGl2YXRlQ29tcG9uZW50IiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwiaW5uZXJOb2RlIiwidHJhbnNpdGlvbiIsImFjdGl2YXRlIiwicmVmJCQxIiwiY2hlY2tEdXBsaWNhdGVLZXlzIiwiYW5jZXN0b3IiLCJhZGRWbm9kZXMiLCJzdGFydElkeCIsImludm9rZURlc3Ryb3lIb29rIiwicmVtb3ZlVm5vZGVzIiwiY2giLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwicm0iLCJ1cGRhdGVDaGlsZHJlbiIsIm9sZENoIiwibmV3Q2giLCJyZW1vdmVPbmx5Iiwib2xkU3RhcnRJZHgiLCJuZXdTdGFydElkeCIsIm9sZEVuZElkeCIsIm9sZFN0YXJ0Vm5vZGUiLCJvbGRFbmRWbm9kZSIsIm5ld0VuZElkeCIsIm5ld1N0YXJ0Vm5vZGUiLCJuZXdFbmRWbm9kZSIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJ2bm9kZVRvTW92ZSIsImNhbk1vdmUiLCJwYXRjaFZub2RlIiwiZmluZElkeEluT2xkIiwic2VlbktleXMiLCJlbmQiLCJoeWRyYXRlIiwicG9zdHBhdGNoIiwiaW52b2tlSW5zZXJ0SG9vayIsImluaXRpYWwiLCJoeWRyYXRpb25CYWlsZWQiLCJpc1JlbmRlcmVkTW9kdWxlIiwiYXNzZXJ0Tm9kZU1hdGNoIiwiaGFzQ2hpbGROb2RlcyIsImlubmVySFRNTCIsImNoaWxkcmVuTWF0Y2giLCJmaXJzdENoaWxkIiwiY2hpbGROb2RlcyIsImZ1bGxJbnZva2UiLCJwYXRjaCIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsIm9sZEVsbSIsIl9sZWF2ZUNiIiwicGF0Y2hhYmxlIiwiaSQyIiwidXBkYXRlRGlyZWN0aXZlcyIsInVuYmluZERpcmVjdGl2ZXMiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZERpciIsImNhbGxIb29rJDEiLCJvbGRBcmciLCJhcmciLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwiaW5oZXJpdEF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJpc0luUHJlIiwiYmFzZVNldEF0dHIiLCJzZXRBdHRyaWJ1dGVOUyIsIl9faWVwaCIsImJsb2NrZXIiLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJ0cmFuc2l0aW9uQ2xhc3MiLCJfdHJhbnNpdGlvbkNsYXNzZXMiLCJfcHJldkNsYXNzIiwia2xhc3MiLCJSQU5HRV9UT0tFTiIsIkNIRUNLQk9YX1JBRElPX1RPS0VOIiwibm9ybWFsaXplRXZlbnRzIiwiY2hhbmdlIiwidGFyZ2V0JDEiLCJjcmVhdGVPbmNlSGFuZGxlciQxIiwicmVtb3ZlJDIiLCJ1c2VNaWNyb3Rhc2tGaXgiLCJhZGQkMSIsImF0dGFjaGVkVGltZXN0YW1wIiwiX3dyYXBwZXIiLCJjdXJyZW50VGFyZ2V0IiwidXBkYXRlRE9NTGlzdGVuZXJzIiwiZXZlbnRzIiwic3ZnQ29udGFpbmVyIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsIl92YWx1ZSIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiY2hlY2tWYWwiLCJjb21wb3NpbmciLCJpc05vdEluRm9jdXNBbmREaXJ0eSIsImlzRGlydHlXaXRoTW9kaWZpZXJzIiwibm90SW5Gb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJfdk1vZGlmaWVycyIsIm51bWJlciIsInBhcnNlU3R5bGVUZXh0IiwibGlzdERlbGltaXRlciIsInByb3BlcnR5RGVsaW1pdGVyIiwibm9ybWFsaXplU3R5bGVEYXRhIiwibm9ybWFsaXplU3R5bGVCaW5kaW5nIiwic3RhdGljU3R5bGUiLCJiaW5kaW5nU3R5bGUiLCJnZXRTdHlsZSIsImNoZWNrQ2hpbGQiLCJzdHlsZURhdGEiLCJjc3NWYXJSRSIsImltcG9ydGFudFJFIiwic2V0UHJvcCIsInNldFByb3BlcnR5Iiwibm9ybWFsaXplZE5hbWUiLCJub3JtYWxpemUiLCJ2ZW5kb3JOYW1lcyIsImVtcHR5U3R5bGUiLCJjYXBOYW1lIiwidXBkYXRlU3R5bGUiLCJvbGRTdGF0aWNTdHlsZSIsIm9sZFN0eWxlQmluZGluZyIsIm5vcm1hbGl6ZWRTdHlsZSIsIm9sZFN0eWxlIiwibmV3U3R5bGUiLCJ3aGl0ZXNwYWNlUkUiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwidGFyIiwicmVzb2x2ZVRyYW5zaXRpb24iLCJhdXRvQ3NzVHJhbnNpdGlvbiIsImVudGVyQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwibGVhdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJoYXNUcmFuc2l0aW9uIiwiVFJBTlNJVElPTiIsIkFOSU1BVElPTiIsInRyYW5zaXRpb25Qcm9wIiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiYW5pbWF0aW9uUHJvcCIsImFuaW1hdGlvbkVuZEV2ZW50Iiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsInJhZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsInRyYW5zaXRpb25DbGFzc2VzIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJwcm9wQ291bnQiLCJlbmRlZCIsIm9uRW5kIiwidHJhbnNmb3JtUkUiLCJzdHlsZXMiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJkdXJhdGlvbnMiLCJ0b01zIiwicyIsImVudGVyIiwidG9nZ2xlRGlzcGxheSIsImNhbmNlbGxlZCIsIl9lbnRlckNiIiwiYXBwZWFyQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJiZWZvcmVFbnRlciIsImFmdGVyRW50ZXIiLCJlbnRlckNhbmNlbGxlZCIsImJlZm9yZUFwcGVhciIsImFwcGVhciIsImFmdGVyQXBwZWFyIiwiYXBwZWFyQ2FuY2VsbGVkIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJiZWZvcmVFbnRlckhvb2siLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImVudGVyQ2FuY2VsbGVkSG9vayIsImV4cGxpY2l0RW50ZXJEdXJhdGlvbiIsImNoZWNrRHVyYXRpb24iLCJleHBlY3RzQ1NTIiwidXNlcldhbnRzQ29udHJvbCIsImdldEhvb2tBcmd1bWVudHNMZW5ndGgiLCJzaG93IiwicGVuZGluZ05vZGUiLCJfcGVuZGluZyIsImlzVmFsaWREdXJhdGlvbiIsImxlYXZlIiwiYmVmb3JlTGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwicGVyZm9ybUxlYXZlIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBsYXRmb3JtTW9kdWxlcyIsInZtb2RlbCIsInRyaWdnZXIiLCJkaXJlY3RpdmUiLCJfdk9wdGlvbnMiLCJzZXRTZWxlY3RlZCIsImdldFZhbHVlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsIm8iLCJuZWVkUmVzZXQiLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwiYWN0dWFsbHlTZXRTZWxlY3RlZCIsImlzTXVsdGlwbGUiLCJzZWxlY3RlZEluZGV4IiwibG9jYXRlTm9kZSIsInRyYW5zaXRpb24kJDEiLCJvcmlnaW5hbERpc3BsYXkiLCJfX3ZPcmlnaW5hbERpc3BsYXkiLCJ1bmJpbmQiLCJwbGF0Zm9ybURpcmVjdGl2ZXMiLCJ0cmFuc2l0aW9uUHJvcHMiLCJtb2RlIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJwbGFjZWhvbGRlciIsImgiLCJyYXdDaGlsZCIsImhhc1BhcmVudFRyYW5zaXRpb24iLCJpc1NhbWVDaGlsZCIsIm9sZENoaWxkIiwiaXNOb3RUZXh0Tm9kZSIsImlzVlNob3dEaXJlY3RpdmUiLCJUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsImRlbGF5ZWRMZWF2ZSIsIm1vdmVDbGFzcyIsIlRyYW5zaXRpb25Hcm91cCIsImJlZm9yZU1vdW50Iiwia2VwdCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJyZW1vdmVkIiwiYyQxIiwicG9zIiwiaGFzTW92ZSIsImNhbGxQZW5kaW5nQ2JzIiwicmVjb3JkUG9zaXRpb24iLCJhcHBseVRyYW5zbGF0aW9uIiwiX3JlZmxvdyIsIm9mZnNldEhlaWdodCIsIldlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsIl9tb3ZlQ2IiLCJwcm9wZXJ0eU5hbWUiLCJfaGFzTW92ZSIsIm5ld1BvcyIsIm9sZFBvcyIsInBsYXRmb3JtQ29tcG9uZW50cyIsIl9fd2VicGFja19yZXF1aXJlX18iLCIkaXRlckNyZWF0ZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwic2V0VG9TdHJpbmdUYWciLCJWQUxVRVNfQlVHIiwiJGRlZmF1bHQiLCJoaWRlIiwiSXRlcmF0b3JzIiwiZW50cmllcyIsIiRleHBvcnQiLCJUT19TVFJJTkciLCJhbk9iamVjdCIsInJlIiwiTyIsImV4ZWNDYWxsZWQiLCJLRVkiLCJkZWZpbmVkIiwiU1lNQk9MIiwicmVkZWZpbmUiLCJBUkciLCJpbnNwZWN0U291cmNlIiwiaWZyYW1lIiwiaWZyYW1lRG9jdW1lbnQiLCJjcmVhdGVEaWN0IiwiRW1wdHkiLCJVU0VfU1lNQk9MIiwiJGV4cG9ydHMiLCJJTkNMVURFUyIsImluY2x1ZGVzIiwic2VhcmNoU3RyaW5nIiwib2JqZWN0IiwiQ29uc3RydWN0b3IiLCJyZTIiLCJuYXRpdmVFeGVjIiwicGF0Y2hlZEV4ZWMiLCJyZUNvcHkiLCJuYXRpdmVSZXBsYWNlIiwiY29weXJpZ2h0IiwiUFJPVE9UWVBFIiwib3duIiwib3V0IiwiZXhwIiwiQSIsIksiLCJCIiwiUyIsIiRhc3NpZ24iLCJQIiwiYUZ1bmN0aW9uIiwiQXJyYXlQcm90byIsIlVOU0NPUEFCTEVTIiwiJHJlcGxhY2UiLCJyeCIsInJlc3VsdHMiLCJjYXB0dXJlcyIsInJlcGxhY2VtZW50IiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJuYW1lZENhcHR1cmVzIiwic3ltYm9scyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwicHJvdG8iLCJmb3JjZWQiLCJleGVjIiwiZ2V0Q29uc29sZSIsInJlZ2V4IiwicGFyZW50RWxlbWVudCIsImluc2VydE5vZGVBdCIsImZhdGhlck5vZGUiLCJwb3NpdGlvbiIsInJlZk5vZGUiLCJnIiwiYWRkVG9VbnNjb3BhYmxlcyIsIlNUQVJUU19XSVRIIiwic3RhcnRzV2l0aCIsIiRzdGFydHNXaXRoIiwidGhhdCIsInNjcmlwdHMiLCJzZXRQdWJsaWNQYXRoX2kiLCJfYXJyIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiYnVpbGRBdHRyaWJ1dGUiLCJwcm9wTmFtZSIsImNvbXB1dGVWbUluZGV4IiwiZWx0IiwiY29tcHV0ZUluZGV4ZXMiLCJpc1RyYW5zaXRpb24iLCJmb290ZXJPZmZzZXQiLCJlbG1Gcm9tTm9kZXMiLCJmb290ZXJJbmRleCIsInJhd0luZGV4ZXMiLCJpbmQiLCJldnROYW1lIiwiZXZ0RGF0YSIsImRlbGVnYXRlQW5kRW1pdCIsInJlYWxMaXN0IiwiaXNUcmFuc2l0aW9uTmFtZSIsImdldFNsb3QiLCJzY29wZWRTbG90IiwiY29tcHV0ZUNoaWxkcmVuQW5kT2Zmc2V0cyIsImhlYWRlck9mZnNldCIsImhlYWRlciIsImZvb3RlciIsImdldENvbXBvbmVudEF0dHJpYnV0ZXMiLCJjb21wb25lbnREYXRhIiwiYXR0cmlidXRlcyIsInJlZHVjZSIsImNvbXBvbmVudERhdGFBdHRycyIsImV2ZW50c0xpc3RlbmVkIiwiZXZlbnRzVG9FbWl0IiwicmVhZG9ubHlQcm9wZXJ0aWVzIiwiZHJhZ2dpbmdFbGVtZW50Iiwibm9UcmFuc2l0aW9uT25EcmFnIiwibW92ZSIsImRyYWdnYWJsZUNvbXBvbmVudCIsInRyYW5zaXRpb25Nb2RlIiwibm9uZUZ1bmN0aW9uYWxDb21wb25lbnRNb2RlIiwiZ2V0VGFnIiwiZ2V0SXNGdW5jdGlvbmFsIiwib3B0aW9uc0FkZGVkIiwib25EcmFnTW92ZSIsIl9zb3J0YWJsZSIsInJvb3RDb250YWluZXIiLCJiZWZvcmVEZXN0cm95IiwibmV3T3B0aW9uVmFsdWUiLCJ1cGRhdGVPcHRpb25zIiwiZ2V0Q2hpbGRyZW5Ob2RlcyIsInJhd05vZGVzIiwiX3RoaXM0IiwidmlzaWJsZUluZGV4ZXMiLCJnZXRVbmRlcmx5aW5nVm0iLCJodG1sRWx0IiwiZ2V0VW5kZXJseWluZ1BvdGVuY2lhbERyYWdnYWJsZUNvbXBvbmVudCIsInZ1ZSIsImVtaXRDaGFuZ2VzIiwiX3RoaXM1IiwiYWx0ZXJMaXN0Iiwib25MaXN0IiwibmV3TGlzdCIsInNwbGljZUxpc3QiLCJ1cGRhdGVQb3NpdGlvbiIsImdldFJlbGF0ZWRDb250ZXh0RnJvbU1vdmVFdmVudCIsImRlc3RpbmF0aW9uIiwiZ2V0Vm1JbmRleCIsImRvbUluZGV4IiwiaW5kZXhlcyIsIm51bWJlckluZGV4ZXMiLCJnZXRDb21wb25lbnQiLCJyZXNldFRyYW5zaXRpb25EYXRhIiwidHJhbnNpdGlvbkNvbnRhaW5lciIsIm9uRHJhZ1N0YXJ0IiwiX3VuZGVybHlpbmdfdm1fIiwib25EcmFnQWRkIiwiYWRkZWQiLCJvbkRyYWdSZW1vdmUiLCJvbkRyYWdVcGRhdGUiLCJ1cGRhdGVQcm9wZXJ0eSIsImNvbXB1dGVGdXR1cmVJbmRleCIsInJlbGF0ZWRDb250ZXh0IiwiZG9tQ2hpbGRyZW4iLCJjdXJyZW50RE9NSW5kZXgiLCJkcmFnZ2VkSW5MaXN0IiwiZHJhZ2dlZENvbnRleHQiLCJmdXR1cmVJbmRleCIsInNlbmRFdnQiLCJvbkRyYWdFbmQiLCJNYWluIl0sIm1hcHBpbmdzIjoiO1FBQUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7OztRQUdBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwwQ0FBMEMsZ0NBQWdDO1FBQzFFO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0Esd0RBQXdELGtCQUFrQjtRQUMxRTtRQUNBLGlEQUFpRCxjQUFjO1FBQy9EOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSx5Q0FBeUMsaUNBQWlDO1FBQzFFLGdIQUFnSCxtQkFBbUIsRUFBRTtRQUNySTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDJCQUEyQiwwQkFBMEIsRUFBRTtRQUN2RCxpQ0FBaUMsZUFBZTtRQUNoRDtRQUNBO1FBQ0E7O1FBRUE7UUFDQSxzREFBc0QsK0RBQStEOztRQUVySDtRQUNBOzs7UUFHQTtRQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6QkE7QUFFQTtFQUNBQSxXQURBO0VBRUFDLElBRkEsa0JBRUE7SUFDQTtNQUNBQyxh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QTtBQUNBOzs7QUFFQW5MLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjRnRSxDQUFqQixDOzs7Ozs7Ozs7Ozs7QUNuQkE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7QUNBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQW1GO0FBQzNCO0FBQ0w7QUFDZTs7O0FBR2xFO0FBQzZGO0FBQzdGLGdCQUFnQiwyR0FBVTtBQUMxQixFQUFFLDBFQUFNO0FBQ1IsRUFBRSwrRUFBTTtBQUNSLEVBQUUsd0ZBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxJQUFJLEtBQVUsRUFBRSxZQWlCZjtBQUNEO0FBQ2UsZ0Y7Ozs7Ozs7Ozs7OztBQ3ZDZjtBQUFBO0FBQUEsd0NBQTBLLENBQWdCLHdPQUFHLEVBQUMsQzs7Ozs7Ozs7Ozs7O0FDQTlMO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7OztBQ0FBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQSxJQUFJM3FCLDJDQUFKLENBQVE7RUFDSm5xQyxFQUFFLEVBQUUsT0FEQTtFQUVKZzlCLE1BQU0sRUFBRSxnQkFBQXN2QixDQUFDO0lBQUEsT0FBSUEsQ0FBQyxDQUFDMk8saUVBQUQsQ0FBTDtFQUFBO0FBRkwsQ0FBUixFIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9pbmRleC5qc1wiKTtcbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cIm1haW5cIj5cblxuICAgICAgPGRpdiBjbGFzcz1cInRvZG8tYXBwXCI+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNoZWxpay1pbnB1dFwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICDQmNC80Y8g0YfQtdC70LjQutCwOiA8aW5wdXQgdi1tb2RlbD1cIm5hbWVGaXJzdFwiPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAg0KTQsNC80LjQu9C40Y8g0YfQtdC70LjQutCwOiA8aW5wdXQgdi1tb2RlbD1cIm5hbWVTZWNvbmRcIj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICDQntGC0YfQtdGB0YLQstC+INGH0LXQu9C40LrQsDogPGlucHV0IHYtbW9kZWw9XCJuYW1lTGFzdFwiPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgINCS0L7Qt9GA0LDRgdGCINGH0LXQu9C40LrQsDogPGlucHV0IHYtbW9kZWw9XCJhZ2VcIj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8YnV0dG9uIHYtb246Y2xpY2s9XCJhZGROZXdcIj7QlNC+0LHQsNCy0LjRgtGMPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdi1vbjpjbGljaz1cImNsZWFySW5wdXRcIj7QntGH0LjRgdC40YLRjCDQstCy0L7QtDwvYnV0dG9uPlxuXG4gICAgICAgIDxkaXYgdi1pZj1cInNob3dGcm9tTG9jYWxcIiBjbGFzcz1cImNoZWxpay10YWJsZVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNoZWxpay1pbmZvX193cmFwXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNoZWxpay1pbmZvX190aXRsZVwiPtCX0LDQv9C+0LzQvdC10L3QvjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaGVsaWstaW5mb19fcHJvcGVydGllcy1saXN0XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaGVsaWstaW5mb19fcHJvcGVydGllcy1pbmRleFwiPtCd0L7QvNC10YA6PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaGVsaWstaW5mb19fcHJvcGVydGllcy1uYW1lXCI+0KTQmNCeOjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlbGlrLWluZm9fX3Byb3BlcnRpZXMtYWdlXCI+0JLQvtC30YDQsNGB0YI6PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaGVsaWstaW5mb19fcHJvcGVydGllcy1ibGFua1wiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkcmFnZ2FibGUgdi1tb2RlbD1cInBlb3BsZXNcIiBncm91cD1cInBlb3BsZXNcIiB0YWc9XCJkaXZcIiBnaG9zdC1jbGFzcz1cIm1vdmluZy1pdGVtXCIgY2xhc3M9XCJjaGVsaWstaW5mb19fbGlzdFwiPlxuICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgdi1mb3I9XCIoY2hlbGlrLGluZGV4KSBpbiBwZW9wbGVzXCIgOmtleT1cImNoZWxpay5uYW1lRmlyc3RcIiBjbGFzcz1cImNoZWxpay1pbmZvX19pdGVtXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlbGlrLWluZm9fX2l0ZW0taW5kZXhcIj57eyBpbmRleCArIDEgfX08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaGVsaWstaW5mb19faXRlbS1uYW1lXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1pZj1cImNoZWxpay5uYW1lRmlyc3RcIj57eyBjaGVsaWsubmFtZUZpcnN0IH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9XCJjaGVsaWsubmFtZVNlY29uZFwiPiB7eyBjaGVsaWsubmFtZVNlY29uZCB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPVwiY2hlbGlrLm5hbWVMYXN0XCI+IHt7IGNoZWxpay5uYW1lTGFzdCB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNoZWxpay1pbmZvX19pdGVtLWFnZVwiPjxzcGFuIHYtaWY9XCJjaGVsaWsuc2F2ZWRBZ2VcIj57eyBjaGVsaWsuc2F2ZWRBZ2UgfX08L3NwYW4+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlbGlrLWluZm9fX2l0ZW0tZGVsXCI+PGJ1dHRvbiB2LW9uOmNsaWNrPVwiZGVsZXRlQ2hlbGlrKGluZGV4KVwiPlg8L2J1dHRvbj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kcmFnZ2FibGU+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxidXR0b24gdi1vbjpjbGljaz1cImNsZWFyTG9jYWxcIj7QntGH0LjRgdGC0LjRgtGMPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICA8L2Rpdj5cblxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNyYz1cIi4vbWFpbi5zY3NzXCI+PC9zdHlsZT5cblxuPHNjcmlwdD5cbiAgICBpbXBvcnQgZHJhZ2dhYmxlIGZyb20gJ3Z1ZWRyYWdnYWJsZSdcblxuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgICAgbmFtZTogJ0FwcCcsXG4gICAgICAgIGRhdGEoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWVGaXJzdDogJycsXG4gICAgICAgICAgICAgICAgbmFtZVNlY29uZDogJycsXG4gICAgICAgICAgICAgICAgbmFtZUxhc3Q6ICcnLFxuICAgICAgICAgICAgICAgIGFnZTogJycsXG5cbiAgICAgICAgICAgICAgICBwZW9wbGVzOiBbXSxcbiAgICAgICAgICAgICAgICBzaG93RnJvbUxvY2FsOiBmYWxzZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2F0Y2g6IHtcbiAgICAgICAgfSxcbiAgICAgICAgbW91bnRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5hZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVkQWdlID0gbG9jYWxTdG9yYWdlLmFnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsb2NhbFN0b3JhZ2UucGVvcGxlc0xvY2FsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wZW9wbGVzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UucGVvcGxlc0xvY2FsKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dGcm9tTG9jYWwgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb21wb25lbnRzOiB7XG4gICAgICAgICAgICBkcmFnZ2FibGUsXG4gICAgICAgIH0sXG4gICAgICAgIG1ldGhvZHM6IHtcbiAgICAgICAgICAgIGFkZE5ldygpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBlb3BsZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWVGaXJzdDogdGhpcy5uYW1lRmlyc3QsXG4gICAgICAgICAgICAgICAgICAgIG5hbWVTZWNvbmQ6IHRoaXMubmFtZVNlY29uZCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZUxhc3Q6IHRoaXMubmFtZUxhc3QsXG4gICAgICAgICAgICAgICAgICAgIHNhdmVkQWdlOiB0aGlzLmFnZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Zyb21Mb2NhbCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucGVvcGxlc0xvY2FsID0gSlNPTi5zdHJpbmdpZnkodGhpcy5wZW9wbGVzKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhsb2NhbFN0b3JhZ2UucGVvcGxlc0xvY2FsKTtcbiAgICAgICAgICAgICAgICAvL0pTT04ucGFyc2UobG9jYWxTdG9yYWdlLnBlb3BsZXNMb2NhbClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGVhckxvY2FsKCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGVvcGxlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Zyb21Mb2NhbCA9IGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsZWFySW5wdXQoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lRmlyc3QgPSB0aGlzLm5hbWVTZWNvbmQgPSB0aGlzLm5hbWVMYXN0ID0gdGhpcy5hZ2UgPSAnJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWxldGVDaGVsaWsoaW5kZXgpIHsgICAgICBcblx0ICAgICAgICAgICAgdGhpcy5wZW9wbGVzLnNwbGljZShpbmRleCwgMSk7XG5cdCAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMucGVvcGxlcyk7XG5cdCAgICAgICAgICAgIGNvbnNvbGUubG9nKGluZGV4KTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucGVvcGxlc0xvY2FsID0gSlNPTi5zdHJpbmdpZnkodGhpcy5wZW9wbGVzKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wZW9wbGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJMb2NhbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlZCgpIHtcbiAgICAgICAgfVxuICAgIH1cbjwvc2NyaXB0PiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Tb3VyY2UrU2FucytQcm86d2dodEAyMDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJib2R5IHtcXG4gIGZvbnQtZmFtaWx5OiAnU291cmNlIFNhbnMgUHJvJywgc2Fucy1zZXJpZjtcXG59XFxuLm1haW4ge1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogYWxpY2VibHVlO1xcbn1cXG4udG9kby1hcHAge1xcbiAgbWF4LXdpZHRoOiA2MDBweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kOiAjZDdlNWZmO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgcGFkZGluZzogMzBweDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNhMGEwYTA7XFxufVxcbi5jaGVsaWstaW5wdXQgZGl2IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuICBtYXgtd2lkdGg6IDM4MHB4O1xcbiAgbWFyZ2luOiAwIGF1dG8gMTZweDtcXG59XFxuLmNoZWxpay1pbnB1dCBpbnB1dCB7XFxuICB3aWR0aDogLXdlYmtpdC1maWxsLWF2YWlsYWJsZTtcXG59XFxuLm1vdmluZy1pdGVtIHtcXG4gIG9wYWNpdHk6IDAuNTtcXG4gIGJhY2tncm91bmQ6ICMwMDA7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjNDI5OWUxO1xcbn1cXG4uY2hlbGlrLWluZm9fX3dyYXAge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBiYWNrZ3JvdW5kOiBhbGljZWJsdWU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjYTBhMGEwO1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIG1hcmdpbjogMzJweCAxMHB4O1xcbn1cXG4uY2hlbGlrLWluZm9fX3RpdGxlIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNhMGEwYTA7XFxuICBoZWlnaHQ6IDMycHg7XFxuICBsaW5lLWhlaWdodDogMzBweDtcXG59XFxuLmNoZWxpay1pbmZvX19wcm9wZXJ0aWVzLWxpc3Qge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogMzBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuLmNoZWxpay1pbmZvX19wcm9wZXJ0aWVzLWluZGV4IHtcXG4gIHdpZHRoOiAyMCU7XFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjYTBhMGEwO1xcbn1cXG4uY2hlbGlrLWluZm9fX3Byb3BlcnRpZXMtbmFtZSB7XFxuICB3aWR0aDogNDUlO1xcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2EwYTBhMDtcXG59XFxuLmNoZWxpay1pbmZvX19wcm9wZXJ0aWVzLWFnZSB7XFxuICB3aWR0aDogMjQlO1xcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2EwYTBhMDtcXG59XFxuLmNoZWxpay1pbmZvX19wcm9wZXJ0aWVzLWJsYW5rIHtcXG4gIHdpZHRoOiAxMSU7XFxufVxcbi5jaGVsaWstaW5mb19fbGlzdCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbn1cXG4uY2hlbGlrLWluZm9fX2l0ZW0ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYTBhMGEwO1xcbiAgaGVpZ2h0OiAzMnB4O1xcbn1cXG4uY2hlbGlrLWluZm9fX2l0ZW0taW5kZXgge1xcbiAgd2lkdGg6IDIwJTtcXG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNhMGEwYTA7XFxufVxcbi5jaGVsaWstaW5mb19faXRlbS1uYW1lIHtcXG4gIHdpZHRoOiA0NSU7XFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjYTBhMGEwO1xcbn1cXG4uY2hlbGlrLWluZm9fX2l0ZW0tYWdlIHtcXG4gIHdpZHRoOiAyNCU7XFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjYTBhMGEwO1xcbn1cXG4uY2hlbGlrLWluZm9fX2l0ZW0tZGVsIHtcXG4gIHdpZHRoOiAxMSU7XFxufVxcbmJ1dHRvbiB7XFxuICBtYXJnaW46IDBweCBhdXRvO1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsIi8qKiFcbiAqIFNvcnRhYmxlIDEuMTAuMlxuICogQGF1dGhvclx0UnViYVhhICAgPHRyYXNoQHJ1YmF4YS5vcmc+XG4gKiBAYXV0aG9yXHRvd2VubSAgICA8b3dlbjIzMzU1QGdtYWlsLmNvbT5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG5cbiAgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuXG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfVxufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbnZhciB2ZXJzaW9uID0gXCIxLjEwLjJcIjtcblxuZnVuY3Rpb24gdXNlckFnZW50KHBhdHRlcm4pIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IpIHtcbiAgICByZXR1cm4gISFcbiAgICAvKkBfX1BVUkVfXyovXG4gICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaChwYXR0ZXJuKTtcbiAgfVxufVxuXG52YXIgSUUxMU9yTGVzcyA9IHVzZXJBZ2VudCgvKD86VHJpZGVudC4qcnZbIDpdPzExXFwufG1zaWV8aWVtb2JpbGV8V2luZG93cyBQaG9uZSkvaSk7XG52YXIgRWRnZSA9IHVzZXJBZ2VudCgvRWRnZS9pKTtcbnZhciBGaXJlRm94ID0gdXNlckFnZW50KC9maXJlZm94L2kpO1xudmFyIFNhZmFyaSA9IHVzZXJBZ2VudCgvc2FmYXJpL2kpICYmICF1c2VyQWdlbnQoL2Nocm9tZS9pKSAmJiAhdXNlckFnZW50KC9hbmRyb2lkL2kpO1xudmFyIElPUyA9IHVzZXJBZ2VudCgvaVAoYWR8b2R8aG9uZSkvaSk7XG52YXIgQ2hyb21lRm9yQW5kcm9pZCA9IHVzZXJBZ2VudCgvY2hyb21lL2kpICYmIHVzZXJBZ2VudCgvYW5kcm9pZC9pKTtcblxudmFyIGNhcHR1cmVNb2RlID0ge1xuICBjYXB0dXJlOiBmYWxzZSxcbiAgcGFzc2l2ZTogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIG9uKGVsLCBldmVudCwgZm4pIHtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZm4sICFJRTExT3JMZXNzICYmIGNhcHR1cmVNb2RlKTtcbn1cblxuZnVuY3Rpb24gb2ZmKGVsLCBldmVudCwgZm4pIHtcbiAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgZm4sICFJRTExT3JMZXNzICYmIGNhcHR1cmVNb2RlKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyhcbi8qKkhUTUxFbGVtZW50Ki9cbmVsLFxuLyoqU3RyaW5nKi9cbnNlbGVjdG9yKSB7XG4gIGlmICghc2VsZWN0b3IpIHJldHVybjtcbiAgc2VsZWN0b3JbMF0gPT09ICc+JyAmJiAoc2VsZWN0b3IgPSBzZWxlY3Rvci5zdWJzdHJpbmcoMSkpO1xuXG4gIGlmIChlbCkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoZWwubWF0Y2hlcykge1xuICAgICAgICByZXR1cm4gZWwubWF0Y2hlcyhzZWxlY3Rvcik7XG4gICAgICB9IGVsc2UgaWYgKGVsLm1zTWF0Y2hlc1NlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBlbC5tc01hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9IGVsc2UgaWYgKGVsLndlYmtpdE1hdGNoZXNTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRQYXJlbnRPckhvc3QoZWwpIHtcbiAgcmV0dXJuIGVsLmhvc3QgJiYgZWwgIT09IGRvY3VtZW50ICYmIGVsLmhvc3Qubm9kZVR5cGUgPyBlbC5ob3N0IDogZWwucGFyZW50Tm9kZTtcbn1cblxuZnVuY3Rpb24gY2xvc2VzdChcbi8qKkhUTUxFbGVtZW50Ki9cbmVsLFxuLyoqU3RyaW5nKi9cbnNlbGVjdG9yLFxuLyoqSFRNTEVsZW1lbnQqL1xuY3R4LCBpbmNsdWRlQ1RYKSB7XG4gIGlmIChlbCkge1xuICAgIGN0eCA9IGN0eCB8fCBkb2N1bWVudDtcblxuICAgIGRvIHtcbiAgICAgIGlmIChzZWxlY3RvciAhPSBudWxsICYmIChzZWxlY3RvclswXSA9PT0gJz4nID8gZWwucGFyZW50Tm9kZSA9PT0gY3R4ICYmIG1hdGNoZXMoZWwsIHNlbGVjdG9yKSA6IG1hdGNoZXMoZWwsIHNlbGVjdG9yKSkgfHwgaW5jbHVkZUNUWCAmJiBlbCA9PT0gY3R4KSB7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsID09PSBjdHgpIGJyZWFrO1xuICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuICAgIH0gd2hpbGUgKGVsID0gZ2V0UGFyZW50T3JIb3N0KGVsKSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxudmFyIFJfU1BBQ0UgPSAvXFxzKy9nO1xuXG5mdW5jdGlvbiB0b2dnbGVDbGFzcyhlbCwgbmFtZSwgc3RhdGUpIHtcbiAgaWYgKGVsICYmIG5hbWUpIHtcbiAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgICBlbC5jbGFzc0xpc3Rbc3RhdGUgPyAnYWRkJyA6ICdyZW1vdmUnXShuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNsYXNzTmFtZSA9ICgnICcgKyBlbC5jbGFzc05hbWUgKyAnICcpLnJlcGxhY2UoUl9TUEFDRSwgJyAnKS5yZXBsYWNlKCcgJyArIG5hbWUgKyAnICcsICcgJyk7XG4gICAgICBlbC5jbGFzc05hbWUgPSAoY2xhc3NOYW1lICsgKHN0YXRlID8gJyAnICsgbmFtZSA6ICcnKSkucmVwbGFjZShSX1NQQUNFLCAnICcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjc3MoZWwsIHByb3AsIHZhbCkge1xuICB2YXIgc3R5bGUgPSBlbCAmJiBlbC5zdHlsZTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICBpZiAodmFsID09PSB2b2lkIDApIHtcbiAgICAgIGlmIChkb2N1bWVudC5kZWZhdWx0VmlldyAmJiBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgICAgIHZhbCA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWwsICcnKTtcbiAgICAgIH0gZWxzZSBpZiAoZWwuY3VycmVudFN0eWxlKSB7XG4gICAgICAgIHZhbCA9IGVsLmN1cnJlbnRTdHlsZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb3AgPT09IHZvaWQgMCA/IHZhbCA6IHZhbFtwcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCEocHJvcCBpbiBzdHlsZSkgJiYgcHJvcC5pbmRleE9mKCd3ZWJraXQnKSA9PT0gLTEpIHtcbiAgICAgICAgcHJvcCA9ICctd2Via2l0LScgKyBwcm9wO1xuICAgICAgfVxuXG4gICAgICBzdHlsZVtwcm9wXSA9IHZhbCArICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/ICcnIDogJ3B4Jyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1hdHJpeChlbCwgc2VsZk9ubHkpIHtcbiAgdmFyIGFwcGxpZWRUcmFuc2Zvcm1zID0gJyc7XG5cbiAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcHBsaWVkVHJhbnNmb3JtcyA9IGVsO1xuICB9IGVsc2Uge1xuICAgIGRvIHtcbiAgICAgIHZhciB0cmFuc2Zvcm0gPSBjc3MoZWwsICd0cmFuc2Zvcm0nKTtcblxuICAgICAgaWYgKHRyYW5zZm9ybSAmJiB0cmFuc2Zvcm0gIT09ICdub25lJykge1xuICAgICAgICBhcHBsaWVkVHJhbnNmb3JtcyA9IHRyYW5zZm9ybSArICcgJyArIGFwcGxpZWRUcmFuc2Zvcm1zO1xuICAgICAgfVxuICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuXG4gICAgfSB3aGlsZSAoIXNlbGZPbmx5ICYmIChlbCA9IGVsLnBhcmVudE5vZGUpKTtcbiAgfVxuXG4gIHZhciBtYXRyaXhGbiA9IHdpbmRvdy5ET01NYXRyaXggfHwgd2luZG93LldlYktpdENTU01hdHJpeCB8fCB3aW5kb3cuQ1NTTWF0cml4IHx8IHdpbmRvdy5NU0NTU01hdHJpeDtcbiAgLypqc2hpbnQgLVcwNTYgKi9cblxuICByZXR1cm4gbWF0cml4Rm4gJiYgbmV3IG1hdHJpeEZuKGFwcGxpZWRUcmFuc2Zvcm1zKTtcbn1cblxuZnVuY3Rpb24gZmluZChjdHgsIHRhZ05hbWUsIGl0ZXJhdG9yKSB7XG4gIGlmIChjdHgpIHtcbiAgICB2YXIgbGlzdCA9IGN0eC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lKSxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIG4gPSBsaXN0Lmxlbmd0aDtcblxuICAgIGlmIChpdGVyYXRvcikge1xuICAgICAgZm9yICg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaXRlcmF0b3IobGlzdFtpXSwgaSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cblxuICByZXR1cm4gW107XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKSB7XG4gIHZhciBzY3JvbGxpbmdFbGVtZW50ID0gZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudDtcblxuICBpZiAoc2Nyb2xsaW5nRWxlbWVudCkge1xuICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBcImJvdW5kaW5nIGNsaWVudCByZWN0XCIgb2YgZ2l2ZW4gZWxlbWVudFxyXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwgICAgICAgICAgICAgICAgICAgICAgIFRoZSBlbGVtZW50IHdob3NlIGJvdW5kaW5nQ2xpZW50UmVjdCBpcyB3YW50ZWRcclxuICogQHBhcmFtICB7W0Jvb2xlYW5dfSByZWxhdGl2ZVRvQ29udGFpbmluZ0Jsb2NrICBXaGV0aGVyIHRoZSByZWN0IHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgY29udGFpbmluZyBibG9jayBvZiAoaW5jbHVkaW5nKSB0aGUgY29udGFpbmVyXHJcbiAqIEBwYXJhbSAge1tCb29sZWFuXX0gcmVsYXRpdmVUb05vblN0YXRpY1BhcmVudCAgV2hldGhlciB0aGUgcmVjdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIHJlbGF0aXZlIHBhcmVudCBvZiAoaW5jbHVkaW5nKSB0aGUgY29udGFpZW5yXHJcbiAqIEBwYXJhbSAge1tCb29sZWFuXX0gdW5kb1NjYWxlICAgICAgICAgICAgICAgICAgV2hldGhlciB0aGUgY29udGFpbmVyJ3Mgc2NhbGUoKSBzaG91bGQgYmUgdW5kb25lXHJcbiAqIEBwYXJhbSAge1tIVE1MRWxlbWVudF19IGNvbnRhaW5lciAgICAgICAgICAgICAgVGhlIHBhcmVudCB0aGUgZWxlbWVudCB3aWxsIGJlIHBsYWNlZCBpblxyXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBib3VuZGluZ0NsaWVudFJlY3Qgb2YgZWwsIHdpdGggc3BlY2lmaWVkIGFkanVzdG1lbnRzXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFJlY3QoZWwsIHJlbGF0aXZlVG9Db250YWluaW5nQmxvY2ssIHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQsIHVuZG9TY2FsZSwgY29udGFpbmVyKSB7XG4gIGlmICghZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICYmIGVsICE9PSB3aW5kb3cpIHJldHVybjtcbiAgdmFyIGVsUmVjdCwgdG9wLCBsZWZ0LCBib3R0b20sIHJpZ2h0LCBoZWlnaHQsIHdpZHRoO1xuXG4gIGlmIChlbCAhPT0gd2luZG93ICYmIGVsICE9PSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkpIHtcbiAgICBlbFJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB0b3AgPSBlbFJlY3QudG9wO1xuICAgIGxlZnQgPSBlbFJlY3QubGVmdDtcbiAgICBib3R0b20gPSBlbFJlY3QuYm90dG9tO1xuICAgIHJpZ2h0ID0gZWxSZWN0LnJpZ2h0O1xuICAgIGhlaWdodCA9IGVsUmVjdC5oZWlnaHQ7XG4gICAgd2lkdGggPSBlbFJlY3Qud2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gMDtcbiAgICBsZWZ0ID0gMDtcbiAgICBib3R0b20gPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgcmlnaHQgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgfVxuXG4gIGlmICgocmVsYXRpdmVUb0NvbnRhaW5pbmdCbG9jayB8fCByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50KSAmJiBlbCAhPT0gd2luZG93KSB7XG4gICAgLy8gQWRqdXN0IGZvciB0cmFuc2xhdGUoKVxuICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lciB8fCBlbC5wYXJlbnROb2RlOyAvLyBzb2x2ZXMgIzExMjMgKHNlZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM3OTUzODA2LzYwODgzMTIpXG4gICAgLy8gTm90IG5lZWRlZCBvbiA8PSBJRTExXG5cbiAgICBpZiAoIUlFMTFPckxlc3MpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGNvbnRhaW5lciAmJiBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICYmIChjc3MoY29udGFpbmVyLCAndHJhbnNmb3JtJykgIT09ICdub25lJyB8fCByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50ICYmIGNzcyhjb250YWluZXIsICdwb3NpdGlvbicpICE9PSAnc3RhdGljJykpIHtcbiAgICAgICAgICB2YXIgY29udGFpbmVyUmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgLy8gU2V0IHJlbGF0aXZlIHRvIGVkZ2VzIG9mIHBhZGRpbmcgYm94IG9mIGNvbnRhaW5lclxuXG4gICAgICAgICAgdG9wIC09IGNvbnRhaW5lclJlY3QudG9wICsgcGFyc2VJbnQoY3NzKGNvbnRhaW5lciwgJ2JvcmRlci10b3Atd2lkdGgnKSk7XG4gICAgICAgICAgbGVmdCAtPSBjb250YWluZXJSZWN0LmxlZnQgKyBwYXJzZUludChjc3MoY29udGFpbmVyLCAnYm9yZGVyLWxlZnQtd2lkdGgnKSk7XG4gICAgICAgICAgYm90dG9tID0gdG9wICsgZWxSZWN0LmhlaWdodDtcbiAgICAgICAgICByaWdodCA9IGxlZnQgKyBlbFJlY3Qud2lkdGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuXG4gICAgICB9IHdoaWxlIChjb250YWluZXIgPSBjb250YWluZXIucGFyZW50Tm9kZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHVuZG9TY2FsZSAmJiBlbCAhPT0gd2luZG93KSB7XG4gICAgLy8gQWRqdXN0IGZvciBzY2FsZSgpXG4gICAgdmFyIGVsTWF0cml4ID0gbWF0cml4KGNvbnRhaW5lciB8fCBlbCksXG4gICAgICAgIHNjYWxlWCA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmEsXG4gICAgICAgIHNjYWxlWSA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmQ7XG5cbiAgICBpZiAoZWxNYXRyaXgpIHtcbiAgICAgIHRvcCAvPSBzY2FsZVk7XG4gICAgICBsZWZ0IC89IHNjYWxlWDtcbiAgICAgIHdpZHRoIC89IHNjYWxlWDtcbiAgICAgIGhlaWdodCAvPSBzY2FsZVk7XG4gICAgICBib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG4gICAgICByaWdodCA9IGxlZnQgKyB3aWR0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogdG9wLFxuICAgIGxlZnQ6IGxlZnQsXG4gICAgYm90dG9tOiBib3R0b20sXG4gICAgcmlnaHQ6IHJpZ2h0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xufVxuLyoqXHJcbiAqIENoZWNrcyBpZiBhIHNpZGUgb2YgYW4gZWxlbWVudCBpcyBzY3JvbGxlZCBwYXN0IGEgc2lkZSBvZiBpdHMgcGFyZW50c1xyXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gIGVsICAgICAgICAgICBUaGUgZWxlbWVudCB3aG8ncyBzaWRlIGJlaW5nIHNjcm9sbGVkIG91dCBvZiB2aWV3IGlzIGluIHF1ZXN0aW9uXHJcbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgZWxTaWRlICAgICAgIFNpZGUgb2YgdGhlIGVsZW1lbnQgaW4gcXVlc3Rpb24gKCd0b3AnLCAnbGVmdCcsICdyaWdodCcsICdib3R0b20nKVxyXG4gKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgIHBhcmVudFNpZGUgICBTaWRlIG9mIHRoZSBwYXJlbnQgaW4gcXVlc3Rpb24gKCd0b3AnLCAnbGVmdCcsICdyaWdodCcsICdib3R0b20nKVxyXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICAgICAgICAgICAgICBUaGUgcGFyZW50IHNjcm9sbCBlbGVtZW50IHRoYXQgdGhlIGVsJ3Mgc2lkZSBpcyBzY3JvbGxlZCBwYXN0LCBvciBudWxsIGlmIHRoZXJlIGlzIG5vIHN1Y2ggZWxlbWVudFxyXG4gKi9cblxuXG5mdW5jdGlvbiBpc1Njcm9sbGVkUGFzdChlbCwgZWxTaWRlLCBwYXJlbnRTaWRlKSB7XG4gIHZhciBwYXJlbnQgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbCwgdHJ1ZSksXG4gICAgICBlbFNpZGVWYWwgPSBnZXRSZWN0KGVsKVtlbFNpZGVdO1xuICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIHZhciBwYXJlbnRTaWRlVmFsID0gZ2V0UmVjdChwYXJlbnQpW3BhcmVudFNpZGVdLFxuICAgICAgICB2aXNpYmxlID0gdm9pZCAwO1xuXG4gICAgaWYgKHBhcmVudFNpZGUgPT09ICd0b3AnIHx8IHBhcmVudFNpZGUgPT09ICdsZWZ0Jykge1xuICAgICAgdmlzaWJsZSA9IGVsU2lkZVZhbCA+PSBwYXJlbnRTaWRlVmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2aXNpYmxlID0gZWxTaWRlVmFsIDw9IHBhcmVudFNpZGVWYWw7XG4gICAgfVxuXG4gICAgaWYgKCF2aXNpYmxlKSByZXR1cm4gcGFyZW50O1xuICAgIGlmIChwYXJlbnQgPT09IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKSkgYnJlYWs7XG4gICAgcGFyZW50ID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQocGFyZW50LCBmYWxzZSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcclxuICogR2V0cyBudGggY2hpbGQgb2YgZWwsIGlnbm9yaW5nIGhpZGRlbiBjaGlsZHJlbiwgc29ydGFibGUncyBlbGVtZW50cyAoZG9lcyBub3QgaWdub3JlIGNsb25lIGlmIGl0J3MgdmlzaWJsZSlcclxuICogYW5kIG5vbi1kcmFnZ2FibGUgZWxlbWVudHNcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgICAgIFRoZSBwYXJlbnQgZWxlbWVudFxyXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGNoaWxkTnVtICAgICAgVGhlIGluZGV4IG9mIHRoZSBjaGlsZFxyXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnMgICAgICAgUGFyZW50IFNvcnRhYmxlJ3Mgb3B0aW9uc1xyXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICAgICAgICAgVGhlIGNoaWxkIGF0IGluZGV4IGNoaWxkTnVtLCBvciBudWxsIGlmIG5vdCBmb3VuZFxyXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRDaGlsZChlbCwgY2hpbGROdW0sIG9wdGlvbnMpIHtcbiAgdmFyIGN1cnJlbnRDaGlsZCA9IDAsXG4gICAgICBpID0gMCxcbiAgICAgIGNoaWxkcmVuID0gZWwuY2hpbGRyZW47XG5cbiAgd2hpbGUgKGkgPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBpZiAoY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnICYmIGNoaWxkcmVuW2ldICE9PSBTb3J0YWJsZS5naG9zdCAmJiBjaGlsZHJlbltpXSAhPT0gU29ydGFibGUuZHJhZ2dlZCAmJiBjbG9zZXN0KGNoaWxkcmVuW2ldLCBvcHRpb25zLmRyYWdnYWJsZSwgZWwsIGZhbHNlKSkge1xuICAgICAgaWYgKGN1cnJlbnRDaGlsZCA9PT0gY2hpbGROdW0pIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuW2ldO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50Q2hpbGQrKztcbiAgICB9XG5cbiAgICBpKys7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxyXG4gKiBHZXRzIHRoZSBsYXN0IGNoaWxkIGluIHRoZSBlbCwgaWdub3JpbmcgZ2hvc3RFbCBvciBpbnZpc2libGUgZWxlbWVudHMgKGNsb25lcylcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgICAgIFBhcmVudCBlbGVtZW50XHJcbiAqIEBwYXJhbSAge3NlbGVjdG9yfSBzZWxlY3RvciAgICBBbnkgb3RoZXIgZWxlbWVudHMgdGhhdCBzaG91bGQgYmUgaWdub3JlZFxyXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICAgICAgICAgVGhlIGxhc3QgY2hpbGQsIGlnbm9yaW5nIGdob3N0RWxcclxuICovXG5cblxuZnVuY3Rpb24gbGFzdENoaWxkKGVsLCBzZWxlY3Rvcikge1xuICB2YXIgbGFzdCA9IGVsLmxhc3RFbGVtZW50Q2hpbGQ7XG5cbiAgd2hpbGUgKGxhc3QgJiYgKGxhc3QgPT09IFNvcnRhYmxlLmdob3N0IHx8IGNzcyhsYXN0LCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgc2VsZWN0b3IgJiYgIW1hdGNoZXMobGFzdCwgc2VsZWN0b3IpKSkge1xuICAgIGxhc3QgPSBsYXN0LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gIH1cblxuICByZXR1cm4gbGFzdCB8fCBudWxsO1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGluZGV4IG9mIGFuIGVsZW1lbnQgd2l0aGluIGl0cyBwYXJlbnQgZm9yIGEgc2VsZWN0ZWQgc2V0IG9mXHJcbiAqIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbFxyXG4gKiBAcGFyYW0gIHtzZWxlY3Rvcn0gc2VsZWN0b3JcclxuICogQHJldHVybiB7bnVtYmVyfVxyXG4gKi9cblxuXG5mdW5jdGlvbiBpbmRleChlbCwgc2VsZWN0b3IpIHtcbiAgdmFyIGluZGV4ID0gMDtcblxuICBpZiAoIWVsIHx8ICFlbC5wYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIC8qIGpzaGludCBib3NzOnRydWUgKi9cblxuXG4gIHdoaWxlIChlbCA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICBpZiAoZWwubm9kZU5hbWUudG9VcHBlckNhc2UoKSAhPT0gJ1RFTVBMQVRFJyAmJiBlbCAhPT0gU29ydGFibGUuY2xvbmUgJiYgKCFzZWxlY3RvciB8fCBtYXRjaGVzKGVsLCBzZWxlY3RvcikpKSB7XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmRleDtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBzY3JvbGwgb2Zmc2V0IG9mIHRoZSBnaXZlbiBlbGVtZW50LCBhZGRlZCB3aXRoIGFsbCB0aGUgc2Nyb2xsIG9mZnNldHMgb2YgcGFyZW50IGVsZW1lbnRzLlxyXG4gKiBUaGUgdmFsdWUgaXMgcmV0dXJuZWQgaW4gcmVhbCBwaXhlbHMuXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbFxyXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgICAgT2Zmc2V0cyBpbiB0aGUgZm9ybWF0IG9mIFtsZWZ0LCB0b3BdXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFJlbGF0aXZlU2Nyb2xsT2Zmc2V0KGVsKSB7XG4gIHZhciBvZmZzZXRMZWZ0ID0gMCxcbiAgICAgIG9mZnNldFRvcCA9IDAsXG4gICAgICB3aW5TY3JvbGxlciA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcblxuICBpZiAoZWwpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgZWxNYXRyaXggPSBtYXRyaXgoZWwpLFxuICAgICAgICAgIHNjYWxlWCA9IGVsTWF0cml4LmEsXG4gICAgICAgICAgc2NhbGVZID0gZWxNYXRyaXguZDtcbiAgICAgIG9mZnNldExlZnQgKz0gZWwuc2Nyb2xsTGVmdCAqIHNjYWxlWDtcbiAgICAgIG9mZnNldFRvcCArPSBlbC5zY3JvbGxUb3AgKiBzY2FsZVk7XG4gICAgfSB3aGlsZSAoZWwgIT09IHdpblNjcm9sbGVyICYmIChlbCA9IGVsLnBhcmVudE5vZGUpKTtcbiAgfVxuXG4gIHJldHVybiBbb2Zmc2V0TGVmdCwgb2Zmc2V0VG9wXTtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgb2JqZWN0IHdpdGhpbiB0aGUgZ2l2ZW4gYXJyYXlcclxuICogQHBhcmFtICB7QXJyYXl9IGFyciAgIEFycmF5IHRoYXQgbWF5IG9yIG1heSBub3QgaG9sZCB0aGUgb2JqZWN0XHJcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqICBBbiBvYmplY3QgdGhhdCBoYXMgYSBrZXktdmFsdWUgcGFpciB1bmlxdWUgdG8gYW5kIGlkZW50aWNhbCB0byBhIGtleS12YWx1ZSBwYWlyIGluIHRoZSBvYmplY3QgeW91IHdhbnQgdG8gZmluZFxyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgVGhlIGluZGV4IG9mIHRoZSBvYmplY3QgaW4gdGhlIGFycmF5LCBvciAtMVxyXG4gKi9cblxuXG5mdW5jdGlvbiBpbmRleE9mT2JqZWN0KGFyciwgb2JqKSB7XG4gIGZvciAodmFyIGkgaW4gYXJyKSB7XG4gICAgaWYgKCFhcnIuaGFzT3duUHJvcGVydHkoaSkpIGNvbnRpbnVlO1xuXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIG9ialtrZXldID09PSBhcnJbaV1ba2V5XSkgcmV0dXJuIE51bWJlcihpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsLCBpbmNsdWRlU2VsZikge1xuICAvLyBza2lwIHRvIHdpbmRvd1xuICBpZiAoIWVsIHx8ICFlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHJldHVybiBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7XG4gIHZhciBlbGVtID0gZWw7XG4gIHZhciBnb3RTZWxmID0gZmFsc2U7XG5cbiAgZG8ge1xuICAgIC8vIHdlIGRvbid0IG5lZWQgdG8gZ2V0IGVsZW0gY3NzIGlmIGl0IGlzbid0IGV2ZW4gb3ZlcmZsb3dpbmcgaW4gdGhlIGZpcnN0IHBsYWNlIChwZXJmb3JtYW5jZSlcbiAgICBpZiAoZWxlbS5jbGllbnRXaWR0aCA8IGVsZW0uc2Nyb2xsV2lkdGggfHwgZWxlbS5jbGllbnRIZWlnaHQgPCBlbGVtLnNjcm9sbEhlaWdodCkge1xuICAgICAgdmFyIGVsZW1DU1MgPSBjc3MoZWxlbSk7XG5cbiAgICAgIGlmIChlbGVtLmNsaWVudFdpZHRoIDwgZWxlbS5zY3JvbGxXaWR0aCAmJiAoZWxlbUNTUy5vdmVyZmxvd1ggPT0gJ2F1dG8nIHx8IGVsZW1DU1Mub3ZlcmZsb3dYID09ICdzY3JvbGwnKSB8fCBlbGVtLmNsaWVudEhlaWdodCA8IGVsZW0uc2Nyb2xsSGVpZ2h0ICYmIChlbGVtQ1NTLm92ZXJmbG93WSA9PSAnYXV0bycgfHwgZWxlbUNTUy5vdmVyZmxvd1kgPT0gJ3Njcm9sbCcpKSB7XG4gICAgICAgIGlmICghZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgfHwgZWxlbSA9PT0gZG9jdW1lbnQuYm9keSkgcmV0dXJuIGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgICAgICAgaWYgKGdvdFNlbGYgfHwgaW5jbHVkZVNlbGYpIHJldHVybiBlbGVtO1xuICAgICAgICBnb3RTZWxmID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuXG4gIH0gd2hpbGUgKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpO1xuXG4gIHJldHVybiBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZChkc3QsIHNyYykge1xuICBpZiAoZHN0ICYmIHNyYykge1xuICAgIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICAgIGlmIChzcmMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBkc3Rba2V5XSA9IHNyY1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkc3Q7XG59XG5cbmZ1bmN0aW9uIGlzUmVjdEVxdWFsKHJlY3QxLCByZWN0Mikge1xuICByZXR1cm4gTWF0aC5yb3VuZChyZWN0MS50b3ApID09PSBNYXRoLnJvdW5kKHJlY3QyLnRvcCkgJiYgTWF0aC5yb3VuZChyZWN0MS5sZWZ0KSA9PT0gTWF0aC5yb3VuZChyZWN0Mi5sZWZ0KSAmJiBNYXRoLnJvdW5kKHJlY3QxLmhlaWdodCkgPT09IE1hdGgucm91bmQocmVjdDIuaGVpZ2h0KSAmJiBNYXRoLnJvdW5kKHJlY3QxLndpZHRoKSA9PT0gTWF0aC5yb3VuZChyZWN0Mi53aWR0aCk7XG59XG5cbnZhciBfdGhyb3R0bGVUaW1lb3V0O1xuXG5mdW5jdGlvbiB0aHJvdHRsZShjYWxsYmFjaywgbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIV90aHJvdHRsZVRpbWVvdXQpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGNhbGxiYWNrLmNhbGwoX3RoaXMsIGFyZ3NbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2suYXBwbHkoX3RoaXMsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBfdGhyb3R0bGVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aHJvdHRsZVRpbWVvdXQgPSB2b2lkIDA7XG4gICAgICB9LCBtcyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjYW5jZWxUaHJvdHRsZSgpIHtcbiAgY2xlYXJUaW1lb3V0KF90aHJvdHRsZVRpbWVvdXQpO1xuICBfdGhyb3R0bGVUaW1lb3V0ID0gdm9pZCAwO1xufVxuXG5mdW5jdGlvbiBzY3JvbGxCeShlbCwgeCwgeSkge1xuICBlbC5zY3JvbGxMZWZ0ICs9IHg7XG4gIGVsLnNjcm9sbFRvcCArPSB5O1xufVxuXG5mdW5jdGlvbiBjbG9uZShlbCkge1xuICB2YXIgUG9seW1lciA9IHdpbmRvdy5Qb2x5bWVyO1xuICB2YXIgJCA9IHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvO1xuXG4gIGlmIChQb2x5bWVyICYmIFBvbHltZXIuZG9tKSB7XG4gICAgcmV0dXJuIFBvbHltZXIuZG9tKGVsKS5jbG9uZU5vZGUodHJ1ZSk7XG4gIH0gZWxzZSBpZiAoJCkge1xuICAgIHJldHVybiAkKGVsKS5jbG9uZSh0cnVlKVswXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZWwuY2xvbmVOb2RlKHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldFJlY3QoZWwsIHJlY3QpIHtcbiAgY3NzKGVsLCAncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcbiAgY3NzKGVsLCAndG9wJywgcmVjdC50b3ApO1xuICBjc3MoZWwsICdsZWZ0JywgcmVjdC5sZWZ0KTtcbiAgY3NzKGVsLCAnd2lkdGgnLCByZWN0LndpZHRoKTtcbiAgY3NzKGVsLCAnaGVpZ2h0JywgcmVjdC5oZWlnaHQpO1xufVxuXG5mdW5jdGlvbiB1bnNldFJlY3QoZWwpIHtcbiAgY3NzKGVsLCAncG9zaXRpb24nLCAnJyk7XG4gIGNzcyhlbCwgJ3RvcCcsICcnKTtcbiAgY3NzKGVsLCAnbGVmdCcsICcnKTtcbiAgY3NzKGVsLCAnd2lkdGgnLCAnJyk7XG4gIGNzcyhlbCwgJ2hlaWdodCcsICcnKTtcbn1cblxudmFyIGV4cGFuZG8gPSAnU29ydGFibGUnICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbmZ1bmN0aW9uIEFuaW1hdGlvblN0YXRlTWFuYWdlcigpIHtcbiAgdmFyIGFuaW1hdGlvblN0YXRlcyA9IFtdLFxuICAgICAgYW5pbWF0aW9uQ2FsbGJhY2tJZDtcbiAgcmV0dXJuIHtcbiAgICBjYXB0dXJlQW5pbWF0aW9uU3RhdGU6IGZ1bmN0aW9uIGNhcHR1cmVBbmltYXRpb25TdGF0ZSgpIHtcbiAgICAgIGFuaW1hdGlvblN0YXRlcyA9IFtdO1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYW5pbWF0aW9uKSByZXR1cm47XG4gICAgICB2YXIgY2hpbGRyZW4gPSBbXS5zbGljZS5jYWxsKHRoaXMuZWwuY2hpbGRyZW4pO1xuICAgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKGNzcyhjaGlsZCwgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnIHx8IGNoaWxkID09PSBTb3J0YWJsZS5naG9zdCkgcmV0dXJuO1xuICAgICAgICBhbmltYXRpb25TdGF0ZXMucHVzaCh7XG4gICAgICAgICAgdGFyZ2V0OiBjaGlsZCxcbiAgICAgICAgICByZWN0OiBnZXRSZWN0KGNoaWxkKVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgZnJvbVJlY3QgPSBfb2JqZWN0U3ByZWFkKHt9LCBhbmltYXRpb25TdGF0ZXNbYW5pbWF0aW9uU3RhdGVzLmxlbmd0aCAtIDFdLnJlY3QpOyAvLyBJZiBhbmltYXRpbmc6IGNvbXBlbnNhdGUgZm9yIGN1cnJlbnQgYW5pbWF0aW9uXG5cblxuICAgICAgICBpZiAoY2hpbGQudGhpc0FuaW1hdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgICAgdmFyIGNoaWxkTWF0cml4ID0gbWF0cml4KGNoaWxkLCB0cnVlKTtcblxuICAgICAgICAgIGlmIChjaGlsZE1hdHJpeCkge1xuICAgICAgICAgICAgZnJvbVJlY3QudG9wIC09IGNoaWxkTWF0cml4LmY7XG4gICAgICAgICAgICBmcm9tUmVjdC5sZWZ0IC09IGNoaWxkTWF0cml4LmU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQuZnJvbVJlY3QgPSBmcm9tUmVjdDtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYWRkQW5pbWF0aW9uU3RhdGU6IGZ1bmN0aW9uIGFkZEFuaW1hdGlvblN0YXRlKHN0YXRlKSB7XG4gICAgICBhbmltYXRpb25TdGF0ZXMucHVzaChzdGF0ZSk7XG4gICAgfSxcbiAgICByZW1vdmVBbmltYXRpb25TdGF0ZTogZnVuY3Rpb24gcmVtb3ZlQW5pbWF0aW9uU3RhdGUodGFyZ2V0KSB7XG4gICAgICBhbmltYXRpb25TdGF0ZXMuc3BsaWNlKGluZGV4T2ZPYmplY3QoYW5pbWF0aW9uU3RhdGVzLCB7XG4gICAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgICB9KSwgMSk7XG4gICAgfSxcbiAgICBhbmltYXRlQWxsOiBmdW5jdGlvbiBhbmltYXRlQWxsKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGFuaW1hdGlvbkNhbGxiYWNrSWQpO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBhbmltYXRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBhbmltYXRpb25UaW1lID0gMDtcbiAgICAgIGFuaW1hdGlvblN0YXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgdGltZSA9IDAsXG4gICAgICAgICAgICB0YXJnZXQgPSBzdGF0ZS50YXJnZXQsXG4gICAgICAgICAgICBmcm9tUmVjdCA9IHRhcmdldC5mcm9tUmVjdCxcbiAgICAgICAgICAgIHRvUmVjdCA9IGdldFJlY3QodGFyZ2V0KSxcbiAgICAgICAgICAgIHByZXZGcm9tUmVjdCA9IHRhcmdldC5wcmV2RnJvbVJlY3QsXG4gICAgICAgICAgICBwcmV2VG9SZWN0ID0gdGFyZ2V0LnByZXZUb1JlY3QsXG4gICAgICAgICAgICBhbmltYXRpbmdSZWN0ID0gc3RhdGUucmVjdCxcbiAgICAgICAgICAgIHRhcmdldE1hdHJpeCA9IG1hdHJpeCh0YXJnZXQsIHRydWUpO1xuXG4gICAgICAgIGlmICh0YXJnZXRNYXRyaXgpIHtcbiAgICAgICAgICAvLyBDb21wZW5zYXRlIGZvciBjdXJyZW50IGFuaW1hdGlvblxuICAgICAgICAgIHRvUmVjdC50b3AgLT0gdGFyZ2V0TWF0cml4LmY7XG4gICAgICAgICAgdG9SZWN0LmxlZnQgLT0gdGFyZ2V0TWF0cml4LmU7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXQudG9SZWN0ID0gdG9SZWN0O1xuXG4gICAgICAgIGlmICh0YXJnZXQudGhpc0FuaW1hdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgICAgLy8gQ291bGQgYWxzbyBjaGVjayBpZiBhbmltYXRpbmdSZWN0IGlzIGJldHdlZW4gZnJvbVJlY3QgYW5kIHRvUmVjdFxuICAgICAgICAgIGlmIChpc1JlY3RFcXVhbChwcmV2RnJvbVJlY3QsIHRvUmVjdCkgJiYgIWlzUmVjdEVxdWFsKGZyb21SZWN0LCB0b1JlY3QpICYmIC8vIE1ha2Ugc3VyZSBhbmltYXRpbmdSZWN0IGlzIG9uIGxpbmUgYmV0d2VlbiB0b1JlY3QgJiBmcm9tUmVjdFxuICAgICAgICAgIChhbmltYXRpbmdSZWN0LnRvcCAtIHRvUmVjdC50b3ApIC8gKGFuaW1hdGluZ1JlY3QubGVmdCAtIHRvUmVjdC5sZWZ0KSA9PT0gKGZyb21SZWN0LnRvcCAtIHRvUmVjdC50b3ApIC8gKGZyb21SZWN0LmxlZnQgLSB0b1JlY3QubGVmdCkpIHtcbiAgICAgICAgICAgIC8vIElmIHJldHVybmluZyB0byBzYW1lIHBsYWNlIGFzIHN0YXJ0ZWQgZnJvbSBhbmltYXRpb24gYW5kIG9uIHNhbWUgYXhpc1xuICAgICAgICAgICAgdGltZSA9IGNhbGN1bGF0ZVJlYWxUaW1lKGFuaW1hdGluZ1JlY3QsIHByZXZGcm9tUmVjdCwgcHJldlRvUmVjdCwgX3RoaXMub3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIGlmIGZyb21SZWN0ICE9IHRvUmVjdDogYW5pbWF0ZVxuXG5cbiAgICAgICAgaWYgKCFpc1JlY3RFcXVhbCh0b1JlY3QsIGZyb21SZWN0KSkge1xuICAgICAgICAgIHRhcmdldC5wcmV2RnJvbVJlY3QgPSBmcm9tUmVjdDtcbiAgICAgICAgICB0YXJnZXQucHJldlRvUmVjdCA9IHRvUmVjdDtcblxuICAgICAgICAgIGlmICghdGltZSkge1xuICAgICAgICAgICAgdGltZSA9IF90aGlzLm9wdGlvbnMuYW5pbWF0aW9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzLmFuaW1hdGUodGFyZ2V0LCBhbmltYXRpbmdSZWN0LCB0b1JlY3QsIHRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRpbWUpIHtcbiAgICAgICAgICBhbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIGFuaW1hdGlvblRpbWUgPSBNYXRoLm1heChhbmltYXRpb25UaW1lLCB0aW1lKTtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGFyZ2V0LmFuaW1hdGlvblJlc2V0VGltZXIpO1xuICAgICAgICAgIHRhcmdldC5hbmltYXRpb25SZXNldFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0YXJnZXQuYW5pbWF0aW9uVGltZSA9IDA7XG4gICAgICAgICAgICB0YXJnZXQucHJldkZyb21SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC5mcm9tUmVjdCA9IG51bGw7XG4gICAgICAgICAgICB0YXJnZXQucHJldlRvUmVjdCA9IG51bGw7XG4gICAgICAgICAgICB0YXJnZXQudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgICAgICB9LCB0aW1lKTtcbiAgICAgICAgICB0YXJnZXQudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gdGltZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjbGVhclRpbWVvdXQoYW5pbWF0aW9uQ2FsbGJhY2tJZCk7XG5cbiAgICAgIGlmICghYW5pbWF0aW5nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbmltYXRpb25DYWxsYmFja0lkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgICAgICAgfSwgYW5pbWF0aW9uVGltZSk7XG4gICAgICB9XG5cbiAgICAgIGFuaW1hdGlvblN0YXRlcyA9IFtdO1xuICAgIH0sXG4gICAgYW5pbWF0ZTogZnVuY3Rpb24gYW5pbWF0ZSh0YXJnZXQsIGN1cnJlbnRSZWN0LCB0b1JlY3QsIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoZHVyYXRpb24pIHtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zaXRpb24nLCAnJyk7XG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAnJyk7XG4gICAgICAgIHZhciBlbE1hdHJpeCA9IG1hdHJpeCh0aGlzLmVsKSxcbiAgICAgICAgICAgIHNjYWxlWCA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmEsXG4gICAgICAgICAgICBzY2FsZVkgPSBlbE1hdHJpeCAmJiBlbE1hdHJpeC5kLFxuICAgICAgICAgICAgdHJhbnNsYXRlWCA9IChjdXJyZW50UmVjdC5sZWZ0IC0gdG9SZWN0LmxlZnQpIC8gKHNjYWxlWCB8fCAxKSxcbiAgICAgICAgICAgIHRyYW5zbGF0ZVkgPSAoY3VycmVudFJlY3QudG9wIC0gdG9SZWN0LnRvcCkgLyAoc2NhbGVZIHx8IDEpO1xuICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWCA9ICEhdHJhbnNsYXRlWDtcbiAgICAgICAgdGFyZ2V0LmFuaW1hdGluZ1kgPSAhIXRyYW5zbGF0ZVk7XG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlM2QoJyArIHRyYW5zbGF0ZVggKyAncHgsJyArIHRyYW5zbGF0ZVkgKyAncHgsMCknKTtcbiAgICAgICAgcmVwYWludCh0YXJnZXQpOyAvLyByZXBhaW50XG5cbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zaXRpb24nLCAndHJhbnNmb3JtICcgKyBkdXJhdGlvbiArICdtcycgKyAodGhpcy5vcHRpb25zLmVhc2luZyA/ICcgJyArIHRoaXMub3B0aW9ucy5lYXNpbmcgOiAnJykpO1xuICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKDAsMCwwKScpO1xuICAgICAgICB0eXBlb2YgdGFyZ2V0LmFuaW1hdGVkID09PSAnbnVtYmVyJyAmJiBjbGVhclRpbWVvdXQodGFyZ2V0LmFuaW1hdGVkKTtcbiAgICAgICAgdGFyZ2V0LmFuaW1hdGVkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zaXRpb24nLCAnJyk7XG4gICAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICcnKTtcbiAgICAgICAgICB0YXJnZXQuYW5pbWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWCA9IGZhbHNlO1xuICAgICAgICAgIHRhcmdldC5hbmltYXRpbmdZID0gZmFsc2U7XG4gICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlcGFpbnQodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQub2Zmc2V0V2lkdGg7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVJlYWxUaW1lKGFuaW1hdGluZ1JlY3QsIGZyb21SZWN0LCB0b1JlY3QsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhmcm9tUmVjdC50b3AgLSBhbmltYXRpbmdSZWN0LnRvcCwgMikgKyBNYXRoLnBvdyhmcm9tUmVjdC5sZWZ0IC0gYW5pbWF0aW5nUmVjdC5sZWZ0LCAyKSkgLyBNYXRoLnNxcnQoTWF0aC5wb3coZnJvbVJlY3QudG9wIC0gdG9SZWN0LnRvcCwgMikgKyBNYXRoLnBvdyhmcm9tUmVjdC5sZWZ0IC0gdG9SZWN0LmxlZnQsIDIpKSAqIG9wdGlvbnMuYW5pbWF0aW9uO1xufVxuXG52YXIgcGx1Z2lucyA9IFtdO1xudmFyIGRlZmF1bHRzID0ge1xuICBpbml0aWFsaXplQnlEZWZhdWx0OiB0cnVlXG59O1xudmFyIFBsdWdpbk1hbmFnZXIgPSB7XG4gIG1vdW50OiBmdW5jdGlvbiBtb3VudChwbHVnaW4pIHtcbiAgICAvLyBTZXQgZGVmYXVsdCBzdGF0aWMgcHJvcGVydGllc1xuICAgIGZvciAodmFyIG9wdGlvbiBpbiBkZWZhdWx0cykge1xuICAgICAgaWYgKGRlZmF1bHRzLmhhc093blByb3BlcnR5KG9wdGlvbikgJiYgIShvcHRpb24gaW4gcGx1Z2luKSkge1xuICAgICAgICBwbHVnaW5bb3B0aW9uXSA9IGRlZmF1bHRzW29wdGlvbl07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gIH0sXG4gIHBsdWdpbkV2ZW50OiBmdW5jdGlvbiBwbHVnaW5FdmVudChldmVudE5hbWUsIHNvcnRhYmxlLCBldnQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5ldmVudENhbmNlbGVkID0gZmFsc2U7XG5cbiAgICBldnQuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuZXZlbnRDYW5jZWxlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIHZhciBldmVudE5hbWVHbG9iYWwgPSBldmVudE5hbWUgKyAnR2xvYmFsJztcbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgaWYgKCFzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV0pIHJldHVybjsgLy8gRmlyZSBnbG9iYWwgZXZlbnRzIGlmIGl0IGV4aXN0cyBpbiB0aGlzIHNvcnRhYmxlXG5cbiAgICAgIGlmIChzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lR2xvYmFsXSkge1xuICAgICAgICBzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lR2xvYmFsXShfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGVcbiAgICAgICAgfSwgZXZ0KSk7XG4gICAgICB9IC8vIE9ubHkgZmlyZSBwbHVnaW4gZXZlbnQgaWYgcGx1Z2luIGlzIGVuYWJsZWQgaW4gdGhpcyBzb3J0YWJsZSxcbiAgICAgIC8vIGFuZCBwbHVnaW4gaGFzIGV2ZW50IGRlZmluZWRcblxuXG4gICAgICBpZiAoc29ydGFibGUub3B0aW9uc1twbHVnaW4ucGx1Z2luTmFtZV0gJiYgc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdW2V2ZW50TmFtZV0oX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlXG4gICAgICAgIH0sIGV2dCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBpbml0aWFsaXplUGx1Z2luczogZnVuY3Rpb24gaW5pdGlhbGl6ZVBsdWdpbnMoc29ydGFibGUsIGVsLCBkZWZhdWx0cywgb3B0aW9ucykge1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICB2YXIgcGx1Z2luTmFtZSA9IHBsdWdpbi5wbHVnaW5OYW1lO1xuICAgICAgaWYgKCFzb3J0YWJsZS5vcHRpb25zW3BsdWdpbk5hbWVdICYmICFwbHVnaW4uaW5pdGlhbGl6ZUJ5RGVmYXVsdCkgcmV0dXJuO1xuICAgICAgdmFyIGluaXRpYWxpemVkID0gbmV3IHBsdWdpbihzb3J0YWJsZSwgZWwsIHNvcnRhYmxlLm9wdGlvbnMpO1xuICAgICAgaW5pdGlhbGl6ZWQuc29ydGFibGUgPSBzb3J0YWJsZTtcbiAgICAgIGluaXRpYWxpemVkLm9wdGlvbnMgPSBzb3J0YWJsZS5vcHRpb25zO1xuICAgICAgc29ydGFibGVbcGx1Z2luTmFtZV0gPSBpbml0aWFsaXplZDsgLy8gQWRkIGRlZmF1bHQgb3B0aW9ucyBmcm9tIHBsdWdpblxuXG4gICAgICBfZXh0ZW5kcyhkZWZhdWx0cywgaW5pdGlhbGl6ZWQuZGVmYXVsdHMpO1xuICAgIH0pO1xuXG4gICAgZm9yICh2YXIgb3B0aW9uIGluIHNvcnRhYmxlLm9wdGlvbnMpIHtcbiAgICAgIGlmICghc29ydGFibGUub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHRpb24pKSBjb250aW51ZTtcbiAgICAgIHZhciBtb2RpZmllZCA9IHRoaXMubW9kaWZ5T3B0aW9uKHNvcnRhYmxlLCBvcHRpb24sIHNvcnRhYmxlLm9wdGlvbnNbb3B0aW9uXSk7XG5cbiAgICAgIGlmICh0eXBlb2YgbW9kaWZpZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNvcnRhYmxlLm9wdGlvbnNbb3B0aW9uXSA9IG1vZGlmaWVkO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZ2V0RXZlbnRQcm9wZXJ0aWVzOiBmdW5jdGlvbiBnZXRFdmVudFByb3BlcnRpZXMobmFtZSwgc29ydGFibGUpIHtcbiAgICB2YXIgZXZlbnRQcm9wZXJ0aWVzID0ge307XG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIGlmICh0eXBlb2YgcGx1Z2luLmV2ZW50UHJvcGVydGllcyAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xuXG4gICAgICBfZXh0ZW5kcyhldmVudFByb3BlcnRpZXMsIHBsdWdpbi5ldmVudFByb3BlcnRpZXMuY2FsbChzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV0sIG5hbWUpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZXZlbnRQcm9wZXJ0aWVzO1xuICB9LFxuICBtb2RpZnlPcHRpb246IGZ1bmN0aW9uIG1vZGlmeU9wdGlvbihzb3J0YWJsZSwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgbW9kaWZpZWRWYWx1ZTtcbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgLy8gUGx1Z2luIG11c3QgZXhpc3Qgb24gdGhlIFNvcnRhYmxlXG4gICAgICBpZiAoIXNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSkgcmV0dXJuOyAvLyBJZiBzdGF0aWMgb3B0aW9uIGxpc3RlbmVyIGV4aXN0cyBmb3IgdGhpcyBvcHRpb24sIGNhbGwgaW4gdGhlIGNvbnRleHQgb2YgdGhlIFNvcnRhYmxlJ3MgaW5zdGFuY2Ugb2YgdGhpcyBwbHVnaW5cblxuICAgICAgaWYgKHBsdWdpbi5vcHRpb25MaXN0ZW5lcnMgJiYgdHlwZW9mIHBsdWdpbi5vcHRpb25MaXN0ZW5lcnNbbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbW9kaWZpZWRWYWx1ZSA9IHBsdWdpbi5vcHRpb25MaXN0ZW5lcnNbbmFtZV0uY2FsbChzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbW9kaWZpZWRWYWx1ZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChfcmVmKSB7XG4gIHZhciBzb3J0YWJsZSA9IF9yZWYuc29ydGFibGUsXG4gICAgICByb290RWwgPSBfcmVmLnJvb3RFbCxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICB0YXJnZXRFbCA9IF9yZWYudGFyZ2V0RWwsXG4gICAgICBjbG9uZUVsID0gX3JlZi5jbG9uZUVsLFxuICAgICAgdG9FbCA9IF9yZWYudG9FbCxcbiAgICAgIGZyb21FbCA9IF9yZWYuZnJvbUVsLFxuICAgICAgb2xkSW5kZXggPSBfcmVmLm9sZEluZGV4LFxuICAgICAgbmV3SW5kZXggPSBfcmVmLm5ld0luZGV4LFxuICAgICAgb2xkRHJhZ2dhYmxlSW5kZXggPSBfcmVmLm9sZERyYWdnYWJsZUluZGV4LFxuICAgICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBfcmVmLm5ld0RyYWdnYWJsZUluZGV4LFxuICAgICAgb3JpZ2luYWxFdmVudCA9IF9yZWYub3JpZ2luYWxFdmVudCxcbiAgICAgIHB1dFNvcnRhYmxlID0gX3JlZi5wdXRTb3J0YWJsZSxcbiAgICAgIGV4dHJhRXZlbnRQcm9wZXJ0aWVzID0gX3JlZi5leHRyYUV2ZW50UHJvcGVydGllcztcbiAgc29ydGFibGUgPSBzb3J0YWJsZSB8fCByb290RWwgJiYgcm9vdEVsW2V4cGFuZG9dO1xuICBpZiAoIXNvcnRhYmxlKSByZXR1cm47XG4gIHZhciBldnQsXG4gICAgICBvcHRpb25zID0gc29ydGFibGUub3B0aW9ucyxcbiAgICAgIG9uTmFtZSA9ICdvbicgKyBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHIoMSk7IC8vIFN1cHBvcnQgZm9yIG5ldyBDdXN0b21FdmVudCBmZWF0dXJlXG5cbiAgaWYgKHdpbmRvdy5DdXN0b21FdmVudCAmJiAhSUUxMU9yTGVzcyAmJiAhRWRnZSkge1xuICAgIGV2dCA9IG5ldyBDdXN0b21FdmVudChuYW1lLCB7XG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2dC5pbml0RXZlbnQobmFtZSwgdHJ1ZSwgdHJ1ZSk7XG4gIH1cblxuICBldnQudG8gPSB0b0VsIHx8IHJvb3RFbDtcbiAgZXZ0LmZyb20gPSBmcm9tRWwgfHwgcm9vdEVsO1xuICBldnQuaXRlbSA9IHRhcmdldEVsIHx8IHJvb3RFbDtcbiAgZXZ0LmNsb25lID0gY2xvbmVFbDtcbiAgZXZ0Lm9sZEluZGV4ID0gb2xkSW5kZXg7XG4gIGV2dC5uZXdJbmRleCA9IG5ld0luZGV4O1xuICBldnQub2xkRHJhZ2dhYmxlSW5kZXggPSBvbGREcmFnZ2FibGVJbmRleDtcbiAgZXZ0Lm5ld0RyYWdnYWJsZUluZGV4ID0gbmV3RHJhZ2dhYmxlSW5kZXg7XG4gIGV2dC5vcmlnaW5hbEV2ZW50ID0gb3JpZ2luYWxFdmVudDtcbiAgZXZ0LnB1bGxNb2RlID0gcHV0U29ydGFibGUgPyBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSA6IHVuZGVmaW5lZDtcblxuICB2YXIgYWxsRXZlbnRQcm9wZXJ0aWVzID0gX29iamVjdFNwcmVhZCh7fSwgZXh0cmFFdmVudFByb3BlcnRpZXMsIFBsdWdpbk1hbmFnZXIuZ2V0RXZlbnRQcm9wZXJ0aWVzKG5hbWUsIHNvcnRhYmxlKSk7XG5cbiAgZm9yICh2YXIgb3B0aW9uIGluIGFsbEV2ZW50UHJvcGVydGllcykge1xuICAgIGV2dFtvcHRpb25dID0gYWxsRXZlbnRQcm9wZXJ0aWVzW29wdGlvbl07XG4gIH1cblxuICBpZiAocm9vdEVsKSB7XG4gICAgcm9vdEVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgfVxuXG4gIGlmIChvcHRpb25zW29uTmFtZV0pIHtcbiAgICBvcHRpb25zW29uTmFtZV0uY2FsbChzb3J0YWJsZSwgZXZ0KTtcbiAgfVxufVxuXG52YXIgcGx1Z2luRXZlbnQgPSBmdW5jdGlvbiBwbHVnaW5FdmVudChldmVudE5hbWUsIHNvcnRhYmxlKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSxcbiAgICAgIG9yaWdpbmFsRXZlbnQgPSBfcmVmLmV2dCxcbiAgICAgIGRhdGEgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiZXZ0XCJdKTtcblxuICBQbHVnaW5NYW5hZ2VyLnBsdWdpbkV2ZW50LmJpbmQoU29ydGFibGUpKGV2ZW50TmFtZSwgc29ydGFibGUsIF9vYmplY3RTcHJlYWQoe1xuICAgIGRyYWdFbDogZHJhZ0VsLFxuICAgIHBhcmVudEVsOiBwYXJlbnRFbCxcbiAgICBnaG9zdEVsOiBnaG9zdEVsLFxuICAgIHJvb3RFbDogcm9vdEVsLFxuICAgIG5leHRFbDogbmV4dEVsLFxuICAgIGxhc3REb3duRWw6IGxhc3REb3duRWwsXG4gICAgY2xvbmVFbDogY2xvbmVFbCxcbiAgICBjbG9uZUhpZGRlbjogY2xvbmVIaWRkZW4sXG4gICAgZHJhZ1N0YXJ0ZWQ6IG1vdmVkLFxuICAgIHB1dFNvcnRhYmxlOiBwdXRTb3J0YWJsZSxcbiAgICBhY3RpdmVTb3J0YWJsZTogU29ydGFibGUuYWN0aXZlLFxuICAgIG9yaWdpbmFsRXZlbnQ6IG9yaWdpbmFsRXZlbnQsXG4gICAgb2xkSW5kZXg6IG9sZEluZGV4LFxuICAgIG9sZERyYWdnYWJsZUluZGV4OiBvbGREcmFnZ2FibGVJbmRleCxcbiAgICBuZXdJbmRleDogbmV3SW5kZXgsXG4gICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG5ld0RyYWdnYWJsZUluZGV4LFxuICAgIGhpZGVHaG9zdEZvclRhcmdldDogX2hpZGVHaG9zdEZvclRhcmdldCxcbiAgICB1bmhpZGVHaG9zdEZvclRhcmdldDogX3VuaGlkZUdob3N0Rm9yVGFyZ2V0LFxuICAgIGNsb25lTm93SGlkZGVuOiBmdW5jdGlvbiBjbG9uZU5vd0hpZGRlbigpIHtcbiAgICAgIGNsb25lSGlkZGVuID0gdHJ1ZTtcbiAgICB9LFxuICAgIGNsb25lTm93U2hvd246IGZ1bmN0aW9uIGNsb25lTm93U2hvd24oKSB7XG4gICAgICBjbG9uZUhpZGRlbiA9IGZhbHNlO1xuICAgIH0sXG4gICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50OiBmdW5jdGlvbiBkaXNwYXRjaFNvcnRhYmxlRXZlbnQobmFtZSkge1xuICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IG9yaWdpbmFsRXZlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgZGF0YSkpO1xufTtcblxuZnVuY3Rpb24gX2Rpc3BhdGNoRXZlbnQoaW5mbykge1xuICBkaXNwYXRjaEV2ZW50KF9vYmplY3RTcHJlYWQoe1xuICAgIHB1dFNvcnRhYmxlOiBwdXRTb3J0YWJsZSxcbiAgICBjbG9uZUVsOiBjbG9uZUVsLFxuICAgIHRhcmdldEVsOiBkcmFnRWwsXG4gICAgcm9vdEVsOiByb290RWwsXG4gICAgb2xkSW5kZXg6IG9sZEluZGV4LFxuICAgIG9sZERyYWdnYWJsZUluZGV4OiBvbGREcmFnZ2FibGVJbmRleCxcbiAgICBuZXdJbmRleDogbmV3SW5kZXgsXG4gICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG5ld0RyYWdnYWJsZUluZGV4XG4gIH0sIGluZm8pKTtcbn1cblxudmFyIGRyYWdFbCxcbiAgICBwYXJlbnRFbCxcbiAgICBnaG9zdEVsLFxuICAgIHJvb3RFbCxcbiAgICBuZXh0RWwsXG4gICAgbGFzdERvd25FbCxcbiAgICBjbG9uZUVsLFxuICAgIGNsb25lSGlkZGVuLFxuICAgIG9sZEluZGV4LFxuICAgIG5ld0luZGV4LFxuICAgIG9sZERyYWdnYWJsZUluZGV4LFxuICAgIG5ld0RyYWdnYWJsZUluZGV4LFxuICAgIGFjdGl2ZUdyb3VwLFxuICAgIHB1dFNvcnRhYmxlLFxuICAgIGF3YWl0aW5nRHJhZ1N0YXJ0ZWQgPSBmYWxzZSxcbiAgICBpZ25vcmVOZXh0Q2xpY2sgPSBmYWxzZSxcbiAgICBzb3J0YWJsZXMgPSBbXSxcbiAgICB0YXBFdnQsXG4gICAgdG91Y2hFdnQsXG4gICAgbGFzdER4LFxuICAgIGxhc3REeSxcbiAgICB0YXBEaXN0YW5jZUxlZnQsXG4gICAgdGFwRGlzdGFuY2VUb3AsXG4gICAgbW92ZWQsXG4gICAgbGFzdFRhcmdldCxcbiAgICBsYXN0RGlyZWN0aW9uLFxuICAgIHBhc3RGaXJzdEludmVydFRocmVzaCA9IGZhbHNlLFxuICAgIGlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQgPSBmYWxzZSxcbiAgICB0YXJnZXRNb3ZlRGlzdGFuY2UsXG4gICAgLy8gRm9yIHBvc2l0aW9uaW5nIGdob3N0IGFic29sdXRlbHlcbmdob3N0UmVsYXRpdmVQYXJlbnQsXG4gICAgZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGwgPSBbXSxcbiAgICAvLyAobGVmdCwgdG9wKVxuX3NpbGVudCA9IGZhbHNlLFxuICAgIHNhdmVkSW5wdXRDaGVja2VkID0gW107XG4vKiogQGNvbnN0ICovXG5cbnZhciBkb2N1bWVudEV4aXN0cyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgUG9zaXRpb25HaG9zdEFic29sdXRlbHkgPSBJT1MsXG4gICAgQ1NTRmxvYXRQcm9wZXJ0eSA9IEVkZ2UgfHwgSUUxMU9yTGVzcyA/ICdjc3NGbG9hdCcgOiAnZmxvYXQnLFxuICAgIC8vIFRoaXMgd2lsbCBub3QgcGFzcyBmb3IgSUU5LCBiZWNhdXNlIElFOSBEbkQgb25seSB3b3JrcyBvbiBhbmNob3JzXG5zdXBwb3J0RHJhZ2dhYmxlID0gZG9jdW1lbnRFeGlzdHMgJiYgIUNocm9tZUZvckFuZHJvaWQgJiYgIUlPUyAmJiAnZHJhZ2dhYmxlJyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICBzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCFkb2N1bWVudEV4aXN0cykgcmV0dXJuOyAvLyBmYWxzZSB3aGVuIDw9IElFMTFcblxuICBpZiAoSUUxMU9yTGVzcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3gnKTtcbiAgZWwuc3R5bGUuY3NzVGV4dCA9ICdwb2ludGVyLWV2ZW50czphdXRvJztcbiAgcmV0dXJuIGVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPT09ICdhdXRvJztcbn0oKSxcbiAgICBfZGV0ZWN0RGlyZWN0aW9uID0gZnVuY3Rpb24gX2RldGVjdERpcmVjdGlvbihlbCwgb3B0aW9ucykge1xuICB2YXIgZWxDU1MgPSBjc3MoZWwpLFxuICAgICAgZWxXaWR0aCA9IHBhcnNlSW50KGVsQ1NTLndpZHRoKSAtIHBhcnNlSW50KGVsQ1NTLnBhZGRpbmdMZWZ0KSAtIHBhcnNlSW50KGVsQ1NTLnBhZGRpbmdSaWdodCkgLSBwYXJzZUludChlbENTUy5ib3JkZXJMZWZ0V2lkdGgpIC0gcGFyc2VJbnQoZWxDU1MuYm9yZGVyUmlnaHRXaWR0aCksXG4gICAgICBjaGlsZDEgPSBnZXRDaGlsZChlbCwgMCwgb3B0aW9ucyksXG4gICAgICBjaGlsZDIgPSBnZXRDaGlsZChlbCwgMSwgb3B0aW9ucyksXG4gICAgICBmaXJzdENoaWxkQ1NTID0gY2hpbGQxICYmIGNzcyhjaGlsZDEpLFxuICAgICAgc2Vjb25kQ2hpbGRDU1MgPSBjaGlsZDIgJiYgY3NzKGNoaWxkMiksXG4gICAgICBmaXJzdENoaWxkV2lkdGggPSBmaXJzdENoaWxkQ1NTICYmIHBhcnNlSW50KGZpcnN0Q2hpbGRDU1MubWFyZ2luTGVmdCkgKyBwYXJzZUludChmaXJzdENoaWxkQ1NTLm1hcmdpblJpZ2h0KSArIGdldFJlY3QoY2hpbGQxKS53aWR0aCxcbiAgICAgIHNlY29uZENoaWxkV2lkdGggPSBzZWNvbmRDaGlsZENTUyAmJiBwYXJzZUludChzZWNvbmRDaGlsZENTUy5tYXJnaW5MZWZ0KSArIHBhcnNlSW50KHNlY29uZENoaWxkQ1NTLm1hcmdpblJpZ2h0KSArIGdldFJlY3QoY2hpbGQyKS53aWR0aDtcblxuICBpZiAoZWxDU1MuZGlzcGxheSA9PT0gJ2ZsZXgnKSB7XG4gICAgcmV0dXJuIGVsQ1NTLmZsZXhEaXJlY3Rpb24gPT09ICdjb2x1bW4nIHx8IGVsQ1NTLmZsZXhEaXJlY3Rpb24gPT09ICdjb2x1bW4tcmV2ZXJzZScgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICB9XG5cbiAgaWYgKGVsQ1NTLmRpc3BsYXkgPT09ICdncmlkJykge1xuICAgIHJldHVybiBlbENTUy5ncmlkVGVtcGxhdGVDb2x1bW5zLnNwbGl0KCcgJykubGVuZ3RoIDw9IDEgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICB9XG5cbiAgaWYgKGNoaWxkMSAmJiBmaXJzdENoaWxkQ1NTW1wiZmxvYXRcIl0gJiYgZmlyc3RDaGlsZENTU1tcImZsb2F0XCJdICE9PSAnbm9uZScpIHtcbiAgICB2YXIgdG91Y2hpbmdTaWRlQ2hpbGQyID0gZmlyc3RDaGlsZENTU1tcImZsb2F0XCJdID09PSAnbGVmdCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgIHJldHVybiBjaGlsZDIgJiYgKHNlY29uZENoaWxkQ1NTLmNsZWFyID09PSAnYm90aCcgfHwgc2Vjb25kQ2hpbGRDU1MuY2xlYXIgPT09IHRvdWNoaW5nU2lkZUNoaWxkMikgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkMSAmJiAoZmlyc3RDaGlsZENTUy5kaXNwbGF5ID09PSAnYmxvY2snIHx8IGZpcnN0Q2hpbGRDU1MuZGlzcGxheSA9PT0gJ2ZsZXgnIHx8IGZpcnN0Q2hpbGRDU1MuZGlzcGxheSA9PT0gJ3RhYmxlJyB8fCBmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICdncmlkJyB8fCBmaXJzdENoaWxkV2lkdGggPj0gZWxXaWR0aCAmJiBlbENTU1tDU1NGbG9hdFByb3BlcnR5XSA9PT0gJ25vbmUnIHx8IGNoaWxkMiAmJiBlbENTU1tDU1NGbG9hdFByb3BlcnR5XSA9PT0gJ25vbmUnICYmIGZpcnN0Q2hpbGRXaWR0aCArIHNlY29uZENoaWxkV2lkdGggPiBlbFdpZHRoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG59LFxuICAgIF9kcmFnRWxJblJvd0NvbHVtbiA9IGZ1bmN0aW9uIF9kcmFnRWxJblJvd0NvbHVtbihkcmFnUmVjdCwgdGFyZ2V0UmVjdCwgdmVydGljYWwpIHtcbiAgdmFyIGRyYWdFbFMxT3BwID0gdmVydGljYWwgPyBkcmFnUmVjdC5sZWZ0IDogZHJhZ1JlY3QudG9wLFxuICAgICAgZHJhZ0VsUzJPcHAgPSB2ZXJ0aWNhbCA/IGRyYWdSZWN0LnJpZ2h0IDogZHJhZ1JlY3QuYm90dG9tLFxuICAgICAgZHJhZ0VsT3BwTGVuZ3RoID0gdmVydGljYWwgPyBkcmFnUmVjdC53aWR0aCA6IGRyYWdSZWN0LmhlaWdodCxcbiAgICAgIHRhcmdldFMxT3BwID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LmxlZnQgOiB0YXJnZXRSZWN0LnRvcCxcbiAgICAgIHRhcmdldFMyT3BwID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LnJpZ2h0IDogdGFyZ2V0UmVjdC5ib3R0b20sXG4gICAgICB0YXJnZXRPcHBMZW5ndGggPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3Qud2lkdGggOiB0YXJnZXRSZWN0LmhlaWdodDtcbiAgcmV0dXJuIGRyYWdFbFMxT3BwID09PSB0YXJnZXRTMU9wcCB8fCBkcmFnRWxTMk9wcCA9PT0gdGFyZ2V0UzJPcHAgfHwgZHJhZ0VsUzFPcHAgKyBkcmFnRWxPcHBMZW5ndGggLyAyID09PSB0YXJnZXRTMU9wcCArIHRhcmdldE9wcExlbmd0aCAvIDI7XG59LFxuXG4vKipcbiAqIERldGVjdHMgZmlyc3QgbmVhcmVzdCBlbXB0eSBzb3J0YWJsZSB0byBYIGFuZCBZIHBvc2l0aW9uIHVzaW5nIGVtcHR5SW5zZXJ0VGhyZXNob2xkLlxuICogQHBhcmFtICB7TnVtYmVyfSB4ICAgICAgWCBwb3NpdGlvblxuICogQHBhcmFtICB7TnVtYmVyfSB5ICAgICAgWSBwb3NpdGlvblxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9ICAgRWxlbWVudCBvZiB0aGUgZmlyc3QgZm91bmQgbmVhcmVzdCBTb3J0YWJsZVxuICovXG5fZGV0ZWN0TmVhcmVzdEVtcHR5U29ydGFibGUgPSBmdW5jdGlvbiBfZGV0ZWN0TmVhcmVzdEVtcHR5U29ydGFibGUoeCwgeSkge1xuICB2YXIgcmV0O1xuICBzb3J0YWJsZXMuc29tZShmdW5jdGlvbiAoc29ydGFibGUpIHtcbiAgICBpZiAobGFzdENoaWxkKHNvcnRhYmxlKSkgcmV0dXJuO1xuICAgIHZhciByZWN0ID0gZ2V0UmVjdChzb3J0YWJsZSksXG4gICAgICAgIHRocmVzaG9sZCA9IHNvcnRhYmxlW2V4cGFuZG9dLm9wdGlvbnMuZW1wdHlJbnNlcnRUaHJlc2hvbGQsXG4gICAgICAgIGluc2lkZUhvcml6b250YWxseSA9IHggPj0gcmVjdC5sZWZ0IC0gdGhyZXNob2xkICYmIHggPD0gcmVjdC5yaWdodCArIHRocmVzaG9sZCxcbiAgICAgICAgaW5zaWRlVmVydGljYWxseSA9IHkgPj0gcmVjdC50b3AgLSB0aHJlc2hvbGQgJiYgeSA8PSByZWN0LmJvdHRvbSArIHRocmVzaG9sZDtcblxuICAgIGlmICh0aHJlc2hvbGQgJiYgaW5zaWRlSG9yaXpvbnRhbGx5ICYmIGluc2lkZVZlcnRpY2FsbHkpIHtcbiAgICAgIHJldHVybiByZXQgPSBzb3J0YWJsZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufSxcbiAgICBfcHJlcGFyZUdyb3VwID0gZnVuY3Rpb24gX3ByZXBhcmVHcm91cChvcHRpb25zKSB7XG4gIGZ1bmN0aW9uIHRvRm4odmFsdWUsIHB1bGwpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRvLCBmcm9tLCBkcmFnRWwsIGV2dCkge1xuICAgICAgdmFyIHNhbWVHcm91cCA9IHRvLm9wdGlvbnMuZ3JvdXAubmFtZSAmJiBmcm9tLm9wdGlvbnMuZ3JvdXAubmFtZSAmJiB0by5vcHRpb25zLmdyb3VwLm5hbWUgPT09IGZyb20ub3B0aW9ucy5ncm91cC5uYW1lO1xuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiAocHVsbCB8fCBzYW1lR3JvdXApKSB7XG4gICAgICAgIC8vIERlZmF1bHQgcHVsbCB2YWx1ZVxuICAgICAgICAvLyBEZWZhdWx0IHB1bGwgYW5kIHB1dCB2YWx1ZSBpZiBzYW1lIGdyb3VwXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKHB1bGwgJiYgdmFsdWUgPT09ICdjbG9uZScpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRvRm4odmFsdWUodG8sIGZyb20sIGRyYWdFbCwgZXZ0KSwgcHVsbCkodG8sIGZyb20sIGRyYWdFbCwgZXZ0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBvdGhlckdyb3VwID0gKHB1bGwgPyB0byA6IGZyb20pLm9wdGlvbnMuZ3JvdXAubmFtZTtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgPT09IG90aGVyR3JvdXAgfHwgdmFsdWUuam9pbiAmJiB2YWx1ZS5pbmRleE9mKG90aGVyR3JvdXApID4gLTE7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBncm91cCA9IHt9O1xuICB2YXIgb3JpZ2luYWxHcm91cCA9IG9wdGlvbnMuZ3JvdXA7XG5cbiAgaWYgKCFvcmlnaW5hbEdyb3VwIHx8IF90eXBlb2Yob3JpZ2luYWxHcm91cCkgIT0gJ29iamVjdCcpIHtcbiAgICBvcmlnaW5hbEdyb3VwID0ge1xuICAgICAgbmFtZTogb3JpZ2luYWxHcm91cFxuICAgIH07XG4gIH1cblxuICBncm91cC5uYW1lID0gb3JpZ2luYWxHcm91cC5uYW1lO1xuICBncm91cC5jaGVja1B1bGwgPSB0b0ZuKG9yaWdpbmFsR3JvdXAucHVsbCwgdHJ1ZSk7XG4gIGdyb3VwLmNoZWNrUHV0ID0gdG9GbihvcmlnaW5hbEdyb3VwLnB1dCk7XG4gIGdyb3VwLnJldmVydENsb25lID0gb3JpZ2luYWxHcm91cC5yZXZlcnRDbG9uZTtcbiAgb3B0aW9ucy5ncm91cCA9IGdyb3VwO1xufSxcbiAgICBfaGlkZUdob3N0Rm9yVGFyZ2V0ID0gZnVuY3Rpb24gX2hpZGVHaG9zdEZvclRhcmdldCgpIHtcbiAgaWYgKCFzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyAmJiBnaG9zdEVsKSB7XG4gICAgY3NzKGdob3N0RWwsICdkaXNwbGF5JywgJ25vbmUnKTtcbiAgfVxufSxcbiAgICBfdW5oaWRlR2hvc3RGb3JUYXJnZXQgPSBmdW5jdGlvbiBfdW5oaWRlR2hvc3RGb3JUYXJnZXQoKSB7XG4gIGlmICghc3VwcG9ydENzc1BvaW50ZXJFdmVudHMgJiYgZ2hvc3RFbCkge1xuICAgIGNzcyhnaG9zdEVsLCAnZGlzcGxheScsICcnKTtcbiAgfVxufTsgLy8gIzExODQgZml4IC0gUHJldmVudCBjbGljayBldmVudCBvbiBmYWxsYmFjayBpZiBkcmFnZ2VkIGJ1dCBpdGVtIG5vdCBjaGFuZ2VkIHBvc2l0aW9uXG5cblxuaWYgKGRvY3VtZW50RXhpc3RzKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2dCkge1xuICAgIGlmIChpZ25vcmVOZXh0Q2xpY2spIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbiAmJiBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uICYmIGV2dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIGlnbm9yZU5leHRDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5cbnZhciBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCA9IGZ1bmN0aW9uIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KGV2dCkge1xuICBpZiAoZHJhZ0VsKSB7XG4gICAgZXZ0ID0gZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dDtcblxuICAgIHZhciBuZWFyZXN0ID0gX2RldGVjdE5lYXJlc3RFbXB0eVNvcnRhYmxlKGV2dC5jbGllbnRYLCBldnQuY2xpZW50WSk7XG5cbiAgICBpZiAobmVhcmVzdCkge1xuICAgICAgLy8gQ3JlYXRlIGltaXRhdGlvbiBldmVudFxuICAgICAgdmFyIGV2ZW50ID0ge307XG5cbiAgICAgIGZvciAodmFyIGkgaW4gZXZ0KSB7XG4gICAgICAgIGlmIChldnQuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICBldmVudFtpXSA9IGV2dFtpXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBldmVudC50YXJnZXQgPSBldmVudC5yb290RWwgPSBuZWFyZXN0O1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSB2b2lkIDA7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24gPSB2b2lkIDA7XG5cbiAgICAgIG5lYXJlc3RbZXhwYW5kb10uX29uRHJhZ092ZXIoZXZlbnQpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIF9jaGVja091dHNpZGVUYXJnZXRFbCA9IGZ1bmN0aW9uIF9jaGVja091dHNpZGVUYXJnZXRFbChldnQpIHtcbiAgaWYgKGRyYWdFbCkge1xuICAgIGRyYWdFbC5wYXJlbnROb2RlW2V4cGFuZG9dLl9pc091dHNpZGVUaGlzRWwoZXZ0LnRhcmdldCk7XG4gIH1cbn07XG4vKipcbiAqIEBjbGFzcyAgU29ydGFibGVcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgZWxcbiAqIEBwYXJhbSAge09iamVjdH0gICAgICAgW29wdGlvbnNdXG4gKi9cblxuXG5mdW5jdGlvbiBTb3J0YWJsZShlbCwgb3B0aW9ucykge1xuICBpZiAoIShlbCAmJiBlbC5ub2RlVHlwZSAmJiBlbC5ub2RlVHlwZSA9PT0gMSkpIHtcbiAgICB0aHJvdyBcIlNvcnRhYmxlOiBgZWxgIG11c3QgYmUgYW4gSFRNTEVsZW1lbnQsIG5vdCBcIi5jb25jYXQoe30udG9TdHJpbmcuY2FsbChlbCkpO1xuICB9XG5cbiAgdGhpcy5lbCA9IGVsOyAvLyByb290IGVsZW1lbnRcblxuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMpOyAvLyBFeHBvcnQgaW5zdGFuY2VcblxuICBlbFtleHBhbmRvXSA9IHRoaXM7XG4gIHZhciBkZWZhdWx0cyA9IHtcbiAgICBncm91cDogbnVsbCxcbiAgICBzb3J0OiB0cnVlLFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBzdG9yZTogbnVsbCxcbiAgICBoYW5kbGU6IG51bGwsXG4gICAgZHJhZ2dhYmxlOiAvXlt1b11sJC9pLnRlc3QoZWwubm9kZU5hbWUpID8gJz5saScgOiAnPionLFxuICAgIHN3YXBUaHJlc2hvbGQ6IDEsXG4gICAgLy8gcGVyY2VudGFnZTsgMCA8PSB4IDw9IDFcbiAgICBpbnZlcnRTd2FwOiBmYWxzZSxcbiAgICAvLyBpbnZlcnQgYWx3YXlzXG4gICAgaW52ZXJ0ZWRTd2FwVGhyZXNob2xkOiBudWxsLFxuICAgIC8vIHdpbGwgYmUgc2V0IHRvIHNhbWUgYXMgc3dhcFRocmVzaG9sZCBpZiBkZWZhdWx0XG4gICAgcmVtb3ZlQ2xvbmVPbkhpZGU6IHRydWUsXG4gICAgZGlyZWN0aW9uOiBmdW5jdGlvbiBkaXJlY3Rpb24oKSB7XG4gICAgICByZXR1cm4gX2RldGVjdERpcmVjdGlvbihlbCwgdGhpcy5vcHRpb25zKTtcbiAgICB9LFxuICAgIGdob3N0Q2xhc3M6ICdzb3J0YWJsZS1naG9zdCcsXG4gICAgY2hvc2VuQ2xhc3M6ICdzb3J0YWJsZS1jaG9zZW4nLFxuICAgIGRyYWdDbGFzczogJ3NvcnRhYmxlLWRyYWcnLFxuICAgIGlnbm9yZTogJ2EsIGltZycsXG4gICAgZmlsdGVyOiBudWxsLFxuICAgIHByZXZlbnRPbkZpbHRlcjogdHJ1ZSxcbiAgICBhbmltYXRpb246IDAsXG4gICAgZWFzaW5nOiBudWxsLFxuICAgIHNldERhdGE6IGZ1bmN0aW9uIHNldERhdGEoZGF0YVRyYW5zZmVyLCBkcmFnRWwpIHtcbiAgICAgIGRhdGFUcmFuc2Zlci5zZXREYXRhKCdUZXh0JywgZHJhZ0VsLnRleHRDb250ZW50KTtcbiAgICB9LFxuICAgIGRyb3BCdWJibGU6IGZhbHNlLFxuICAgIGRyYWdvdmVyQnViYmxlOiBmYWxzZSxcbiAgICBkYXRhSWRBdHRyOiAnZGF0YS1pZCcsXG4gICAgZGVsYXk6IDAsXG4gICAgZGVsYXlPblRvdWNoT25seTogZmFsc2UsXG4gICAgdG91Y2hTdGFydFRocmVzaG9sZDogKE51bWJlci5wYXJzZUludCA/IE51bWJlciA6IHdpbmRvdykucGFyc2VJbnQod2luZG93LmRldmljZVBpeGVsUmF0aW8sIDEwKSB8fCAxLFxuICAgIGZvcmNlRmFsbGJhY2s6IGZhbHNlLFxuICAgIGZhbGxiYWNrQ2xhc3M6ICdzb3J0YWJsZS1mYWxsYmFjaycsXG4gICAgZmFsbGJhY2tPbkJvZHk6IGZhbHNlLFxuICAgIGZhbGxiYWNrVG9sZXJhbmNlOiAwLFxuICAgIGZhbGxiYWNrT2Zmc2V0OiB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH0sXG4gICAgc3VwcG9ydFBvaW50ZXI6IFNvcnRhYmxlLnN1cHBvcnRQb2ludGVyICE9PSBmYWxzZSAmJiAnUG9pbnRlckV2ZW50JyBpbiB3aW5kb3csXG4gICAgZW1wdHlJbnNlcnRUaHJlc2hvbGQ6IDVcbiAgfTtcbiAgUGx1Z2luTWFuYWdlci5pbml0aWFsaXplUGx1Z2lucyh0aGlzLCBlbCwgZGVmYXVsdHMpOyAvLyBTZXQgZGVmYXVsdCBvcHRpb25zXG5cbiAgZm9yICh2YXIgbmFtZSBpbiBkZWZhdWx0cykge1xuICAgICEobmFtZSBpbiBvcHRpb25zKSAmJiAob3B0aW9uc1tuYW1lXSA9IGRlZmF1bHRzW25hbWVdKTtcbiAgfVxuXG4gIF9wcmVwYXJlR3JvdXAob3B0aW9ucyk7IC8vIEJpbmQgYWxsIHByaXZhdGUgbWV0aG9kc1xuXG5cbiAgZm9yICh2YXIgZm4gaW4gdGhpcykge1xuICAgIGlmIChmbi5jaGFyQXQoMCkgPT09ICdfJyAmJiB0eXBlb2YgdGhpc1tmbl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXNbZm5dID0gdGhpc1tmbl0uYmluZCh0aGlzKTtcbiAgICB9XG4gIH0gLy8gU2V0dXAgZHJhZyBtb2RlXG5cblxuICB0aGlzLm5hdGl2ZURyYWdnYWJsZSA9IG9wdGlvbnMuZm9yY2VGYWxsYmFjayA/IGZhbHNlIDogc3VwcG9ydERyYWdnYWJsZTtcblxuICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAvLyBUb3VjaCBzdGFydCB0aHJlc2hvbGQgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiB0aGUgbmF0aXZlIGRyYWdzdGFydCB0aHJlc2hvbGRcbiAgICB0aGlzLm9wdGlvbnMudG91Y2hTdGFydFRocmVzaG9sZCA9IDE7XG4gIH0gLy8gQmluZCBldmVudHNcblxuXG4gIGlmIChvcHRpb25zLnN1cHBvcnRQb2ludGVyKSB7XG4gICAgb24oZWwsICdwb2ludGVyZG93bicsIHRoaXMuX29uVGFwU3RhcnQpO1xuICB9IGVsc2Uge1xuICAgIG9uKGVsLCAnbW91c2Vkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG4gICAgb24oZWwsICd0b3VjaHN0YXJ0JywgdGhpcy5fb25UYXBTdGFydCk7XG4gIH1cblxuICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICBvbihlbCwgJ2RyYWdvdmVyJywgdGhpcyk7XG4gICAgb24oZWwsICdkcmFnZW50ZXInLCB0aGlzKTtcbiAgfVxuXG4gIHNvcnRhYmxlcy5wdXNoKHRoaXMuZWwpOyAvLyBSZXN0b3JlIHNvcnRpbmdcblxuICBvcHRpb25zLnN0b3JlICYmIG9wdGlvbnMuc3RvcmUuZ2V0ICYmIHRoaXMuc29ydChvcHRpb25zLnN0b3JlLmdldCh0aGlzKSB8fCBbXSk7IC8vIEFkZCBhbmltYXRpb24gc3RhdGUgbWFuYWdlclxuXG4gIF9leHRlbmRzKHRoaXMsIEFuaW1hdGlvblN0YXRlTWFuYWdlcigpKTtcbn1cblxuU29ydGFibGUucHJvdG90eXBlID1cbi8qKiBAbGVuZHMgU29ydGFibGUucHJvdG90eXBlICovXG57XG4gIGNvbnN0cnVjdG9yOiBTb3J0YWJsZSxcbiAgX2lzT3V0c2lkZVRoaXNFbDogZnVuY3Rpb24gX2lzT3V0c2lkZVRoaXNFbCh0YXJnZXQpIHtcbiAgICBpZiAoIXRoaXMuZWwuY29udGFpbnModGFyZ2V0KSAmJiB0YXJnZXQgIT09IHRoaXMuZWwpIHtcbiAgICAgIGxhc3RUYXJnZXQgPSBudWxsO1xuICAgIH1cbiAgfSxcbiAgX2dldERpcmVjdGlvbjogZnVuY3Rpb24gX2dldERpcmVjdGlvbihldnQsIHRhcmdldCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5vcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMub3B0aW9ucy5kaXJlY3Rpb24uY2FsbCh0aGlzLCBldnQsIHRhcmdldCwgZHJhZ0VsKSA6IHRoaXMub3B0aW9ucy5kaXJlY3Rpb247XG4gIH0sXG4gIF9vblRhcFN0YXJ0OiBmdW5jdGlvbiBfb25UYXBTdGFydChcbiAgLyoqIEV2ZW50fFRvdWNoRXZlbnQgKi9cbiAgZXZ0KSB7XG4gICAgaWYgKCFldnQuY2FuY2VsYWJsZSkgcmV0dXJuO1xuXG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgZWwgPSB0aGlzLmVsLFxuICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBwcmV2ZW50T25GaWx0ZXIgPSBvcHRpb25zLnByZXZlbnRPbkZpbHRlcixcbiAgICAgICAgdHlwZSA9IGV2dC50eXBlLFxuICAgICAgICB0b3VjaCA9IGV2dC50b3VjaGVzICYmIGV2dC50b3VjaGVzWzBdIHx8IGV2dC5wb2ludGVyVHlwZSAmJiBldnQucG9pbnRlclR5cGUgPT09ICd0b3VjaCcgJiYgZXZ0LFxuICAgICAgICB0YXJnZXQgPSAodG91Y2ggfHwgZXZ0KS50YXJnZXQsXG4gICAgICAgIG9yaWdpbmFsVGFyZ2V0ID0gZXZ0LnRhcmdldC5zaGFkb3dSb290ICYmIChldnQucGF0aCAmJiBldnQucGF0aFswXSB8fCBldnQuY29tcG9zZWRQYXRoICYmIGV2dC5jb21wb3NlZFBhdGgoKVswXSkgfHwgdGFyZ2V0LFxuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcblxuICAgIF9zYXZlSW5wdXRDaGVja2VkU3RhdGUoZWwpOyAvLyBEb24ndCB0cmlnZ2VyIHN0YXJ0IGV2ZW50IHdoZW4gYW4gZWxlbWVudCBpcyBiZWVuIGRyYWdnZWQsIG90aGVyd2lzZSB0aGUgZXZ0Lm9sZGluZGV4IGFsd2F5cyB3cm9uZyB3aGVuIHNldCBvcHRpb24uZ3JvdXAuXG5cblxuICAgIGlmIChkcmFnRWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoL21vdXNlZG93bnxwb2ludGVyZG93bi8udGVzdCh0eXBlKSAmJiBldnQuYnV0dG9uICE9PSAwIHx8IG9wdGlvbnMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjsgLy8gb25seSBsZWZ0IGJ1dHRvbiBhbmQgZW5hYmxlZFxuICAgIH0gLy8gY2FuY2VsIGRuZCBpZiBvcmlnaW5hbCB0YXJnZXQgaXMgY29udGVudCBlZGl0YWJsZVxuXG5cbiAgICBpZiAob3JpZ2luYWxUYXJnZXQuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0YXJnZXQgPSBjbG9zZXN0KHRhcmdldCwgb3B0aW9ucy5kcmFnZ2FibGUsIGVsLCBmYWxzZSk7XG5cbiAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5hbmltYXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChsYXN0RG93bkVsID09PSB0YXJnZXQpIHtcbiAgICAgIC8vIElnbm9yaW5nIGR1cGxpY2F0ZSBgZG93bmBcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEdldCB0aGUgaW5kZXggb2YgdGhlIGRyYWdnZWQgZWxlbWVudCB3aXRoaW4gaXRzIHBhcmVudFxuXG5cbiAgICBvbGRJbmRleCA9IGluZGV4KHRhcmdldCk7XG4gICAgb2xkRHJhZ2dhYmxlSW5kZXggPSBpbmRleCh0YXJnZXQsIG9wdGlvbnMuZHJhZ2dhYmxlKTsgLy8gQ2hlY2sgZmlsdGVyXG5cbiAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGZpbHRlci5jYWxsKHRoaXMsIGV2dCwgdGFyZ2V0LCB0aGlzKSkge1xuICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgc29ydGFibGU6IF90aGlzLFxuICAgICAgICAgIHJvb3RFbDogb3JpZ2luYWxUYXJnZXQsXG4gICAgICAgICAgbmFtZTogJ2ZpbHRlcicsXG4gICAgICAgICAgdGFyZ2V0RWw6IHRhcmdldCxcbiAgICAgICAgICB0b0VsOiBlbCxcbiAgICAgICAgICBmcm9tRWw6IGVsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBsdWdpbkV2ZW50KCdmaWx0ZXInLCBfdGhpcywge1xuICAgICAgICAgIGV2dDogZXZ0XG4gICAgICAgIH0pO1xuICAgICAgICBwcmV2ZW50T25GaWx0ZXIgJiYgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybjsgLy8gY2FuY2VsIGRuZFxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSBmaWx0ZXIuc3BsaXQoJywnKS5zb21lKGZ1bmN0aW9uIChjcml0ZXJpYSkge1xuICAgICAgICBjcml0ZXJpYSA9IGNsb3Nlc3Qob3JpZ2luYWxUYXJnZXQsIGNyaXRlcmlhLnRyaW0oKSwgZWwsIGZhbHNlKTtcblxuICAgICAgICBpZiAoY3JpdGVyaWEpIHtcbiAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICBzb3J0YWJsZTogX3RoaXMsXG4gICAgICAgICAgICByb290RWw6IGNyaXRlcmlhLFxuICAgICAgICAgICAgbmFtZTogJ2ZpbHRlcicsXG4gICAgICAgICAgICB0YXJnZXRFbDogdGFyZ2V0LFxuICAgICAgICAgICAgZnJvbUVsOiBlbCxcbiAgICAgICAgICAgIHRvRWw6IGVsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBwbHVnaW5FdmVudCgnZmlsdGVyJywgX3RoaXMsIHtcbiAgICAgICAgICAgIGV2dDogZXZ0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZmlsdGVyKSB7XG4gICAgICAgIHByZXZlbnRPbkZpbHRlciAmJiBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuOyAvLyBjYW5jZWwgZG5kXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaGFuZGxlICYmICFjbG9zZXN0KG9yaWdpbmFsVGFyZ2V0LCBvcHRpb25zLmhhbmRsZSwgZWwsIGZhbHNlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUHJlcGFyZSBgZHJhZ3N0YXJ0YFxuXG5cbiAgICB0aGlzLl9wcmVwYXJlRHJhZ1N0YXJ0KGV2dCwgdG91Y2gsIHRhcmdldCk7XG4gIH0sXG4gIF9wcmVwYXJlRHJhZ1N0YXJ0OiBmdW5jdGlvbiBfcHJlcGFyZURyYWdTdGFydChcbiAgLyoqIEV2ZW50ICovXG4gIGV2dCxcbiAgLyoqIFRvdWNoICovXG4gIHRvdWNoLFxuICAvKiogSFRNTEVsZW1lbnQgKi9cbiAgdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgZWwgPSBfdGhpcy5lbCxcbiAgICAgICAgb3B0aW9ucyA9IF90aGlzLm9wdGlvbnMsXG4gICAgICAgIG93bmVyRG9jdW1lbnQgPSBlbC5vd25lckRvY3VtZW50LFxuICAgICAgICBkcmFnU3RhcnRGbjtcblxuICAgIGlmICh0YXJnZXQgJiYgIWRyYWdFbCAmJiB0YXJnZXQucGFyZW50Tm9kZSA9PT0gZWwpIHtcbiAgICAgIHZhciBkcmFnUmVjdCA9IGdldFJlY3QodGFyZ2V0KTtcbiAgICAgIHJvb3RFbCA9IGVsO1xuICAgICAgZHJhZ0VsID0gdGFyZ2V0O1xuICAgICAgcGFyZW50RWwgPSBkcmFnRWwucGFyZW50Tm9kZTtcbiAgICAgIG5leHRFbCA9IGRyYWdFbC5uZXh0U2libGluZztcbiAgICAgIGxhc3REb3duRWwgPSB0YXJnZXQ7XG4gICAgICBhY3RpdmVHcm91cCA9IG9wdGlvbnMuZ3JvdXA7XG4gICAgICBTb3J0YWJsZS5kcmFnZ2VkID0gZHJhZ0VsO1xuICAgICAgdGFwRXZ0ID0ge1xuICAgICAgICB0YXJnZXQ6IGRyYWdFbCxcbiAgICAgICAgY2xpZW50WDogKHRvdWNoIHx8IGV2dCkuY2xpZW50WCxcbiAgICAgICAgY2xpZW50WTogKHRvdWNoIHx8IGV2dCkuY2xpZW50WVxuICAgICAgfTtcbiAgICAgIHRhcERpc3RhbmNlTGVmdCA9IHRhcEV2dC5jbGllbnRYIC0gZHJhZ1JlY3QubGVmdDtcbiAgICAgIHRhcERpc3RhbmNlVG9wID0gdGFwRXZ0LmNsaWVudFkgLSBkcmFnUmVjdC50b3A7XG4gICAgICB0aGlzLl9sYXN0WCA9ICh0b3VjaCB8fCBldnQpLmNsaWVudFg7XG4gICAgICB0aGlzLl9sYXN0WSA9ICh0b3VjaCB8fCBldnQpLmNsaWVudFk7XG4gICAgICBkcmFnRWwuc3R5bGVbJ3dpbGwtY2hhbmdlJ10gPSAnYWxsJztcblxuICAgICAgZHJhZ1N0YXJ0Rm4gPSBmdW5jdGlvbiBkcmFnU3RhcnRGbigpIHtcbiAgICAgICAgcGx1Z2luRXZlbnQoJ2RlbGF5RW5kZWQnLCBfdGhpcywge1xuICAgICAgICAgIGV2dDogZXZ0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICAgICAgX3RoaXMuX29uRHJvcCgpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIERlbGF5ZWQgZHJhZyBoYXMgYmVlbiB0cmlnZ2VyZWRcbiAgICAgICAgLy8gd2UgY2FuIHJlLWVuYWJsZSB0aGUgZXZlbnRzOiB0b3VjaG1vdmUvbW91c2Vtb3ZlXG5cblxuICAgICAgICBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzKCk7XG5cbiAgICAgICAgaWYgKCFGaXJlRm94ICYmIF90aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICAgIGRyYWdFbC5kcmFnZ2FibGUgPSB0cnVlO1xuICAgICAgICB9IC8vIEJpbmQgdGhlIGV2ZW50czogZHJhZ3N0YXJ0L2RyYWdlbmRcblxuXG4gICAgICAgIF90aGlzLl90cmlnZ2VyRHJhZ1N0YXJ0KGV2dCwgdG91Y2gpOyAvLyBEcmFnIHN0YXJ0IGV2ZW50XG5cblxuICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgc29ydGFibGU6IF90aGlzLFxuICAgICAgICAgIG5hbWU6ICdjaG9vc2UnLFxuICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICB9KTsgLy8gQ2hvc2VuIGl0ZW1cblxuXG4gICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5jaG9zZW5DbGFzcywgdHJ1ZSk7XG4gICAgICB9OyAvLyBEaXNhYmxlIFwiZHJhZ2dhYmxlXCJcblxuXG4gICAgICBvcHRpb25zLmlnbm9yZS5zcGxpdCgnLCcpLmZvckVhY2goZnVuY3Rpb24gKGNyaXRlcmlhKSB7XG4gICAgICAgIGZpbmQoZHJhZ0VsLCBjcml0ZXJpYS50cmltKCksIF9kaXNhYmxlRHJhZ2dhYmxlKTtcbiAgICAgIH0pO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ2RyYWdvdmVyJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ21vdXNlbW92ZScsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaG1vdmUnLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCBfdGhpcy5fb25Ecm9wKTsgLy8gTWFrZSBkcmFnRWwgZHJhZ2dhYmxlIChtdXN0IGJlIGJlZm9yZSBkZWxheSBmb3IgRmlyZUZveClcblxuICAgICAgaWYgKEZpcmVGb3ggJiYgdGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnRvdWNoU3RhcnRUaHJlc2hvbGQgPSA0O1xuICAgICAgICBkcmFnRWwuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcGx1Z2luRXZlbnQoJ2RlbGF5U3RhcnQnLCB0aGlzLCB7XG4gICAgICAgIGV2dDogZXZ0XG4gICAgICB9KTsgLy8gRGVsYXkgaXMgaW1wb3NzaWJsZSBmb3IgbmF0aXZlIERuRCBpbiBFZGdlIG9yIElFXG5cbiAgICAgIGlmIChvcHRpb25zLmRlbGF5ICYmICghb3B0aW9ucy5kZWxheU9uVG91Y2hPbmx5IHx8IHRvdWNoKSAmJiAoIXRoaXMubmF0aXZlRHJhZ2dhYmxlIHx8ICEoRWRnZSB8fCBJRTExT3JMZXNzKSkpIHtcbiAgICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgICAgICB0aGlzLl9vbkRyb3AoKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBJZiB0aGUgdXNlciBtb3ZlcyB0aGUgcG9pbnRlciBvciBsZXQgZ28gdGhlIGNsaWNrIG9yIHRvdWNoXG4gICAgICAgIC8vIGJlZm9yZSB0aGUgZGVsYXkgaGFzIGJlZW4gcmVhY2hlZDpcbiAgICAgICAgLy8gZGlzYWJsZSB0aGUgZGVsYXllZCBkcmFnXG5cblxuICAgICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCBfdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNobW92ZScsIF90aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgICAgICBvcHRpb25zLnN1cHBvcnRQb2ludGVyICYmIG9uKG93bmVyRG9jdW1lbnQsICdwb2ludGVybW92ZScsIF90aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgICAgICBfdGhpcy5fZHJhZ1N0YXJ0VGltZXIgPSBzZXRUaW1lb3V0KGRyYWdTdGFydEZuLCBvcHRpb25zLmRlbGF5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYWdTdGFydEZuKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBfZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyOiBmdW5jdGlvbiBfZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKFxuICAvKiogVG91Y2hFdmVudHxQb2ludGVyRXZlbnQgKiovXG4gIGUpIHtcbiAgICB2YXIgdG91Y2ggPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlO1xuXG4gICAgaWYgKE1hdGgubWF4KE1hdGguYWJzKHRvdWNoLmNsaWVudFggLSB0aGlzLl9sYXN0WCksIE1hdGguYWJzKHRvdWNoLmNsaWVudFkgLSB0aGlzLl9sYXN0WSkpID49IE1hdGguZmxvb3IodGhpcy5vcHRpb25zLnRvdWNoU3RhcnRUaHJlc2hvbGQgLyAodGhpcy5uYXRpdmVEcmFnZ2FibGUgJiYgd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSkpKSB7XG4gICAgICB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcoKTtcbiAgICB9XG4gIH0sXG4gIF9kaXNhYmxlRGVsYXllZERyYWc6IGZ1bmN0aW9uIF9kaXNhYmxlRGVsYXllZERyYWcoKSB7XG4gICAgZHJhZ0VsICYmIF9kaXNhYmxlRHJhZ2dhYmxlKGRyYWdFbCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX2RyYWdTdGFydFRpbWVyKTtcblxuICAgIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpO1xuICB9LFxuICBfZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzOiBmdW5jdGlvbiBfZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzKCkge1xuICAgIHZhciBvd25lckRvY3VtZW50ID0gdGhpcy5lbC5vd25lckRvY3VtZW50O1xuICAgIG9mZihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgfSxcbiAgX3RyaWdnZXJEcmFnU3RhcnQ6IGZ1bmN0aW9uIF90cmlnZ2VyRHJhZ1N0YXJ0KFxuICAvKiogRXZlbnQgKi9cbiAgZXZ0LFxuICAvKiogVG91Y2ggKi9cbiAgdG91Y2gpIHtcbiAgICB0b3VjaCA9IHRvdWNoIHx8IGV2dC5wb2ludGVyVHlwZSA9PSAndG91Y2gnICYmIGV2dDtcblxuICAgIGlmICghdGhpcy5uYXRpdmVEcmFnZ2FibGUgfHwgdG91Y2gpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICAgIH0gZWxzZSBpZiAodG91Y2gpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb24oZHJhZ0VsLCAnZHJhZ2VuZCcsIHRoaXMpO1xuICAgICAgb24ocm9vdEVsLCAnZHJhZ3N0YXJ0JywgdGhpcy5fb25EcmFnU3RhcnQpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uKSB7XG4gICAgICAgIC8vIFRpbWVvdXQgbmVjY2Vzc2FyeSBmb3IgSUU5XG4gICAgICAgIF9uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZG9jdW1lbnQuc2VsZWN0aW9uLmVtcHR5KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge31cbiAgfSxcbiAgX2RyYWdTdGFydGVkOiBmdW5jdGlvbiBfZHJhZ1N0YXJ0ZWQoZmFsbGJhY2ssIGV2dCkge1xuXG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHJvb3RFbCAmJiBkcmFnRWwpIHtcbiAgICAgIHBsdWdpbkV2ZW50KCdkcmFnU3RhcnRlZCcsIHRoaXMsIHtcbiAgICAgICAgZXZ0OiBldnRcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdkcmFnb3ZlcicsIF9jaGVja091dHNpZGVUYXJnZXRFbCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zOyAvLyBBcHBseSBlZmZlY3RcblxuICAgICAgIWZhbGxiYWNrICYmIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5kcmFnQ2xhc3MsIGZhbHNlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5naG9zdENsYXNzLCB0cnVlKTtcbiAgICAgIFNvcnRhYmxlLmFjdGl2ZSA9IHRoaXM7XG4gICAgICBmYWxsYmFjayAmJiB0aGlzLl9hcHBlbmRHaG9zdCgpOyAvLyBEcmFnIHN0YXJ0IGV2ZW50XG5cbiAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgIG5hbWU6ICdzdGFydCcsXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX251bGxpbmcoKTtcbiAgICB9XG4gIH0sXG4gIF9lbXVsYXRlRHJhZ092ZXI6IGZ1bmN0aW9uIF9lbXVsYXRlRHJhZ092ZXIoKSB7XG4gICAgaWYgKHRvdWNoRXZ0KSB7XG4gICAgICB0aGlzLl9sYXN0WCA9IHRvdWNoRXZ0LmNsaWVudFg7XG4gICAgICB0aGlzLl9sYXN0WSA9IHRvdWNoRXZ0LmNsaWVudFk7XG5cbiAgICAgIF9oaWRlR2hvc3RGb3JUYXJnZXQoKTtcblxuICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQodG91Y2hFdnQuY2xpZW50WCwgdG91Y2hFdnQuY2xpZW50WSk7XG4gICAgICB2YXIgcGFyZW50ID0gdGFyZ2V0O1xuXG4gICAgICB3aGlsZSAodGFyZ2V0ICYmIHRhcmdldC5zaGFkb3dSb290KSB7XG4gICAgICAgIHRhcmdldCA9IHRhcmdldC5zaGFkb3dSb290LmVsZW1lbnRGcm9tUG9pbnQodG91Y2hFdnQuY2xpZW50WCwgdG91Y2hFdnQuY2xpZW50WSk7XG4gICAgICAgIGlmICh0YXJnZXQgPT09IHBhcmVudCkgYnJlYWs7XG4gICAgICAgIHBhcmVudCA9IHRhcmdldDtcbiAgICAgIH1cblxuICAgICAgZHJhZ0VsLnBhcmVudE5vZGVbZXhwYW5kb10uX2lzT3V0c2lkZVRoaXNFbCh0YXJnZXQpO1xuXG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAocGFyZW50W2V4cGFuZG9dKSB7XG4gICAgICAgICAgICB2YXIgaW5zZXJ0ZWQgPSB2b2lkIDA7XG4gICAgICAgICAgICBpbnNlcnRlZCA9IHBhcmVudFtleHBhbmRvXS5fb25EcmFnT3Zlcih7XG4gICAgICAgICAgICAgIGNsaWVudFg6IHRvdWNoRXZ0LmNsaWVudFgsXG4gICAgICAgICAgICAgIGNsaWVudFk6IHRvdWNoRXZ0LmNsaWVudFksXG4gICAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgICByb290RWw6IHBhcmVudFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChpbnNlcnRlZCAmJiAhdGhpcy5vcHRpb25zLmRyYWdvdmVyQnViYmxlKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRhcmdldCA9IHBhcmVudDsgLy8gc3RvcmUgbGFzdCBlbGVtZW50XG4gICAgICAgIH1cbiAgICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuICAgICAgICB3aGlsZSAocGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGUpO1xuICAgICAgfVxuXG4gICAgICBfdW5oaWRlR2hvc3RGb3JUYXJnZXQoKTtcbiAgICB9XG4gIH0sXG4gIF9vblRvdWNoTW92ZTogZnVuY3Rpb24gX29uVG91Y2hNb3ZlKFxuICAvKipUb3VjaEV2ZW50Ki9cbiAgZXZ0KSB7XG4gICAgaWYgKHRhcEV2dCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgZmFsbGJhY2tUb2xlcmFuY2UgPSBvcHRpb25zLmZhbGxiYWNrVG9sZXJhbmNlLFxuICAgICAgICAgIGZhbGxiYWNrT2Zmc2V0ID0gb3B0aW9ucy5mYWxsYmFja09mZnNldCxcbiAgICAgICAgICB0b3VjaCA9IGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQsXG4gICAgICAgICAgZ2hvc3RNYXRyaXggPSBnaG9zdEVsICYmIG1hdHJpeChnaG9zdEVsLCB0cnVlKSxcbiAgICAgICAgICBzY2FsZVggPSBnaG9zdEVsICYmIGdob3N0TWF0cml4ICYmIGdob3N0TWF0cml4LmEsXG4gICAgICAgICAgc2NhbGVZID0gZ2hvc3RFbCAmJiBnaG9zdE1hdHJpeCAmJiBnaG9zdE1hdHJpeC5kLFxuICAgICAgICAgIHJlbGF0aXZlU2Nyb2xsT2Zmc2V0ID0gUG9zaXRpb25HaG9zdEFic29sdXRlbHkgJiYgZ2hvc3RSZWxhdGl2ZVBhcmVudCAmJiBnZXRSZWxhdGl2ZVNjcm9sbE9mZnNldChnaG9zdFJlbGF0aXZlUGFyZW50KSxcbiAgICAgICAgICBkeCA9ICh0b3VjaC5jbGllbnRYIC0gdGFwRXZ0LmNsaWVudFggKyBmYWxsYmFja09mZnNldC54KSAvIChzY2FsZVggfHwgMSkgKyAocmVsYXRpdmVTY3JvbGxPZmZzZXQgPyByZWxhdGl2ZVNjcm9sbE9mZnNldFswXSAtIGdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsWzBdIDogMCkgLyAoc2NhbGVYIHx8IDEpLFxuICAgICAgICAgIGR5ID0gKHRvdWNoLmNsaWVudFkgLSB0YXBFdnQuY2xpZW50WSArIGZhbGxiYWNrT2Zmc2V0LnkpIC8gKHNjYWxlWSB8fCAxKSArIChyZWxhdGl2ZVNjcm9sbE9mZnNldCA/IHJlbGF0aXZlU2Nyb2xsT2Zmc2V0WzFdIC0gZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGxbMV0gOiAwKSAvIChzY2FsZVkgfHwgMSk7IC8vIG9ubHkgc2V0IHRoZSBzdGF0dXMgdG8gZHJhZ2dpbmcsIHdoZW4gd2UgYXJlIGFjdHVhbGx5IGRyYWdnaW5nXG5cbiAgICAgIGlmICghU29ydGFibGUuYWN0aXZlICYmICFhd2FpdGluZ0RyYWdTdGFydGVkKSB7XG4gICAgICAgIGlmIChmYWxsYmFja1RvbGVyYW5jZSAmJiBNYXRoLm1heChNYXRoLmFicyh0b3VjaC5jbGllbnRYIC0gdGhpcy5fbGFzdFgpLCBNYXRoLmFicyh0b3VjaC5jbGllbnRZIC0gdGhpcy5fbGFzdFkpKSA8IGZhbGxiYWNrVG9sZXJhbmNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb25EcmFnU3RhcnQoZXZ0LCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGdob3N0RWwpIHtcbiAgICAgICAgaWYgKGdob3N0TWF0cml4KSB7XG4gICAgICAgICAgZ2hvc3RNYXRyaXguZSArPSBkeCAtIChsYXN0RHggfHwgMCk7XG4gICAgICAgICAgZ2hvc3RNYXRyaXguZiArPSBkeSAtIChsYXN0RHkgfHwgMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2hvc3RNYXRyaXggPSB7XG4gICAgICAgICAgICBhOiAxLFxuICAgICAgICAgICAgYjogMCxcbiAgICAgICAgICAgIGM6IDAsXG4gICAgICAgICAgICBkOiAxLFxuICAgICAgICAgICAgZTogZHgsXG4gICAgICAgICAgICBmOiBkeVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3NzTWF0cml4ID0gXCJtYXRyaXgoXCIuY29uY2F0KGdob3N0TWF0cml4LmEsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguYiwgXCIsXCIpLmNvbmNhdChnaG9zdE1hdHJpeC5jLCBcIixcIikuY29uY2F0KGdob3N0TWF0cml4LmQsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguZSwgXCIsXCIpLmNvbmNhdChnaG9zdE1hdHJpeC5mLCBcIilcIik7XG4gICAgICAgIGNzcyhnaG9zdEVsLCAnd2Via2l0VHJhbnNmb3JtJywgY3NzTWF0cml4KTtcbiAgICAgICAgY3NzKGdob3N0RWwsICdtb3pUcmFuc2Zvcm0nLCBjc3NNYXRyaXgpO1xuICAgICAgICBjc3MoZ2hvc3RFbCwgJ21zVHJhbnNmb3JtJywgY3NzTWF0cml4KTtcbiAgICAgICAgY3NzKGdob3N0RWwsICd0cmFuc2Zvcm0nLCBjc3NNYXRyaXgpO1xuICAgICAgICBsYXN0RHggPSBkeDtcbiAgICAgICAgbGFzdER5ID0gZHk7XG4gICAgICAgIHRvdWNoRXZ0ID0gdG91Y2g7XG4gICAgICB9XG5cbiAgICAgIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSxcbiAgX2FwcGVuZEdob3N0OiBmdW5jdGlvbiBfYXBwZW5kR2hvc3QoKSB7XG4gICAgLy8gQnVnIGlmIHVzaW5nIHNjYWxlKCk6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI2MzcwNThcbiAgICAvLyBOb3QgYmVpbmcgYWRqdXN0ZWQgZm9yXG4gICAgaWYgKCFnaG9zdEVsKSB7XG4gICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5vcHRpb25zLmZhbGxiYWNrT25Cb2R5ID8gZG9jdW1lbnQuYm9keSA6IHJvb3RFbCxcbiAgICAgICAgICByZWN0ID0gZ2V0UmVjdChkcmFnRWwsIHRydWUsIFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5LCB0cnVlLCBjb250YWluZXIpLFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7IC8vIFBvc2l0aW9uIGFic29sdXRlbHlcblxuICAgICAgaWYgKFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5KSB7XG4gICAgICAgIC8vIEdldCByZWxhdGl2ZWx5IHBvc2l0aW9uZWQgcGFyZW50XG4gICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnQgPSBjb250YWluZXI7XG5cbiAgICAgICAgd2hpbGUgKGNzcyhnaG9zdFJlbGF0aXZlUGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycgJiYgY3NzKGdob3N0UmVsYXRpdmVQYXJlbnQsICd0cmFuc2Zvcm0nKSA9PT0gJ25vbmUnICYmIGdob3N0UmVsYXRpdmVQYXJlbnQgIT09IGRvY3VtZW50KSB7XG4gICAgICAgICAgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGdob3N0UmVsYXRpdmVQYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnaG9zdFJlbGF0aXZlUGFyZW50ICE9PSBkb2N1bWVudC5ib2R5ICYmIGdob3N0UmVsYXRpdmVQYXJlbnQgIT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgIGlmIChnaG9zdFJlbGF0aXZlUGFyZW50ID09PSBkb2N1bWVudCkgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgICAgICAgICByZWN0LnRvcCArPSBnaG9zdFJlbGF0aXZlUGFyZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICByZWN0LmxlZnQgKz0gZ2hvc3RSZWxhdGl2ZVBhcmVudC5zY3JvbGxMZWZ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnQgPSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICBnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbCA9IGdldFJlbGF0aXZlU2Nyb2xsT2Zmc2V0KGdob3N0UmVsYXRpdmVQYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICBnaG9zdEVsID0gZHJhZ0VsLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuICAgICAgdG9nZ2xlQ2xhc3MoZ2hvc3RFbCwgb3B0aW9ucy5mYWxsYmFja0NsYXNzLCB0cnVlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZHJhZ0NsYXNzLCB0cnVlKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNpdGlvbicsICcnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtJywgJycpO1xuICAgICAgY3NzKGdob3N0RWwsICdib3gtc2l6aW5nJywgJ2JvcmRlci1ib3gnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnbWFyZ2luJywgMCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3RvcCcsIHJlY3QudG9wKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnbGVmdCcsIHJlY3QubGVmdCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3dpZHRoJywgcmVjdC53aWR0aCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ2hlaWdodCcsIHJlY3QuaGVpZ2h0KTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnb3BhY2l0eScsICcwLjgnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAncG9zaXRpb24nLCBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSA/ICdhYnNvbHV0ZScgOiAnZml4ZWQnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnekluZGV4JywgJzEwMDAwMCcpO1xuICAgICAgY3NzKGdob3N0RWwsICdwb2ludGVyRXZlbnRzJywgJ25vbmUnKTtcbiAgICAgIFNvcnRhYmxlLmdob3N0ID0gZ2hvc3RFbDtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChnaG9zdEVsKTsgLy8gU2V0IHRyYW5zZm9ybS1vcmlnaW5cblxuICAgICAgY3NzKGdob3N0RWwsICd0cmFuc2Zvcm0tb3JpZ2luJywgdGFwRGlzdGFuY2VMZWZ0IC8gcGFyc2VJbnQoZ2hvc3RFbC5zdHlsZS53aWR0aCkgKiAxMDAgKyAnJSAnICsgdGFwRGlzdGFuY2VUb3AgLyBwYXJzZUludChnaG9zdEVsLnN0eWxlLmhlaWdodCkgKiAxMDAgKyAnJScpO1xuICAgIH1cbiAgfSxcbiAgX29uRHJhZ1N0YXJ0OiBmdW5jdGlvbiBfb25EcmFnU3RhcnQoXG4gIC8qKkV2ZW50Ki9cbiAgZXZ0LFxuICAvKipib29sZWFuKi9cbiAgZmFsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGRhdGFUcmFuc2ZlciA9IGV2dC5kYXRhVHJhbnNmZXI7XG4gICAgdmFyIG9wdGlvbnMgPSBfdGhpcy5vcHRpb25zO1xuICAgIHBsdWdpbkV2ZW50KCdkcmFnU3RhcnQnLCB0aGlzLCB7XG4gICAgICBldnQ6IGV2dFxuICAgIH0pO1xuXG4gICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgIHRoaXMuX29uRHJvcCgpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGx1Z2luRXZlbnQoJ3NldHVwQ2xvbmUnLCB0aGlzKTtcblxuICAgIGlmICghU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgY2xvbmVFbCA9IGNsb25lKGRyYWdFbCk7XG4gICAgICBjbG9uZUVsLmRyYWdnYWJsZSA9IGZhbHNlO1xuICAgICAgY2xvbmVFbC5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICcnO1xuXG4gICAgICB0aGlzLl9oaWRlQ2xvbmUoKTtcblxuICAgICAgdG9nZ2xlQ2xhc3MoY2xvbmVFbCwgdGhpcy5vcHRpb25zLmNob3NlbkNsYXNzLCBmYWxzZSk7XG4gICAgICBTb3J0YWJsZS5jbG9uZSA9IGNsb25lRWw7XG4gICAgfSAvLyAjMTE0MzogSUZyYW1lIHN1cHBvcnQgd29ya2Fyb3VuZFxuXG5cbiAgICBfdGhpcy5jbG9uZUlkID0gX25leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHBsdWdpbkV2ZW50KCdjbG9uZScsIF90aGlzKTtcbiAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSByZXR1cm47XG5cbiAgICAgIGlmICghX3RoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSkge1xuICAgICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGNsb25lRWwsIGRyYWdFbCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl9oaWRlQ2xvbmUoKTtcblxuICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICBzb3J0YWJsZTogX3RoaXMsXG4gICAgICAgIG5hbWU6ICdjbG9uZSdcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgICFmYWxsYmFjayAmJiB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuZHJhZ0NsYXNzLCB0cnVlKTsgLy8gU2V0IHByb3BlciBkcm9wIGV2ZW50c1xuXG4gICAgaWYgKGZhbGxiYWNrKSB7XG4gICAgICBpZ25vcmVOZXh0Q2xpY2sgPSB0cnVlO1xuICAgICAgX3RoaXMuX2xvb3BJZCA9IHNldEludGVydmFsKF90aGlzLl9lbXVsYXRlRHJhZ092ZXIsIDUwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVW5kbyB3aGF0IHdhcyBzZXQgaW4gX3ByZXBhcmVEcmFnU3RhcnQgYmVmb3JlIGRyYWcgc3RhcnRlZFxuICAgICAgb2ZmKGRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2hlbmQnLCBfdGhpcy5fb25Ecm9wKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgX3RoaXMuX29uRHJvcCk7XG5cbiAgICAgIGlmIChkYXRhVHJhbnNmZXIpIHtcbiAgICAgICAgZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSAnbW92ZSc7XG4gICAgICAgIG9wdGlvbnMuc2V0RGF0YSAmJiBvcHRpb25zLnNldERhdGEuY2FsbChfdGhpcywgZGF0YVRyYW5zZmVyLCBkcmFnRWwpO1xuICAgICAgfVxuXG4gICAgICBvbihkb2N1bWVudCwgJ2Ryb3AnLCBfdGhpcyk7IC8vICMxMjc2IGZpeDpcblxuICAgICAgY3NzKGRyYWdFbCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVaKDApJyk7XG4gICAgfVxuXG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IHRydWU7XG4gICAgX3RoaXMuX2RyYWdTdGFydElkID0gX25leHRUaWNrKF90aGlzLl9kcmFnU3RhcnRlZC5iaW5kKF90aGlzLCBmYWxsYmFjaywgZXZ0KSk7XG4gICAgb24oZG9jdW1lbnQsICdzZWxlY3RzdGFydCcsIF90aGlzKTtcbiAgICBtb3ZlZCA9IHRydWU7XG5cbiAgICBpZiAoU2FmYXJpKSB7XG4gICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ3VzZXItc2VsZWN0JywgJ25vbmUnKTtcbiAgICB9XG4gIH0sXG4gIC8vIFJldHVybnMgdHJ1ZSAtIGlmIG5vIGZ1cnRoZXIgYWN0aW9uIGlzIG5lZWRlZCAoZWl0aGVyIGluc2VydGVkIG9yIGFub3RoZXIgY29uZGl0aW9uKVxuICBfb25EcmFnT3ZlcjogZnVuY3Rpb24gX29uRHJhZ092ZXIoXG4gIC8qKkV2ZW50Ki9cbiAgZXZ0KSB7XG4gICAgdmFyIGVsID0gdGhpcy5lbCxcbiAgICAgICAgdGFyZ2V0ID0gZXZ0LnRhcmdldCxcbiAgICAgICAgZHJhZ1JlY3QsXG4gICAgICAgIHRhcmdldFJlY3QsXG4gICAgICAgIHJldmVydCxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgZ3JvdXAgPSBvcHRpb25zLmdyb3VwLFxuICAgICAgICBhY3RpdmVTb3J0YWJsZSA9IFNvcnRhYmxlLmFjdGl2ZSxcbiAgICAgICAgaXNPd25lciA9IGFjdGl2ZUdyb3VwID09PSBncm91cCxcbiAgICAgICAgY2FuU29ydCA9IG9wdGlvbnMuc29ydCxcbiAgICAgICAgZnJvbVNvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgYWN0aXZlU29ydGFibGUsXG4gICAgICAgIHZlcnRpY2FsLFxuICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGNvbXBsZXRlZEZpcmVkID0gZmFsc2U7XG5cbiAgICBpZiAoX3NpbGVudCkgcmV0dXJuO1xuXG4gICAgZnVuY3Rpb24gZHJhZ092ZXJFdmVudChuYW1lLCBleHRyYSkge1xuICAgICAgcGx1Z2luRXZlbnQobmFtZSwgX3RoaXMsIF9vYmplY3RTcHJlYWQoe1xuICAgICAgICBldnQ6IGV2dCxcbiAgICAgICAgaXNPd25lcjogaXNPd25lcixcbiAgICAgICAgYXhpczogdmVydGljYWwgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnLFxuICAgICAgICByZXZlcnQ6IHJldmVydCxcbiAgICAgICAgZHJhZ1JlY3Q6IGRyYWdSZWN0LFxuICAgICAgICB0YXJnZXRSZWN0OiB0YXJnZXRSZWN0LFxuICAgICAgICBjYW5Tb3J0OiBjYW5Tb3J0LFxuICAgICAgICBmcm9tU29ydGFibGU6IGZyb21Tb3J0YWJsZSxcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgIGNvbXBsZXRlZDogY29tcGxldGVkLFxuICAgICAgICBvbk1vdmU6IGZ1bmN0aW9uIG9uTW92ZSh0YXJnZXQsIGFmdGVyKSB7XG4gICAgICAgICAgcmV0dXJuIF9vbk1vdmUocm9vdEVsLCBlbCwgZHJhZ0VsLCBkcmFnUmVjdCwgdGFyZ2V0LCBnZXRSZWN0KHRhcmdldCksIGV2dCwgYWZ0ZXIpO1xuICAgICAgICB9LFxuICAgICAgICBjaGFuZ2VkOiBjaGFuZ2VkXG4gICAgICB9LCBleHRyYSkpO1xuICAgIH0gLy8gQ2FwdHVyZSBhbmltYXRpb24gc3RhdGVcblxuXG4gICAgZnVuY3Rpb24gY2FwdHVyZSgpIHtcbiAgICAgIGRyYWdPdmVyRXZlbnQoJ2RyYWdPdmVyQW5pbWF0aW9uQ2FwdHVyZScpO1xuXG4gICAgICBfdGhpcy5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcblxuICAgICAgaWYgKF90aGlzICE9PSBmcm9tU29ydGFibGUpIHtcbiAgICAgICAgZnJvbVNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgICAgfVxuICAgIH0gLy8gUmV0dXJuIGludm9jYXRpb24gd2hlbiBkcmFnRWwgaXMgaW5zZXJ0ZWQgKG9yIGNvbXBsZXRlZClcblxuXG4gICAgZnVuY3Rpb24gY29tcGxldGVkKGluc2VydGlvbikge1xuICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJDb21wbGV0ZWQnLCB7XG4gICAgICAgIGluc2VydGlvbjogaW5zZXJ0aW9uXG4gICAgICB9KTtcblxuICAgICAgaWYgKGluc2VydGlvbikge1xuICAgICAgICAvLyBDbG9uZXMgbXVzdCBiZSBoaWRkZW4gYmVmb3JlIGZvbGRpbmcgYW5pbWF0aW9uIHRvIGNhcHR1cmUgZHJhZ1JlY3RBYnNvbHV0ZSBwcm9wZXJseVxuICAgICAgICBpZiAoaXNPd25lcikge1xuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9oaWRlQ2xvbmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY3RpdmVTb3J0YWJsZS5fc2hvd0Nsb25lKF90aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfdGhpcyAhPT0gZnJvbVNvcnRhYmxlKSB7XG4gICAgICAgICAgLy8gU2V0IGdob3N0IGNsYXNzIHRvIG5ldyBzb3J0YWJsZSdzIGdob3N0IGNsYXNzXG4gICAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBwdXRTb3J0YWJsZSA/IHB1dFNvcnRhYmxlLm9wdGlvbnMuZ2hvc3RDbGFzcyA6IGFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuICAgICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5naG9zdENsYXNzLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwdXRTb3J0YWJsZSAhPT0gX3RoaXMgJiYgX3RoaXMgIT09IFNvcnRhYmxlLmFjdGl2ZSkge1xuICAgICAgICAgIHB1dFNvcnRhYmxlID0gX3RoaXM7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMgPT09IFNvcnRhYmxlLmFjdGl2ZSAmJiBwdXRTb3J0YWJsZSkge1xuICAgICAgICAgIHB1dFNvcnRhYmxlID0gbnVsbDtcbiAgICAgICAgfSAvLyBBbmltYXRpb25cblxuXG4gICAgICAgIGlmIChmcm9tU29ydGFibGUgPT09IF90aGlzKSB7XG4gICAgICAgICAgX3RoaXMuX2lnbm9yZVdoaWxlQW5pbWF0aW5nID0gdGFyZ2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuYW5pbWF0ZUFsbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJBbmltYXRpb25Db21wbGV0ZScpO1xuICAgICAgICAgIF90aGlzLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9IG51bGw7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChfdGhpcyAhPT0gZnJvbVNvcnRhYmxlKSB7XG4gICAgICAgICAgZnJvbVNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgICBmcm9tU29ydGFibGUuX2lnbm9yZVdoaWxlQW5pbWF0aW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSAvLyBOdWxsIGxhc3RUYXJnZXQgaWYgaXQgaXMgbm90IGluc2lkZSBhIHByZXZpb3VzbHkgc3dhcHBlZCBlbGVtZW50XG5cblxuICAgICAgaWYgKHRhcmdldCA9PT0gZHJhZ0VsICYmICFkcmFnRWwuYW5pbWF0ZWQgfHwgdGFyZ2V0ID09PSBlbCAmJiAhdGFyZ2V0LmFuaW1hdGVkKSB7XG4gICAgICAgIGxhc3RUYXJnZXQgPSBudWxsO1xuICAgICAgfSAvLyBubyBidWJibGluZyBhbmQgbm90IGZhbGxiYWNrXG5cblxuICAgICAgaWYgKCFvcHRpb25zLmRyYWdvdmVyQnViYmxlICYmICFldnQucm9vdEVsICYmIHRhcmdldCAhPT0gZG9jdW1lbnQpIHtcbiAgICAgICAgZHJhZ0VsLnBhcmVudE5vZGVbZXhwYW5kb10uX2lzT3V0c2lkZVRoaXNFbChldnQudGFyZ2V0KTsgLy8gRG8gbm90IGRldGVjdCBmb3IgZW1wdHkgaW5zZXJ0IGlmIGFscmVhZHkgaW5zZXJ0ZWRcblxuXG4gICAgICAgICFpbnNlcnRpb24gJiYgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQoZXZ0KTtcbiAgICAgIH1cblxuICAgICAgIW9wdGlvbnMuZHJhZ292ZXJCdWJibGUgJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbiAmJiBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm4gY29tcGxldGVkRmlyZWQgPSB0cnVlO1xuICAgIH0gLy8gQ2FsbCB3aGVuIGRyYWdFbCBoYXMgYmVlbiBpbnNlcnRlZFxuXG5cbiAgICBmdW5jdGlvbiBjaGFuZ2VkKCkge1xuICAgICAgbmV3SW5kZXggPSBpbmRleChkcmFnRWwpO1xuICAgICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBpbmRleChkcmFnRWwsIG9wdGlvbnMuZHJhZ2dhYmxlKTtcblxuICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICBzb3J0YWJsZTogX3RoaXMsXG4gICAgICAgIG5hbWU6ICdjaGFuZ2UnLFxuICAgICAgICB0b0VsOiBlbCxcbiAgICAgICAgbmV3SW5kZXg6IG5ld0luZGV4LFxuICAgICAgICBuZXdEcmFnZ2FibGVJbmRleDogbmV3RHJhZ2dhYmxlSW5kZXgsXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGV2dC5wcmV2ZW50RGVmYXVsdCAhPT0gdm9pZCAwKSB7XG4gICAgICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICB0YXJnZXQgPSBjbG9zZXN0KHRhcmdldCwgb3B0aW9ucy5kcmFnZ2FibGUsIGVsLCB0cnVlKTtcbiAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlcicpO1xuICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSByZXR1cm4gY29tcGxldGVkRmlyZWQ7XG5cbiAgICBpZiAoZHJhZ0VsLmNvbnRhaW5zKGV2dC50YXJnZXQpIHx8IHRhcmdldC5hbmltYXRlZCAmJiB0YXJnZXQuYW5pbWF0aW5nWCAmJiB0YXJnZXQuYW5pbWF0aW5nWSB8fCBfdGhpcy5faWdub3JlV2hpbGVBbmltYXRpbmcgPT09IHRhcmdldCkge1xuICAgICAgcmV0dXJuIGNvbXBsZXRlZChmYWxzZSk7XG4gICAgfVxuXG4gICAgaWdub3JlTmV4dENsaWNrID0gZmFsc2U7XG5cbiAgICBpZiAoYWN0aXZlU29ydGFibGUgJiYgIW9wdGlvbnMuZGlzYWJsZWQgJiYgKGlzT3duZXIgPyBjYW5Tb3J0IHx8IChyZXZlcnQgPSAhcm9vdEVsLmNvbnRhaW5zKGRyYWdFbCkpIC8vIFJldmVydGluZyBpdGVtIGludG8gdGhlIG9yaWdpbmFsIGxpc3RcbiAgICA6IHB1dFNvcnRhYmxlID09PSB0aGlzIHx8ICh0aGlzLmxhc3RQdXRNb2RlID0gYWN0aXZlR3JvdXAuY2hlY2tQdWxsKHRoaXMsIGFjdGl2ZVNvcnRhYmxlLCBkcmFnRWwsIGV2dCkpICYmIGdyb3VwLmNoZWNrUHV0KHRoaXMsIGFjdGl2ZVNvcnRhYmxlLCBkcmFnRWwsIGV2dCkpKSB7XG4gICAgICB2ZXJ0aWNhbCA9IHRoaXMuX2dldERpcmVjdGlvbihldnQsIHRhcmdldCkgPT09ICd2ZXJ0aWNhbCc7XG4gICAgICBkcmFnUmVjdCA9IGdldFJlY3QoZHJhZ0VsKTtcbiAgICAgIGRyYWdPdmVyRXZlbnQoJ2RyYWdPdmVyVmFsaWQnKTtcbiAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSByZXR1cm4gY29tcGxldGVkRmlyZWQ7XG5cbiAgICAgIGlmIChyZXZlcnQpIHtcbiAgICAgICAgcGFyZW50RWwgPSByb290RWw7IC8vIGFjdHVhbGl6YXRpb25cblxuICAgICAgICBjYXB0dXJlKCk7XG5cbiAgICAgICAgdGhpcy5faGlkZUNsb25lKCk7XG5cbiAgICAgICAgZHJhZ092ZXJFdmVudCgncmV2ZXJ0Jyk7XG5cbiAgICAgICAgaWYgKCFTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICAgICAgaWYgKG5leHRFbCkge1xuICAgICAgICAgICAgcm9vdEVsLmluc2VydEJlZm9yZShkcmFnRWwsIG5leHRFbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChkcmFnRWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21wbGV0ZWQodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbExhc3RDaGlsZCA9IGxhc3RDaGlsZChlbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuXG4gICAgICBpZiAoIWVsTGFzdENoaWxkIHx8IF9naG9zdElzTGFzdChldnQsIHZlcnRpY2FsLCB0aGlzKSAmJiAhZWxMYXN0Q2hpbGQuYW5pbWF0ZWQpIHtcbiAgICAgICAgLy8gSWYgYWxyZWFkeSBhdCBlbmQgb2YgbGlzdDogRG8gbm90IGluc2VydFxuICAgICAgICBpZiAoZWxMYXN0Q2hpbGQgPT09IGRyYWdFbCkge1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICB9IC8vIGFzc2lnbiB0YXJnZXQgb25seSBpZiBjb25kaXRpb24gaXMgdHJ1ZVxuXG5cbiAgICAgICAgaWYgKGVsTGFzdENoaWxkICYmIGVsID09PSBldnQudGFyZ2V0KSB7XG4gICAgICAgICAgdGFyZ2V0ID0gZWxMYXN0Q2hpbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgdGFyZ2V0UmVjdCA9IGdldFJlY3QodGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfb25Nb3ZlKHJvb3RFbCwgZWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldCwgdGFyZ2V0UmVjdCwgZXZ0LCAhIXRhcmdldCkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgY2FwdHVyZSgpO1xuICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGRyYWdFbCk7XG4gICAgICAgICAgcGFyZW50RWwgPSBlbDsgLy8gYWN0dWFsaXphdGlvblxuXG4gICAgICAgICAgY2hhbmdlZCgpO1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LnBhcmVudE5vZGUgPT09IGVsKSB7XG4gICAgICAgIHRhcmdldFJlY3QgPSBnZXRSZWN0KHRhcmdldCk7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSAwLFxuICAgICAgICAgICAgdGFyZ2V0QmVmb3JlRmlyc3RTd2FwLFxuICAgICAgICAgICAgZGlmZmVyZW50TGV2ZWwgPSBkcmFnRWwucGFyZW50Tm9kZSAhPT0gZWwsXG4gICAgICAgICAgICBkaWZmZXJlbnRSb3dDb2wgPSAhX2RyYWdFbEluUm93Q29sdW1uKGRyYWdFbC5hbmltYXRlZCAmJiBkcmFnRWwudG9SZWN0IHx8IGRyYWdSZWN0LCB0YXJnZXQuYW5pbWF0ZWQgJiYgdGFyZ2V0LnRvUmVjdCB8fCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCksXG4gICAgICAgICAgICBzaWRlMSA9IHZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCcsXG4gICAgICAgICAgICBzY3JvbGxlZFBhc3RUb3AgPSBpc1Njcm9sbGVkUGFzdCh0YXJnZXQsICd0b3AnLCAndG9wJykgfHwgaXNTY3JvbGxlZFBhc3QoZHJhZ0VsLCAndG9wJywgJ3RvcCcpLFxuICAgICAgICAgICAgc2Nyb2xsQmVmb3JlID0gc2Nyb2xsZWRQYXN0VG9wID8gc2Nyb2xsZWRQYXN0VG9wLnNjcm9sbFRvcCA6IHZvaWQgMDtcblxuICAgICAgICBpZiAobGFzdFRhcmdldCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgdGFyZ2V0QmVmb3JlRmlyc3RTd2FwID0gdGFyZ2V0UmVjdFtzaWRlMV07XG4gICAgICAgICAgcGFzdEZpcnN0SW52ZXJ0VGhyZXNoID0gZmFsc2U7XG4gICAgICAgICAgaXNDaXJjdW1zdGFudGlhbEludmVydCA9ICFkaWZmZXJlbnRSb3dDb2wgJiYgb3B0aW9ucy5pbnZlcnRTd2FwIHx8IGRpZmZlcmVudExldmVsO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlyZWN0aW9uID0gX2dldFN3YXBEaXJlY3Rpb24oZXZ0LCB0YXJnZXQsIHRhcmdldFJlY3QsIHZlcnRpY2FsLCBkaWZmZXJlbnRSb3dDb2wgPyAxIDogb3B0aW9ucy5zd2FwVGhyZXNob2xkLCBvcHRpb25zLmludmVydGVkU3dhcFRocmVzaG9sZCA9PSBudWxsID8gb3B0aW9ucy5zd2FwVGhyZXNob2xkIDogb3B0aW9ucy5pbnZlcnRlZFN3YXBUaHJlc2hvbGQsIGlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQsIGxhc3RUYXJnZXQgPT09IHRhcmdldCk7XG4gICAgICAgIHZhciBzaWJsaW5nO1xuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gIT09IDApIHtcbiAgICAgICAgICAvLyBDaGVjayBpZiB0YXJnZXQgaXMgYmVzaWRlIGRyYWdFbCBpbiByZXNwZWN0aXZlIGRpcmVjdGlvbiAoaWdub3JpbmcgaGlkZGVuIGVsZW1lbnRzKVxuICAgICAgICAgIHZhciBkcmFnSW5kZXggPSBpbmRleChkcmFnRWwpO1xuXG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgZHJhZ0luZGV4IC09IGRpcmVjdGlvbjtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnRFbC5jaGlsZHJlbltkcmFnSW5kZXhdO1xuICAgICAgICAgIH0gd2hpbGUgKHNpYmxpbmcgJiYgKGNzcyhzaWJsaW5nLCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgc2libGluZyA9PT0gZ2hvc3RFbCkpO1xuICAgICAgICB9IC8vIElmIGRyYWdFbCBpcyBhbHJlYWR5IGJlc2lkZSB0YXJnZXQ6IERvIG5vdCBpbnNlcnRcblxuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09IDAgfHwgc2libGluZyA9PT0gdGFyZ2V0KSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZChmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0VGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICBsYXN0RGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgICAgICB2YXIgbmV4dFNpYmxpbmcgPSB0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLFxuICAgICAgICAgICAgYWZ0ZXIgPSBmYWxzZTtcbiAgICAgICAgYWZ0ZXIgPSBkaXJlY3Rpb24gPT09IDE7XG5cbiAgICAgICAgdmFyIG1vdmVWZWN0b3IgPSBfb25Nb3ZlKHJvb3RFbCwgZWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldCwgdGFyZ2V0UmVjdCwgZXZ0LCBhZnRlcik7XG5cbiAgICAgICAgaWYgKG1vdmVWZWN0b3IgIT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKG1vdmVWZWN0b3IgPT09IDEgfHwgbW92ZVZlY3RvciA9PT0gLTEpIHtcbiAgICAgICAgICAgIGFmdGVyID0gbW92ZVZlY3RvciA9PT0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfc2lsZW50ID0gdHJ1ZTtcbiAgICAgICAgICBzZXRUaW1lb3V0KF91bnNpbGVudCwgMzApO1xuICAgICAgICAgIGNhcHR1cmUoKTtcblxuICAgICAgICAgIGlmIChhZnRlciAmJiAhbmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGRyYWdFbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkcmFnRWwsIGFmdGVyID8gbmV4dFNpYmxpbmcgOiB0YXJnZXQpO1xuICAgICAgICAgIH0gLy8gVW5kbyBjaHJvbWUncyBzY3JvbGwgYWRqdXN0bWVudCAoaGFzIG5vIGVmZmVjdCBvbiBvdGhlciBicm93c2VycylcblxuXG4gICAgICAgICAgaWYgKHNjcm9sbGVkUGFzdFRvcCkge1xuICAgICAgICAgICAgc2Nyb2xsQnkoc2Nyb2xsZWRQYXN0VG9wLCAwLCBzY3JvbGxCZWZvcmUgLSBzY3JvbGxlZFBhc3RUb3Auc2Nyb2xsVG9wKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJlbnRFbCA9IGRyYWdFbC5wYXJlbnROb2RlOyAvLyBhY3R1YWxpemF0aW9uXG4gICAgICAgICAgLy8gbXVzdCBiZSBkb25lIGJlZm9yZSBhbmltYXRpb25cblxuICAgICAgICAgIGlmICh0YXJnZXRCZWZvcmVGaXJzdFN3YXAgIT09IHVuZGVmaW5lZCAmJiAhaXNDaXJjdW1zdGFudGlhbEludmVydCkge1xuICAgICAgICAgICAgdGFyZ2V0TW92ZURpc3RhbmNlID0gTWF0aC5hYnModGFyZ2V0QmVmb3JlRmlyc3RTd2FwIC0gZ2V0UmVjdCh0YXJnZXQpW3NpZGUxXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZCgpO1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGVsLmNvbnRhaW5zKGRyYWdFbCkpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBsZXRlZChmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBfaWdub3JlV2hpbGVBbmltYXRpbmc6IG51bGwsXG4gIF9vZmZNb3ZlRXZlbnRzOiBmdW5jdGlvbiBfb2ZmTW92ZUV2ZW50cygpIHtcbiAgICBvZmYoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgb2ZmKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuICAgIG9mZihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuICAgIG9mZihkb2N1bWVudCwgJ2RyYWdvdmVyJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgIG9mZihkb2N1bWVudCwgJ21vdXNlbW92ZScsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgICBvZmYoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gIH0sXG4gIF9vZmZVcEV2ZW50czogZnVuY3Rpb24gX29mZlVwRXZlbnRzKCkge1xuICAgIHZhciBvd25lckRvY3VtZW50ID0gdGhpcy5lbC5vd25lckRvY3VtZW50O1xuICAgIG9mZihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIHRoaXMuX29uRHJvcCk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX29uRHJvcCk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdwb2ludGVydXAnLCB0aGlzLl9vbkRyb3ApO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCB0aGlzLl9vbkRyb3ApO1xuICAgIG9mZihkb2N1bWVudCwgJ3NlbGVjdHN0YXJ0JywgdGhpcyk7XG4gIH0sXG4gIF9vbkRyb3A6IGZ1bmN0aW9uIF9vbkRyb3AoXG4gIC8qKkV2ZW50Ki9cbiAgZXZ0KSB7XG4gICAgdmFyIGVsID0gdGhpcy5lbCxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsgLy8gR2V0IHRoZSBpbmRleCBvZiB0aGUgZHJhZ2dlZCBlbGVtZW50IHdpdGhpbiBpdHMgcGFyZW50XG5cbiAgICBuZXdJbmRleCA9IGluZGV4KGRyYWdFbCk7XG4gICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBpbmRleChkcmFnRWwsIG9wdGlvbnMuZHJhZ2dhYmxlKTtcbiAgICBwbHVnaW5FdmVudCgnZHJvcCcsIHRoaXMsIHtcbiAgICAgIGV2dDogZXZ0XG4gICAgfSk7XG4gICAgcGFyZW50RWwgPSBkcmFnRWwgJiYgZHJhZ0VsLnBhcmVudE5vZGU7IC8vIEdldCBhZ2FpbiBhZnRlciBwbHVnaW4gZXZlbnRcblxuICAgIG5ld0luZGV4ID0gaW5kZXgoZHJhZ0VsKTtcbiAgICBuZXdEcmFnZ2FibGVJbmRleCA9IGluZGV4KGRyYWdFbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuXG4gICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgIHRoaXMuX251bGxpbmcoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGF3YWl0aW5nRHJhZ1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0ID0gZmFsc2U7XG4gICAgcGFzdEZpcnN0SW52ZXJ0VGhyZXNoID0gZmFsc2U7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9sb29wSWQpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl9kcmFnU3RhcnRUaW1lcik7XG5cbiAgICBfY2FuY2VsTmV4dFRpY2sodGhpcy5jbG9uZUlkKTtcblxuICAgIF9jYW5jZWxOZXh0VGljayh0aGlzLl9kcmFnU3RhcnRJZCk7IC8vIFVuYmluZCBldmVudHNcblxuXG4gICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICBvZmYoZG9jdW1lbnQsICdkcm9wJywgdGhpcyk7XG4gICAgICBvZmYoZWwsICdkcmFnc3RhcnQnLCB0aGlzLl9vbkRyYWdTdGFydCk7XG4gICAgfVxuXG4gICAgdGhpcy5fb2ZmTW92ZUV2ZW50cygpO1xuXG4gICAgdGhpcy5fb2ZmVXBFdmVudHMoKTtcblxuICAgIGlmIChTYWZhcmkpIHtcbiAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAndXNlci1zZWxlY3QnLCAnJyk7XG4gICAgfVxuXG4gICAgY3NzKGRyYWdFbCwgJ3RyYW5zZm9ybScsICcnKTtcblxuICAgIGlmIChldnQpIHtcbiAgICAgIGlmIChtb3ZlZCkge1xuICAgICAgICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgIW9wdGlvbnMuZHJvcEJ1YmJsZSAmJiBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIGdob3N0RWwgJiYgZ2hvc3RFbC5wYXJlbnROb2RlICYmIGdob3N0RWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnaG9zdEVsKTtcblxuICAgICAgaWYgKHJvb3RFbCA9PT0gcGFyZW50RWwgfHwgcHV0U29ydGFibGUgJiYgcHV0U29ydGFibGUubGFzdFB1dE1vZGUgIT09ICdjbG9uZScpIHtcbiAgICAgICAgLy8gUmVtb3ZlIGNsb25lKHMpXG4gICAgICAgIGNsb25lRWwgJiYgY2xvbmVFbC5wYXJlbnROb2RlICYmIGNsb25lRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjbG9uZUVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRyYWdFbCkge1xuICAgICAgICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgICBvZmYoZHJhZ0VsLCAnZHJhZ2VuZCcsIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgX2Rpc2FibGVEcmFnZ2FibGUoZHJhZ0VsKTtcblxuICAgICAgICBkcmFnRWwuc3R5bGVbJ3dpbGwtY2hhbmdlJ10gPSAnJzsgLy8gUmVtb3ZlIGNsYXNzZXNcbiAgICAgICAgLy8gZ2hvc3RDbGFzcyBpcyBhZGRlZCBpbiBkcmFnU3RhcnRlZFxuXG4gICAgICAgIGlmIChtb3ZlZCAmJiAhYXdhaXRpbmdEcmFnU3RhcnRlZCkge1xuICAgICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgcHV0U29ydGFibGUgPyBwdXRTb3J0YWJsZS5vcHRpb25zLmdob3N0Q2xhc3MgOiB0aGlzLm9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCB0aGlzLm9wdGlvbnMuY2hvc2VuQ2xhc3MsIGZhbHNlKTsgLy8gRHJhZyBzdG9wIGV2ZW50XG5cbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgIG5hbWU6ICd1bmNob29zZScsXG4gICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgbmV3SW5kZXg6IG51bGwsXG4gICAgICAgICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG51bGwsXG4gICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyb290RWwgIT09IHBhcmVudEVsKSB7XG4gICAgICAgICAgaWYgKG5ld0luZGV4ID49IDApIHtcbiAgICAgICAgICAgIC8vIEFkZCBldmVudFxuICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICByb290RWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBuYW1lOiAnYWRkJyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIGZyb21FbDogcm9vdEVsLFxuICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgIH0pOyAvLyBSZW1vdmUgZXZlbnRcblxuXG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICBuYW1lOiAncmVtb3ZlJyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7IC8vIGRyYWcgZnJvbSBvbmUgbGlzdCBhbmQgZHJvcCBpbnRvIGFub3RoZXJcblxuXG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHJvb3RFbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG5hbWU6ICdzb3J0JyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIGZyb21FbDogcm9vdEVsLFxuICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICBuYW1lOiAnc29ydCcsXG4gICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHB1dFNvcnRhYmxlICYmIHB1dFNvcnRhYmxlLnNhdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobmV3SW5kZXggIT09IG9sZEluZGV4KSB7XG4gICAgICAgICAgICBpZiAobmV3SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAvLyBkcmFnICYgZHJvcCB3aXRoaW4gdGhlIHNhbWUgbGlzdFxuICAgICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3VwZGF0ZScsXG4gICAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnc29ydCcsXG4gICAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChTb3J0YWJsZS5hY3RpdmUpIHtcbiAgICAgICAgICAvKiBqc2hpbnQgZXFudWxsOnRydWUgKi9cbiAgICAgICAgICBpZiAobmV3SW5kZXggPT0gbnVsbCB8fCBuZXdJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIG5ld0luZGV4ID0gb2xkSW5kZXg7XG4gICAgICAgICAgICBuZXdEcmFnZ2FibGVJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgbmFtZTogJ2VuZCcsXG4gICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgIH0pOyAvLyBTYXZlIHNvcnRpbmdcblxuXG4gICAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9udWxsaW5nKCk7XG4gIH0sXG4gIF9udWxsaW5nOiBmdW5jdGlvbiBfbnVsbGluZygpIHtcbiAgICBwbHVnaW5FdmVudCgnbnVsbGluZycsIHRoaXMpO1xuICAgIHJvb3RFbCA9IGRyYWdFbCA9IHBhcmVudEVsID0gZ2hvc3RFbCA9IG5leHRFbCA9IGNsb25lRWwgPSBsYXN0RG93bkVsID0gY2xvbmVIaWRkZW4gPSB0YXBFdnQgPSB0b3VjaEV2dCA9IG1vdmVkID0gbmV3SW5kZXggPSBuZXdEcmFnZ2FibGVJbmRleCA9IG9sZEluZGV4ID0gb2xkRHJhZ2dhYmxlSW5kZXggPSBsYXN0VGFyZ2V0ID0gbGFzdERpcmVjdGlvbiA9IHB1dFNvcnRhYmxlID0gYWN0aXZlR3JvdXAgPSBTb3J0YWJsZS5kcmFnZ2VkID0gU29ydGFibGUuZ2hvc3QgPSBTb3J0YWJsZS5jbG9uZSA9IFNvcnRhYmxlLmFjdGl2ZSA9IG51bGw7XG4gICAgc2F2ZWRJbnB1dENoZWNrZWQuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGVsLmNoZWNrZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHNhdmVkSW5wdXRDaGVja2VkLmxlbmd0aCA9IGxhc3REeCA9IGxhc3REeSA9IDA7XG4gIH0sXG4gIGhhbmRsZUV2ZW50OiBmdW5jdGlvbiBoYW5kbGVFdmVudChcbiAgLyoqRXZlbnQqL1xuICBldnQpIHtcbiAgICBzd2l0Y2ggKGV2dC50eXBlKSB7XG4gICAgICBjYXNlICdkcm9wJzpcbiAgICAgIGNhc2UgJ2RyYWdlbmQnOlxuICAgICAgICB0aGlzLl9vbkRyb3AoZXZ0KTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZHJhZ2VudGVyJzpcbiAgICAgIGNhc2UgJ2RyYWdvdmVyJzpcbiAgICAgICAgaWYgKGRyYWdFbCkge1xuICAgICAgICAgIHRoaXMuX29uRHJhZ092ZXIoZXZ0KTtcblxuICAgICAgICAgIF9nbG9iYWxEcmFnT3ZlcihldnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3NlbGVjdHN0YXJ0JzpcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2VyaWFsaXplcyB0aGUgaXRlbSBpbnRvIGFuIGFycmF5IG9mIHN0cmluZy5cbiAgICogQHJldHVybnMge1N0cmluZ1tdfVxuICAgKi9cbiAgdG9BcnJheTogZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgICB2YXIgb3JkZXIgPSBbXSxcbiAgICAgICAgZWwsXG4gICAgICAgIGNoaWxkcmVuID0gdGhpcy5lbC5jaGlsZHJlbixcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIG4gPSBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBmb3IgKDsgaSA8IG47IGkrKykge1xuICAgICAgZWwgPSBjaGlsZHJlbltpXTtcblxuICAgICAgaWYgKGNsb3Nlc3QoZWwsIG9wdGlvbnMuZHJhZ2dhYmxlLCB0aGlzLmVsLCBmYWxzZSkpIHtcbiAgICAgICAgb3JkZXIucHVzaChlbC5nZXRBdHRyaWJ1dGUob3B0aW9ucy5kYXRhSWRBdHRyKSB8fCBfZ2VuZXJhdGVJZChlbCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcmRlcjtcbiAgfSxcblxuICAvKipcbiAgICogU29ydHMgdGhlIGVsZW1lbnRzIGFjY29yZGluZyB0byB0aGUgYXJyYXkuXG4gICAqIEBwYXJhbSAge1N0cmluZ1tdfSAgb3JkZXIgIG9yZGVyIG9mIHRoZSBpdGVtc1xuICAgKi9cbiAgc29ydDogZnVuY3Rpb24gc29ydChvcmRlcikge1xuICAgIHZhciBpdGVtcyA9IHt9LFxuICAgICAgICByb290RWwgPSB0aGlzLmVsO1xuICAgIHRoaXMudG9BcnJheSgpLmZvckVhY2goZnVuY3Rpb24gKGlkLCBpKSB7XG4gICAgICB2YXIgZWwgPSByb290RWwuY2hpbGRyZW5baV07XG5cbiAgICAgIGlmIChjbG9zZXN0KGVsLCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCByb290RWwsIGZhbHNlKSkge1xuICAgICAgICBpdGVtc1tpZF0gPSBlbDtcbiAgICAgIH1cbiAgICB9LCB0aGlzKTtcbiAgICBvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgaWYgKGl0ZW1zW2lkXSkge1xuICAgICAgICByb290RWwucmVtb3ZlQ2hpbGQoaXRlbXNbaWRdKTtcbiAgICAgICAgcm9vdEVsLmFwcGVuZENoaWxkKGl0ZW1zW2lkXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNhdmUgdGhlIGN1cnJlbnQgc29ydGluZ1xuICAgKi9cbiAgc2F2ZTogZnVuY3Rpb24gc2F2ZSgpIHtcbiAgICB2YXIgc3RvcmUgPSB0aGlzLm9wdGlvbnMuc3RvcmU7XG4gICAgc3RvcmUgJiYgc3RvcmUuc2V0ICYmIHN0b3JlLnNldCh0aGlzKTtcbiAgfSxcblxuICAvKipcbiAgICogRm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0LCBnZXQgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoZSBzZWxlY3RvciBieSB0ZXN0aW5nIHRoZSBlbGVtZW50IGl0c2VsZiBhbmQgdHJhdmVyc2luZyB1cCB0aHJvdWdoIGl0cyBhbmNlc3RvcnMgaW4gdGhlIERPTSB0cmVlLlxuICAgKiBAcGFyYW0gICB7SFRNTEVsZW1lbnR9ICBlbFxuICAgKiBAcGFyYW0gICB7U3RyaW5nfSAgICAgICBbc2VsZWN0b3JdICBkZWZhdWx0OiBgb3B0aW9ucy5kcmFnZ2FibGVgXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudHxudWxsfVxuICAgKi9cbiAgY2xvc2VzdDogZnVuY3Rpb24gY2xvc2VzdCQxKGVsLCBzZWxlY3Rvcikge1xuICAgIHJldHVybiBjbG9zZXN0KGVsLCBzZWxlY3RvciB8fCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCB0aGlzLmVsLCBmYWxzZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldC9nZXQgb3B0aW9uXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtICAgeyp9ICAgICAgW3ZhbHVlXVxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIG9wdGlvbjogZnVuY3Rpb24gb3B0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIG9wdGlvbnNbbmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtb2RpZmllZFZhbHVlID0gUGx1Z2luTWFuYWdlci5tb2RpZnlPcHRpb24odGhpcywgbmFtZSwgdmFsdWUpO1xuXG4gICAgICBpZiAodHlwZW9mIG1vZGlmaWVkVmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG9wdGlvbnNbbmFtZV0gPSBtb2RpZmllZFZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9uc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobmFtZSA9PT0gJ2dyb3VwJykge1xuICAgICAgICBfcHJlcGFyZUdyb3VwKG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGVzdHJveVxuICAgKi9cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBwbHVnaW5FdmVudCgnZGVzdHJveScsIHRoaXMpO1xuICAgIHZhciBlbCA9IHRoaXMuZWw7XG4gICAgZWxbZXhwYW5kb10gPSBudWxsO1xuICAgIG9mZihlbCwgJ21vdXNlZG93bicsIHRoaXMuX29uVGFwU3RhcnQpO1xuICAgIG9mZihlbCwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgICBvZmYoZWwsICdwb2ludGVyZG93bicsIHRoaXMuX29uVGFwU3RhcnQpO1xuXG4gICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICBvZmYoZWwsICdkcmFnb3ZlcicsIHRoaXMpO1xuICAgICAgb2ZmKGVsLCAnZHJhZ2VudGVyJywgdGhpcyk7XG4gICAgfSAvLyBSZW1vdmUgZHJhZ2dhYmxlIGF0dHJpYnV0ZXNcblxuXG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbC5xdWVyeVNlbGVjdG9yQWxsKCdbZHJhZ2dhYmxlXScpLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnZHJhZ2dhYmxlJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9vbkRyb3AoKTtcblxuICAgIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpO1xuXG4gICAgc29ydGFibGVzLnNwbGljZShzb3J0YWJsZXMuaW5kZXhPZih0aGlzLmVsKSwgMSk7XG4gICAgdGhpcy5lbCA9IGVsID0gbnVsbDtcbiAgfSxcbiAgX2hpZGVDbG9uZTogZnVuY3Rpb24gX2hpZGVDbG9uZSgpIHtcbiAgICBpZiAoIWNsb25lSGlkZGVuKSB7XG4gICAgICBwbHVnaW5FdmVudCgnaGlkZUNsb25lJywgdGhpcyk7XG4gICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuO1xuICAgICAgY3NzKGNsb25lRWwsICdkaXNwbGF5JywgJ25vbmUnKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSAmJiBjbG9uZUVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgY2xvbmVFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lRWwpO1xuICAgICAgfVxuXG4gICAgICBjbG9uZUhpZGRlbiA9IHRydWU7XG4gICAgfVxuICB9LFxuICBfc2hvd0Nsb25lOiBmdW5jdGlvbiBfc2hvd0Nsb25lKHB1dFNvcnRhYmxlKSB7XG4gICAgaWYgKHB1dFNvcnRhYmxlLmxhc3RQdXRNb2RlICE9PSAnY2xvbmUnKSB7XG4gICAgICB0aGlzLl9oaWRlQ2xvbmUoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjbG9uZUhpZGRlbikge1xuICAgICAgcGx1Z2luRXZlbnQoJ3Nob3dDbG9uZScsIHRoaXMpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybjsgLy8gc2hvdyBjbG9uZSBhdCBkcmFnRWwgb3Igb3JpZ2luYWwgcG9zaXRpb25cblxuICAgICAgaWYgKHJvb3RFbC5jb250YWlucyhkcmFnRWwpICYmICF0aGlzLm9wdGlvbnMuZ3JvdXAucmV2ZXJ0Q2xvbmUpIHtcbiAgICAgICAgcm9vdEVsLmluc2VydEJlZm9yZShjbG9uZUVsLCBkcmFnRWwpO1xuICAgICAgfSBlbHNlIGlmIChuZXh0RWwpIHtcbiAgICAgICAgcm9vdEVsLmluc2VydEJlZm9yZShjbG9uZUVsLCBuZXh0RWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdEVsLmFwcGVuZENoaWxkKGNsb25lRWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmdyb3VwLnJldmVydENsb25lKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0ZShkcmFnRWwsIGNsb25lRWwpO1xuICAgICAgfVxuXG4gICAgICBjc3MoY2xvbmVFbCwgJ2Rpc3BsYXknLCAnJyk7XG4gICAgICBjbG9uZUhpZGRlbiA9IGZhbHNlO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gX2dsb2JhbERyYWdPdmVyKFxuLyoqRXZlbnQqL1xuZXZ0KSB7XG4gIGlmIChldnQuZGF0YVRyYW5zZmVyKSB7XG4gICAgZXZ0LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ21vdmUnO1xuICB9XG5cbiAgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG59XG5cbmZ1bmN0aW9uIF9vbk1vdmUoZnJvbUVsLCB0b0VsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXRFbCwgdGFyZ2V0UmVjdCwgb3JpZ2luYWxFdmVudCwgd2lsbEluc2VydEFmdGVyKSB7XG4gIHZhciBldnQsXG4gICAgICBzb3J0YWJsZSA9IGZyb21FbFtleHBhbmRvXSxcbiAgICAgIG9uTW92ZUZuID0gc29ydGFibGUub3B0aW9ucy5vbk1vdmUsXG4gICAgICByZXRWYWw7IC8vIFN1cHBvcnQgZm9yIG5ldyBDdXN0b21FdmVudCBmZWF0dXJlXG5cbiAgaWYgKHdpbmRvdy5DdXN0b21FdmVudCAmJiAhSUUxMU9yTGVzcyAmJiAhRWRnZSkge1xuICAgIGV2dCA9IG5ldyBDdXN0b21FdmVudCgnbW92ZScsIHtcbiAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZ0LmluaXRFdmVudCgnbW92ZScsIHRydWUsIHRydWUpO1xuICB9XG5cbiAgZXZ0LnRvID0gdG9FbDtcbiAgZXZ0LmZyb20gPSBmcm9tRWw7XG4gIGV2dC5kcmFnZ2VkID0gZHJhZ0VsO1xuICBldnQuZHJhZ2dlZFJlY3QgPSBkcmFnUmVjdDtcbiAgZXZ0LnJlbGF0ZWQgPSB0YXJnZXRFbCB8fCB0b0VsO1xuICBldnQucmVsYXRlZFJlY3QgPSB0YXJnZXRSZWN0IHx8IGdldFJlY3QodG9FbCk7XG4gIGV2dC53aWxsSW5zZXJ0QWZ0ZXIgPSB3aWxsSW5zZXJ0QWZ0ZXI7XG4gIGV2dC5vcmlnaW5hbEV2ZW50ID0gb3JpZ2luYWxFdmVudDtcbiAgZnJvbUVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcblxuICBpZiAob25Nb3ZlRm4pIHtcbiAgICByZXRWYWwgPSBvbk1vdmVGbi5jYWxsKHNvcnRhYmxlLCBldnQsIG9yaWdpbmFsRXZlbnQpO1xuICB9XG5cbiAgcmV0dXJuIHJldFZhbDtcbn1cblxuZnVuY3Rpb24gX2Rpc2FibGVEcmFnZ2FibGUoZWwpIHtcbiAgZWwuZHJhZ2dhYmxlID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIF91bnNpbGVudCgpIHtcbiAgX3NpbGVudCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBfZ2hvc3RJc0xhc3QoZXZ0LCB2ZXJ0aWNhbCwgc29ydGFibGUpIHtcbiAgdmFyIHJlY3QgPSBnZXRSZWN0KGxhc3RDaGlsZChzb3J0YWJsZS5lbCwgc29ydGFibGUub3B0aW9ucy5kcmFnZ2FibGUpKTtcbiAgdmFyIHNwYWNlciA9IDEwO1xuICByZXR1cm4gdmVydGljYWwgPyBldnQuY2xpZW50WCA+IHJlY3QucmlnaHQgKyBzcGFjZXIgfHwgZXZ0LmNsaWVudFggPD0gcmVjdC5yaWdodCAmJiBldnQuY2xpZW50WSA+IHJlY3QuYm90dG9tICYmIGV2dC5jbGllbnRYID49IHJlY3QubGVmdCA6IGV2dC5jbGllbnRYID4gcmVjdC5yaWdodCAmJiBldnQuY2xpZW50WSA+IHJlY3QudG9wIHx8IGV2dC5jbGllbnRYIDw9IHJlY3QucmlnaHQgJiYgZXZ0LmNsaWVudFkgPiByZWN0LmJvdHRvbSArIHNwYWNlcjtcbn1cblxuZnVuY3Rpb24gX2dldFN3YXBEaXJlY3Rpb24oZXZ0LCB0YXJnZXQsIHRhcmdldFJlY3QsIHZlcnRpY2FsLCBzd2FwVGhyZXNob2xkLCBpbnZlcnRlZFN3YXBUaHJlc2hvbGQsIGludmVydFN3YXAsIGlzTGFzdFRhcmdldCkge1xuICB2YXIgbW91c2VPbkF4aXMgPSB2ZXJ0aWNhbCA/IGV2dC5jbGllbnRZIDogZXZ0LmNsaWVudFgsXG4gICAgICB0YXJnZXRMZW5ndGggPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QuaGVpZ2h0IDogdGFyZ2V0UmVjdC53aWR0aCxcbiAgICAgIHRhcmdldFMxID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LnRvcCA6IHRhcmdldFJlY3QubGVmdCxcbiAgICAgIHRhcmdldFMyID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LmJvdHRvbSA6IHRhcmdldFJlY3QucmlnaHQsXG4gICAgICBpbnZlcnQgPSBmYWxzZTtcblxuICBpZiAoIWludmVydFN3YXApIHtcbiAgICAvLyBOZXZlciBpbnZlcnQgb3IgY3JlYXRlIGRyYWdFbCBzaGFkb3cgd2hlbiB0YXJnZXQgbW92ZW1lbmV0IGNhdXNlcyBtb3VzZSB0byBtb3ZlIHBhc3QgdGhlIGVuZCBvZiByZWd1bGFyIHN3YXBUaHJlc2hvbGRcbiAgICBpZiAoaXNMYXN0VGFyZ2V0ICYmIHRhcmdldE1vdmVEaXN0YW5jZSA8IHRhcmdldExlbmd0aCAqIHN3YXBUaHJlc2hvbGQpIHtcbiAgICAgIC8vIG11bHRpcGxpZWQgb25seSBieSBzd2FwVGhyZXNob2xkIGJlY2F1c2UgbW91c2Ugd2lsbCBhbHJlYWR5IGJlIGluc2lkZSB0YXJnZXQgYnkgKDEgLSB0aHJlc2hvbGQpICogdGFyZ2V0TGVuZ3RoIC8gMlxuICAgICAgLy8gY2hlY2sgaWYgcGFzdCBmaXJzdCBpbnZlcnQgdGhyZXNob2xkIG9uIHNpZGUgb3Bwb3NpdGUgb2YgbGFzdERpcmVjdGlvblxuICAgICAgaWYgKCFwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggJiYgKGxhc3REaXJlY3Rpb24gPT09IDEgPyBtb3VzZU9uQXhpcyA+IHRhcmdldFMxICsgdGFyZ2V0TGVuZ3RoICogaW52ZXJ0ZWRTd2FwVGhyZXNob2xkIC8gMiA6IG1vdXNlT25BeGlzIDwgdGFyZ2V0UzIgLSB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyKSkge1xuICAgICAgICAvLyBwYXN0IGZpcnN0IGludmVydCB0aHJlc2hvbGQsIGRvIG5vdCByZXN0cmljdCBpbnZlcnRlZCB0aHJlc2hvbGQgdG8gZHJhZ0VsIHNoYWRvd1xuICAgICAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXBhc3RGaXJzdEludmVydFRocmVzaCkge1xuICAgICAgICAvLyBkcmFnRWwgc2hhZG93ICh0YXJnZXQgbW92ZSBkaXN0YW5jZSBzaGFkb3cpXG4gICAgICAgIGlmIChsYXN0RGlyZWN0aW9uID09PSAxID8gbW91c2VPbkF4aXMgPCB0YXJnZXRTMSArIHRhcmdldE1vdmVEaXN0YW5jZSAvLyBvdmVyIGRyYWdFbCBzaGFkb3dcbiAgICAgICAgOiBtb3VzZU9uQXhpcyA+IHRhcmdldFMyIC0gdGFyZ2V0TW92ZURpc3RhbmNlKSB7XG4gICAgICAgICAgcmV0dXJuIC1sYXN0RGlyZWN0aW9uO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnZlcnQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZWd1bGFyXG4gICAgICBpZiAobW91c2VPbkF4aXMgPiB0YXJnZXRTMSArIHRhcmdldExlbmd0aCAqICgxIC0gc3dhcFRocmVzaG9sZCkgLyAyICYmIG1vdXNlT25BeGlzIDwgdGFyZ2V0UzIgLSB0YXJnZXRMZW5ndGggKiAoMSAtIHN3YXBUaHJlc2hvbGQpIC8gMikge1xuICAgICAgICByZXR1cm4gX2dldEluc2VydERpcmVjdGlvbih0YXJnZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGludmVydCA9IGludmVydCB8fCBpbnZlcnRTd2FwO1xuXG4gIGlmIChpbnZlcnQpIHtcbiAgICAvLyBJbnZlcnQgb2YgcmVndWxhclxuICAgIGlmIChtb3VzZU9uQXhpcyA8IHRhcmdldFMxICsgdGFyZ2V0TGVuZ3RoICogaW52ZXJ0ZWRTd2FwVGhyZXNob2xkIC8gMiB8fCBtb3VzZU9uQXhpcyA+IHRhcmdldFMyIC0gdGFyZ2V0TGVuZ3RoICogaW52ZXJ0ZWRTd2FwVGhyZXNob2xkIC8gMikge1xuICAgICAgcmV0dXJuIG1vdXNlT25BeGlzID4gdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggLyAyID8gMSA6IC0xO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuLyoqXG4gKiBHZXRzIHRoZSBkaXJlY3Rpb24gZHJhZ0VsIG11c3QgYmUgc3dhcHBlZCByZWxhdGl2ZSB0byB0YXJnZXQgaW4gb3JkZXIgdG8gbWFrZSBpdFxuICogc2VlbSB0aGF0IGRyYWdFbCBoYXMgYmVlbiBcImluc2VydGVkXCIgaW50byB0aGF0IGVsZW1lbnQncyBwb3NpdGlvblxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IHRhcmdldCAgICAgICBUaGUgdGFyZ2V0IHdob3NlIHBvc2l0aW9uIGRyYWdFbCBpcyBiZWluZyBpbnNlcnRlZCBhdFxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICBEaXJlY3Rpb24gZHJhZ0VsIG11c3QgYmUgc3dhcHBlZFxuICovXG5cblxuZnVuY3Rpb24gX2dldEluc2VydERpcmVjdGlvbih0YXJnZXQpIHtcbiAgaWYgKGluZGV4KGRyYWdFbCkgPCBpbmRleCh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59XG4vKipcbiAqIEdlbmVyYXRlIGlkXG4gKiBAcGFyYW0gICB7SFRNTEVsZW1lbnR9IGVsXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIF9nZW5lcmF0ZUlkKGVsKSB7XG4gIHZhciBzdHIgPSBlbC50YWdOYW1lICsgZWwuY2xhc3NOYW1lICsgZWwuc3JjICsgZWwuaHJlZiArIGVsLnRleHRDb250ZW50LFxuICAgICAgaSA9IHN0ci5sZW5ndGgsXG4gICAgICBzdW0gPSAwO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBzdW0gKz0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIH1cblxuICByZXR1cm4gc3VtLnRvU3RyaW5nKDM2KTtcbn1cblxuZnVuY3Rpb24gX3NhdmVJbnB1dENoZWNrZWRTdGF0ZShyb290KSB7XG4gIHNhdmVkSW5wdXRDaGVja2VkLmxlbmd0aCA9IDA7XG4gIHZhciBpbnB1dHMgPSByb290LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbnB1dCcpO1xuICB2YXIgaWR4ID0gaW5wdXRzLmxlbmd0aDtcblxuICB3aGlsZSAoaWR4LS0pIHtcbiAgICB2YXIgZWwgPSBpbnB1dHNbaWR4XTtcbiAgICBlbC5jaGVja2VkICYmIHNhdmVkSW5wdXRDaGVja2VkLnB1c2goZWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9uZXh0VGljayhmbikge1xuICByZXR1cm4gc2V0VGltZW91dChmbiwgMCk7XG59XG5cbmZ1bmN0aW9uIF9jYW5jZWxOZXh0VGljayhpZCkge1xuICByZXR1cm4gY2xlYXJUaW1lb3V0KGlkKTtcbn0gLy8gRml4ZWQgIzk3MzpcblxuXG5pZiAoZG9jdW1lbnRFeGlzdHMpIHtcbiAgb24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgaWYgKChTb3J0YWJsZS5hY3RpdmUgfHwgYXdhaXRpbmdEcmFnU3RhcnRlZCkgJiYgZXZ0LmNhbmNlbGFibGUpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSk7XG59IC8vIEV4cG9ydCB1dGlsc1xuXG5cblNvcnRhYmxlLnV0aWxzID0ge1xuICBvbjogb24sXG4gIG9mZjogb2ZmLFxuICBjc3M6IGNzcyxcbiAgZmluZDogZmluZCxcbiAgaXM6IGZ1bmN0aW9uIGlzKGVsLCBzZWxlY3Rvcikge1xuICAgIHJldHVybiAhIWNsb3Nlc3QoZWwsIHNlbGVjdG9yLCBlbCwgZmFsc2UpO1xuICB9LFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdGhyb3R0bGU6IHRocm90dGxlLFxuICBjbG9zZXN0OiBjbG9zZXN0LFxuICB0b2dnbGVDbGFzczogdG9nZ2xlQ2xhc3MsXG4gIGNsb25lOiBjbG9uZSxcbiAgaW5kZXg6IGluZGV4LFxuICBuZXh0VGljazogX25leHRUaWNrLFxuICBjYW5jZWxOZXh0VGljazogX2NhbmNlbE5leHRUaWNrLFxuICBkZXRlY3REaXJlY3Rpb246IF9kZXRlY3REaXJlY3Rpb24sXG4gIGdldENoaWxkOiBnZXRDaGlsZFxufTtcbi8qKlxuICogR2V0IHRoZSBTb3J0YWJsZSBpbnN0YW5jZSBvZiBhbiBlbGVtZW50XG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudFxuICogQHJldHVybiB7U29ydGFibGV8dW5kZWZpbmVkfSAgICAgICAgIFRoZSBpbnN0YW5jZSBvZiBTb3J0YWJsZVxuICovXG5cblNvcnRhYmxlLmdldCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50W2V4cGFuZG9dO1xufTtcbi8qKlxuICogTW91bnQgYSBwbHVnaW4gdG8gU29ydGFibGVcbiAqIEBwYXJhbSAgey4uLlNvcnRhYmxlUGx1Z2lufFNvcnRhYmxlUGx1Z2luW119IHBsdWdpbnMgICAgICAgUGx1Z2lucyBiZWluZyBtb3VudGVkXG4gKi9cblxuXG5Tb3J0YWJsZS5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHBsdWdpbnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgcGx1Z2luc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChwbHVnaW5zWzBdLmNvbnN0cnVjdG9yID09PSBBcnJheSkgcGx1Z2lucyA9IHBsdWdpbnNbMF07XG4gIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgaWYgKCFwbHVnaW4ucHJvdG90eXBlIHx8ICFwbHVnaW4ucHJvdG90eXBlLmNvbnN0cnVjdG9yKSB7XG4gICAgICB0aHJvdyBcIlNvcnRhYmxlOiBNb3VudGVkIHBsdWdpbiBtdXN0IGJlIGEgY29uc3RydWN0b3IgZnVuY3Rpb24sIG5vdCBcIi5jb25jYXQoe30udG9TdHJpbmcuY2FsbChwbHVnaW4pKTtcbiAgICB9XG5cbiAgICBpZiAocGx1Z2luLnV0aWxzKSBTb3J0YWJsZS51dGlscyA9IF9vYmplY3RTcHJlYWQoe30sIFNvcnRhYmxlLnV0aWxzLCBwbHVnaW4udXRpbHMpO1xuICAgIFBsdWdpbk1hbmFnZXIubW91bnQocGx1Z2luKTtcbiAgfSk7XG59O1xuLyoqXG4gKiBDcmVhdGUgc29ydGFibGUgaW5zdGFuY2VcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9ICBlbFxuICogQHBhcmFtIHtPYmplY3R9ICAgICAgW29wdGlvbnNdXG4gKi9cblxuXG5Tb3J0YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBTb3J0YWJsZShlbCwgb3B0aW9ucyk7XG59OyAvLyBFeHBvcnRcblxuXG5Tb3J0YWJsZS52ZXJzaW9uID0gdmVyc2lvbjtcblxudmFyIGF1dG9TY3JvbGxzID0gW10sXG4gICAgc2Nyb2xsRWwsXG4gICAgc2Nyb2xsUm9vdEVsLFxuICAgIHNjcm9sbGluZyA9IGZhbHNlLFxuICAgIGxhc3RBdXRvU2Nyb2xsWCxcbiAgICBsYXN0QXV0b1Njcm9sbFksXG4gICAgdG91Y2hFdnQkMSxcbiAgICBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbDtcblxuZnVuY3Rpb24gQXV0b1Njcm9sbFBsdWdpbigpIHtcbiAgZnVuY3Rpb24gQXV0b1Njcm9sbCgpIHtcbiAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgc2Nyb2xsOiB0cnVlLFxuICAgICAgc2Nyb2xsU2Vuc2l0aXZpdHk6IDMwLFxuICAgICAgc2Nyb2xsU3BlZWQ6IDEwLFxuICAgICAgYnViYmxlU2Nyb2xsOiB0cnVlXG4gICAgfTsgLy8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzXG5cbiAgICBmb3IgKHZhciBmbiBpbiB0aGlzKSB7XG4gICAgICBpZiAoZm4uY2hhckF0KDApID09PSAnXycgJiYgdHlwZW9mIHRoaXNbZm5dID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXNbZm5dID0gdGhpc1tmbl0uYmluZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBBdXRvU2Nyb2xsLnByb3RvdHlwZSA9IHtcbiAgICBkcmFnU3RhcnRlZDogZnVuY3Rpb24gZHJhZ1N0YXJ0ZWQoX3JlZikge1xuICAgICAgdmFyIG9yaWdpbmFsRXZlbnQgPSBfcmVmLm9yaWdpbmFsRXZlbnQ7XG5cbiAgICAgIGlmICh0aGlzLnNvcnRhYmxlLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICBvbihkb2N1bWVudCwgJ2RyYWdvdmVyJywgdGhpcy5faGFuZGxlQXV0b1Njcm9sbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnN1cHBvcnRQb2ludGVyKSB7XG4gICAgICAgICAgb24oZG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3JpZ2luYWxFdmVudC50b3VjaGVzKSB7XG4gICAgICAgICAgb24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZHJhZ092ZXJDb21wbGV0ZWQ6IGZ1bmN0aW9uIGRyYWdPdmVyQ29tcGxldGVkKF9yZWYyKSB7XG4gICAgICB2YXIgb3JpZ2luYWxFdmVudCA9IF9yZWYyLm9yaWdpbmFsRXZlbnQ7XG5cbiAgICAgIC8vIEZvciB3aGVuIGJ1YmJsaW5nIGlzIGNhbmNlbGVkIGFuZCB1c2luZyBmYWxsYmFjayAoZmFsbGJhY2sgJ3RvdWNobW92ZScgYWx3YXlzIHJlYWNoZWQpXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5kcmFnT3ZlckJ1YmJsZSAmJiAhb3JpZ2luYWxFdmVudC5yb290RWwpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlQXV0b1Njcm9sbChvcmlnaW5hbEV2ZW50KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyb3A6IGZ1bmN0aW9uIGRyb3AoKSB7XG4gICAgICBpZiAodGhpcy5zb3J0YWJsZS5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAnZHJhZ292ZXInLCB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9mZihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgIH1cblxuICAgICAgY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCgpO1xuICAgICAgY2xlYXJBdXRvU2Nyb2xscygpO1xuICAgICAgY2FuY2VsVGhyb3R0bGUoKTtcbiAgICB9LFxuICAgIG51bGxpbmc6IGZ1bmN0aW9uIG51bGxpbmcoKSB7XG4gICAgICB0b3VjaEV2dCQxID0gc2Nyb2xsUm9vdEVsID0gc2Nyb2xsRWwgPSBzY3JvbGxpbmcgPSBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCA9IGxhc3RBdXRvU2Nyb2xsWCA9IGxhc3RBdXRvU2Nyb2xsWSA9IG51bGw7XG4gICAgICBhdXRvU2Nyb2xscy5sZW5ndGggPSAwO1xuICAgIH0sXG4gICAgX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbDogZnVuY3Rpb24gX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbChldnQpIHtcbiAgICAgIHRoaXMuX2hhbmRsZUF1dG9TY3JvbGwoZXZ0LCB0cnVlKTtcbiAgICB9LFxuICAgIF9oYW5kbGVBdXRvU2Nyb2xsOiBmdW5jdGlvbiBfaGFuZGxlQXV0b1Njcm9sbChldnQsIGZhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgeCA9IChldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0KS5jbGllbnRYLFxuICAgICAgICAgIHkgPSAoZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dCkuY2xpZW50WSxcbiAgICAgICAgICBlbGVtID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh4LCB5KTtcbiAgICAgIHRvdWNoRXZ0JDEgPSBldnQ7IC8vIElFIGRvZXMgbm90IHNlZW0gdG8gaGF2ZSBuYXRpdmUgYXV0b3Njcm9sbCxcbiAgICAgIC8vIEVkZ2UncyBhdXRvc2Nyb2xsIHNlZW1zIHRvbyBjb25kaXRpb25hbCxcbiAgICAgIC8vIE1BQ09TIFNhZmFyaSBkb2VzIG5vdCBoYXZlIGF1dG9zY3JvbGwsXG4gICAgICAvLyBGaXJlZm94IGFuZCBDaHJvbWUgYXJlIGdvb2RcblxuICAgICAgaWYgKGZhbGxiYWNrIHx8IEVkZ2UgfHwgSUUxMU9yTGVzcyB8fCBTYWZhcmkpIHtcbiAgICAgICAgYXV0b1Njcm9sbChldnQsIHRoaXMub3B0aW9ucywgZWxlbSwgZmFsbGJhY2spOyAvLyBMaXN0ZW5lciBmb3IgcG9pbnRlciBlbGVtZW50IGNoYW5nZVxuXG4gICAgICAgIHZhciBvZ0VsZW1TY3JvbGxlciA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsZW0sIHRydWUpO1xuXG4gICAgICAgIGlmIChzY3JvbGxpbmcgJiYgKCFwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCB8fCB4ICE9PSBsYXN0QXV0b1Njcm9sbFggfHwgeSAhPT0gbGFzdEF1dG9TY3JvbGxZKSkge1xuICAgICAgICAgIHBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsICYmIGNsZWFyUG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwoKTsgLy8gRGV0ZWN0IGZvciBwb2ludGVyIGVsZW0gY2hhbmdlLCBlbXVsYXRpbmcgbmF0aXZlIERuRCBiZWhhdmlvdXJcblxuICAgICAgICAgIHBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG5ld0VsZW0gPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHgsIHkpLCB0cnVlKTtcblxuICAgICAgICAgICAgaWYgKG5ld0VsZW0gIT09IG9nRWxlbVNjcm9sbGVyKSB7XG4gICAgICAgICAgICAgIG9nRWxlbVNjcm9sbGVyID0gbmV3RWxlbTtcbiAgICAgICAgICAgICAgY2xlYXJBdXRvU2Nyb2xscygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdXRvU2Nyb2xsKGV2dCwgX3RoaXMub3B0aW9ucywgbmV3RWxlbSwgZmFsbGJhY2spO1xuICAgICAgICAgIH0sIDEwKTtcbiAgICAgICAgICBsYXN0QXV0b1Njcm9sbFggPSB4O1xuICAgICAgICAgIGxhc3RBdXRvU2Nyb2xsWSA9IHk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGlmIERuRCBpcyBlbmFibGVkIChhbmQgYnJvd3NlciBoYXMgZ29vZCBhdXRvc2Nyb2xsaW5nKSwgZmlyc3QgYXV0b3Njcm9sbCB3aWxsIGFscmVhZHkgc2Nyb2xsLCBzbyBnZXQgcGFyZW50IGF1dG9zY3JvbGwgb2YgZmlyc3QgYXV0b3Njcm9sbFxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5idWJibGVTY3JvbGwgfHwgZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWxlbSwgdHJ1ZSkgPT09IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKSkge1xuICAgICAgICAgIGNsZWFyQXV0b1Njcm9sbHMoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhdXRvU2Nyb2xsKGV2dCwgdGhpcy5vcHRpb25zLCBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbGVtLCBmYWxzZSksIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyhBdXRvU2Nyb2xsLCB7XG4gICAgcGx1Z2luTmFtZTogJ3Njcm9sbCcsXG4gICAgaW5pdGlhbGl6ZUJ5RGVmYXVsdDogdHJ1ZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY2xlYXJBdXRvU2Nyb2xscygpIHtcbiAgYXV0b1Njcm9sbHMuZm9yRWFjaChmdW5jdGlvbiAoYXV0b1Njcm9sbCkge1xuICAgIGNsZWFySW50ZXJ2YWwoYXV0b1Njcm9sbC5waWQpO1xuICB9KTtcbiAgYXV0b1Njcm9sbHMgPSBbXTtcbn1cblxuZnVuY3Rpb24gY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCgpIHtcbiAgY2xlYXJJbnRlcnZhbChwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCk7XG59XG5cbnZhciBhdXRvU2Nyb2xsID0gdGhyb3R0bGUoZnVuY3Rpb24gKGV2dCwgb3B0aW9ucywgcm9vdEVsLCBpc0ZhbGxiYWNrKSB7XG4gIC8vIEJ1ZzogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTA1NTIxXG4gIGlmICghb3B0aW9ucy5zY3JvbGwpIHJldHVybjtcbiAgdmFyIHggPSAoZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dCkuY2xpZW50WCxcbiAgICAgIHkgPSAoZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dCkuY2xpZW50WSxcbiAgICAgIHNlbnMgPSBvcHRpb25zLnNjcm9sbFNlbnNpdGl2aXR5LFxuICAgICAgc3BlZWQgPSBvcHRpb25zLnNjcm9sbFNwZWVkLFxuICAgICAgd2luU2Nyb2xsZXIgPSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7XG4gIHZhciBzY3JvbGxUaGlzSW5zdGFuY2UgPSBmYWxzZSxcbiAgICAgIHNjcm9sbEN1c3RvbUZuOyAvLyBOZXcgc2Nyb2xsIHJvb3QsIHNldCBzY3JvbGxFbFxuXG4gIGlmIChzY3JvbGxSb290RWwgIT09IHJvb3RFbCkge1xuICAgIHNjcm9sbFJvb3RFbCA9IHJvb3RFbDtcbiAgICBjbGVhckF1dG9TY3JvbGxzKCk7XG4gICAgc2Nyb2xsRWwgPSBvcHRpb25zLnNjcm9sbDtcbiAgICBzY3JvbGxDdXN0b21GbiA9IG9wdGlvbnMuc2Nyb2xsRm47XG5cbiAgICBpZiAoc2Nyb2xsRWwgPT09IHRydWUpIHtcbiAgICAgIHNjcm9sbEVsID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQocm9vdEVsLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGF5ZXJzT3V0ID0gMDtcbiAgdmFyIGN1cnJlbnRQYXJlbnQgPSBzY3JvbGxFbDtcblxuICBkbyB7XG4gICAgdmFyIGVsID0gY3VycmVudFBhcmVudCxcbiAgICAgICAgcmVjdCA9IGdldFJlY3QoZWwpLFxuICAgICAgICB0b3AgPSByZWN0LnRvcCxcbiAgICAgICAgYm90dG9tID0gcmVjdC5ib3R0b20sXG4gICAgICAgIGxlZnQgPSByZWN0LmxlZnQsXG4gICAgICAgIHJpZ2h0ID0gcmVjdC5yaWdodCxcbiAgICAgICAgd2lkdGggPSByZWN0LndpZHRoLFxuICAgICAgICBoZWlnaHQgPSByZWN0LmhlaWdodCxcbiAgICAgICAgY2FuU2Nyb2xsWCA9IHZvaWQgMCxcbiAgICAgICAgY2FuU2Nyb2xsWSA9IHZvaWQgMCxcbiAgICAgICAgc2Nyb2xsV2lkdGggPSBlbC5zY3JvbGxXaWR0aCxcbiAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gZWwuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICBlbENTUyA9IGNzcyhlbCksXG4gICAgICAgIHNjcm9sbFBvc1ggPSBlbC5zY3JvbGxMZWZ0LFxuICAgICAgICBzY3JvbGxQb3NZID0gZWwuc2Nyb2xsVG9wO1xuXG4gICAgaWYgKGVsID09PSB3aW5TY3JvbGxlcikge1xuICAgICAgY2FuU2Nyb2xsWCA9IHdpZHRoIDwgc2Nyb2xsV2lkdGggJiYgKGVsQ1NTLm92ZXJmbG93WCA9PT0gJ2F1dG8nIHx8IGVsQ1NTLm92ZXJmbG93WCA9PT0gJ3Njcm9sbCcgfHwgZWxDU1Mub3ZlcmZsb3dYID09PSAndmlzaWJsZScpO1xuICAgICAgY2FuU2Nyb2xsWSA9IGhlaWdodCA8IHNjcm9sbEhlaWdodCAmJiAoZWxDU1Mub3ZlcmZsb3dZID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dZID09PSAnc2Nyb2xsJyB8fCBlbENTUy5vdmVyZmxvd1kgPT09ICd2aXNpYmxlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhblNjcm9sbFggPSB3aWR0aCA8IHNjcm9sbFdpZHRoICYmIChlbENTUy5vdmVyZmxvd1ggPT09ICdhdXRvJyB8fCBlbENTUy5vdmVyZmxvd1ggPT09ICdzY3JvbGwnKTtcbiAgICAgIGNhblNjcm9sbFkgPSBoZWlnaHQgPCBzY3JvbGxIZWlnaHQgJiYgKGVsQ1NTLm92ZXJmbG93WSA9PT0gJ2F1dG8nIHx8IGVsQ1NTLm92ZXJmbG93WSA9PT0gJ3Njcm9sbCcpO1xuICAgIH1cblxuICAgIHZhciB2eCA9IGNhblNjcm9sbFggJiYgKE1hdGguYWJzKHJpZ2h0IC0geCkgPD0gc2VucyAmJiBzY3JvbGxQb3NYICsgd2lkdGggPCBzY3JvbGxXaWR0aCkgLSAoTWF0aC5hYnMobGVmdCAtIHgpIDw9IHNlbnMgJiYgISFzY3JvbGxQb3NYKTtcbiAgICB2YXIgdnkgPSBjYW5TY3JvbGxZICYmIChNYXRoLmFicyhib3R0b20gLSB5KSA8PSBzZW5zICYmIHNjcm9sbFBvc1kgKyBoZWlnaHQgPCBzY3JvbGxIZWlnaHQpIC0gKE1hdGguYWJzKHRvcCAtIHkpIDw9IHNlbnMgJiYgISFzY3JvbGxQb3NZKTtcblxuICAgIGlmICghYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gbGF5ZXJzT3V0OyBpKyspIHtcbiAgICAgICAgaWYgKCFhdXRvU2Nyb2xsc1tpXSkge1xuICAgICAgICAgIGF1dG9TY3JvbGxzW2ldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS52eCAhPSB2eCB8fCBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ5ICE9IHZ5IHx8IGF1dG9TY3JvbGxzW2xheWVyc091dF0uZWwgIT09IGVsKSB7XG4gICAgICBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLmVsID0gZWw7XG4gICAgICBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ4ID0gdng7XG4gICAgICBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ5ID0gdnk7XG4gICAgICBjbGVhckludGVydmFsKGF1dG9TY3JvbGxzW2xheWVyc091dF0ucGlkKTtcblxuICAgICAgaWYgKHZ4ICE9IDAgfHwgdnkgIT0gMCkge1xuICAgICAgICBzY3JvbGxUaGlzSW5zdGFuY2UgPSB0cnVlO1xuICAgICAgICAvKiBqc2hpbnQgbG9vcGZ1bmM6dHJ1ZSAqL1xuXG4gICAgICAgIGF1dG9TY3JvbGxzW2xheWVyc091dF0ucGlkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIGVtdWxhdGUgZHJhZyBvdmVyIGR1cmluZyBhdXRvc2Nyb2xsIChmYWxsYmFjayksIGVtdWxhdGluZyBuYXRpdmUgRG5EIGJlaGF2aW91clxuICAgICAgICAgIGlmIChpc0ZhbGxiYWNrICYmIHRoaXMubGF5ZXIgPT09IDApIHtcbiAgICAgICAgICAgIFNvcnRhYmxlLmFjdGl2ZS5fb25Ub3VjaE1vdmUodG91Y2hFdnQkMSk7IC8vIFRvIG1vdmUgZ2hvc3QgaWYgaXQgaXMgcG9zaXRpb25lZCBhYnNvbHV0ZWx5XG5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc2Nyb2xsT2Zmc2V0WSA9IGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLnZ5ID8gYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0udnkgKiBzcGVlZCA6IDA7XG4gICAgICAgICAgdmFyIHNjcm9sbE9mZnNldFggPSBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eCA/IGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLnZ4ICogc3BlZWQgOiAwO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBzY3JvbGxDdXN0b21GbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHNjcm9sbEN1c3RvbUZuLmNhbGwoU29ydGFibGUuZHJhZ2dlZC5wYXJlbnROb2RlW2V4cGFuZG9dLCBzY3JvbGxPZmZzZXRYLCBzY3JvbGxPZmZzZXRZLCBldnQsIHRvdWNoRXZ0JDEsIGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLmVsKSAhPT0gJ2NvbnRpbnVlJykge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2Nyb2xsQnkoYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0uZWwsIHNjcm9sbE9mZnNldFgsIHNjcm9sbE9mZnNldFkpO1xuICAgICAgICB9LmJpbmQoe1xuICAgICAgICAgIGxheWVyOiBsYXllcnNPdXRcbiAgICAgICAgfSksIDI0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXllcnNPdXQrKztcbiAgfSB3aGlsZSAob3B0aW9ucy5idWJibGVTY3JvbGwgJiYgY3VycmVudFBhcmVudCAhPT0gd2luU2Nyb2xsZXIgJiYgKGN1cnJlbnRQYXJlbnQgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChjdXJyZW50UGFyZW50LCBmYWxzZSkpKTtcblxuICBzY3JvbGxpbmcgPSBzY3JvbGxUaGlzSW5zdGFuY2U7IC8vIGluIGNhc2UgYW5vdGhlciBmdW5jdGlvbiBjYXRjaGVzIHNjcm9sbGluZyBhcyBmYWxzZSBpbiBiZXR3ZWVuIHdoZW4gaXQgaXMgbm90XG59LCAzMCk7XG5cbnZhciBkcm9wID0gZnVuY3Rpb24gZHJvcChfcmVmKSB7XG4gIHZhciBvcmlnaW5hbEV2ZW50ID0gX3JlZi5vcmlnaW5hbEV2ZW50LFxuICAgICAgcHV0U29ydGFibGUgPSBfcmVmLnB1dFNvcnRhYmxlLFxuICAgICAgZHJhZ0VsID0gX3JlZi5kcmFnRWwsXG4gICAgICBhY3RpdmVTb3J0YWJsZSA9IF9yZWYuYWN0aXZlU29ydGFibGUsXG4gICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQgPSBfcmVmLmRpc3BhdGNoU29ydGFibGVFdmVudCxcbiAgICAgIGhpZGVHaG9zdEZvclRhcmdldCA9IF9yZWYuaGlkZUdob3N0Rm9yVGFyZ2V0LFxuICAgICAgdW5oaWRlR2hvc3RGb3JUYXJnZXQgPSBfcmVmLnVuaGlkZUdob3N0Rm9yVGFyZ2V0O1xuICBpZiAoIW9yaWdpbmFsRXZlbnQpIHJldHVybjtcbiAgdmFyIHRvU29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCBhY3RpdmVTb3J0YWJsZTtcbiAgaGlkZUdob3N0Rm9yVGFyZ2V0KCk7XG4gIHZhciB0b3VjaCA9IG9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXMgJiYgb3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPyBvcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdIDogb3JpZ2luYWxFdmVudDtcbiAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQodG91Y2guY2xpZW50WCwgdG91Y2guY2xpZW50WSk7XG4gIHVuaGlkZUdob3N0Rm9yVGFyZ2V0KCk7XG5cbiAgaWYgKHRvU29ydGFibGUgJiYgIXRvU29ydGFibGUuZWwuY29udGFpbnModGFyZ2V0KSkge1xuICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCgnc3BpbGwnKTtcbiAgICB0aGlzLm9uU3BpbGwoe1xuICAgICAgZHJhZ0VsOiBkcmFnRWwsXG4gICAgICBwdXRTb3J0YWJsZTogcHV0U29ydGFibGVcbiAgICB9KTtcbiAgfVxufTtcblxuZnVuY3Rpb24gUmV2ZXJ0KCkge31cblxuUmV2ZXJ0LnByb3RvdHlwZSA9IHtcbiAgc3RhcnRJbmRleDogbnVsbCxcbiAgZHJhZ1N0YXJ0OiBmdW5jdGlvbiBkcmFnU3RhcnQoX3JlZjIpIHtcbiAgICB2YXIgb2xkRHJhZ2dhYmxlSW5kZXggPSBfcmVmMi5vbGREcmFnZ2FibGVJbmRleDtcbiAgICB0aGlzLnN0YXJ0SW5kZXggPSBvbGREcmFnZ2FibGVJbmRleDtcbiAgfSxcbiAgb25TcGlsbDogZnVuY3Rpb24gb25TcGlsbChfcmVmMykge1xuICAgIHZhciBkcmFnRWwgPSBfcmVmMy5kcmFnRWwsXG4gICAgICAgIHB1dFNvcnRhYmxlID0gX3JlZjMucHV0U29ydGFibGU7XG4gICAgdGhpcy5zb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcblxuICAgIGlmIChwdXRTb3J0YWJsZSkge1xuICAgICAgcHV0U29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgfVxuXG4gICAgdmFyIG5leHRTaWJsaW5nID0gZ2V0Q2hpbGQodGhpcy5zb3J0YWJsZS5lbCwgdGhpcy5zdGFydEluZGV4LCB0aGlzLm9wdGlvbnMpO1xuXG4gICAgaWYgKG5leHRTaWJsaW5nKSB7XG4gICAgICB0aGlzLnNvcnRhYmxlLmVsLmluc2VydEJlZm9yZShkcmFnRWwsIG5leHRTaWJsaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zb3J0YWJsZS5lbC5hcHBlbmRDaGlsZChkcmFnRWwpO1xuICAgIH1cblxuICAgIHRoaXMuc29ydGFibGUuYW5pbWF0ZUFsbCgpO1xuXG4gICAgaWYgKHB1dFNvcnRhYmxlKSB7XG4gICAgICBwdXRTb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgfVxuICB9LFxuICBkcm9wOiBkcm9wXG59O1xuXG5fZXh0ZW5kcyhSZXZlcnQsIHtcbiAgcGx1Z2luTmFtZTogJ3JldmVydE9uU3BpbGwnXG59KTtcblxuZnVuY3Rpb24gUmVtb3ZlKCkge31cblxuUmVtb3ZlLnByb3RvdHlwZSA9IHtcbiAgb25TcGlsbDogZnVuY3Rpb24gb25TcGlsbChfcmVmNCkge1xuICAgIHZhciBkcmFnRWwgPSBfcmVmNC5kcmFnRWwsXG4gICAgICAgIHB1dFNvcnRhYmxlID0gX3JlZjQucHV0U29ydGFibGU7XG4gICAgdmFyIHBhcmVudFNvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgdGhpcy5zb3J0YWJsZTtcbiAgICBwYXJlbnRTb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICBkcmFnRWwucGFyZW50Tm9kZSAmJiBkcmFnRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkcmFnRWwpO1xuICAgIHBhcmVudFNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgfSxcbiAgZHJvcDogZHJvcFxufTtcblxuX2V4dGVuZHMoUmVtb3ZlLCB7XG4gIHBsdWdpbk5hbWU6ICdyZW1vdmVPblNwaWxsJ1xufSk7XG5cbnZhciBsYXN0U3dhcEVsO1xuXG5mdW5jdGlvbiBTd2FwUGx1Z2luKCkge1xuICBmdW5jdGlvbiBTd2FwKCkge1xuICAgIHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgICBzd2FwQ2xhc3M6ICdzb3J0YWJsZS1zd2FwLWhpZ2hsaWdodCdcbiAgICB9O1xuICB9XG5cbiAgU3dhcC5wcm90b3R5cGUgPSB7XG4gICAgZHJhZ1N0YXJ0OiBmdW5jdGlvbiBkcmFnU3RhcnQoX3JlZikge1xuICAgICAgdmFyIGRyYWdFbCA9IF9yZWYuZHJhZ0VsO1xuICAgICAgbGFzdFN3YXBFbCA9IGRyYWdFbDtcbiAgICB9LFxuICAgIGRyYWdPdmVyVmFsaWQ6IGZ1bmN0aW9uIGRyYWdPdmVyVmFsaWQoX3JlZjIpIHtcbiAgICAgIHZhciBjb21wbGV0ZWQgPSBfcmVmMi5jb21wbGV0ZWQsXG4gICAgICAgICAgdGFyZ2V0ID0gX3JlZjIudGFyZ2V0LFxuICAgICAgICAgIG9uTW92ZSA9IF9yZWYyLm9uTW92ZSxcbiAgICAgICAgICBhY3RpdmVTb3J0YWJsZSA9IF9yZWYyLmFjdGl2ZVNvcnRhYmxlLFxuICAgICAgICAgIGNoYW5nZWQgPSBfcmVmMi5jaGFuZ2VkLFxuICAgICAgICAgIGNhbmNlbCA9IF9yZWYyLmNhbmNlbDtcbiAgICAgIGlmICghYWN0aXZlU29ydGFibGUub3B0aW9ucy5zd2FwKSByZXR1cm47XG4gICAgICB2YXIgZWwgPSB0aGlzLnNvcnRhYmxlLmVsLFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBlbCkge1xuICAgICAgICB2YXIgcHJldlN3YXBFbCA9IGxhc3RTd2FwRWw7XG5cbiAgICAgICAgaWYgKG9uTW92ZSh0YXJnZXQpICE9PSBmYWxzZSkge1xuICAgICAgICAgIHRvZ2dsZUNsYXNzKHRhcmdldCwgb3B0aW9ucy5zd2FwQ2xhc3MsIHRydWUpO1xuICAgICAgICAgIGxhc3RTd2FwRWwgPSB0YXJnZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdFN3YXBFbCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJldlN3YXBFbCAmJiBwcmV2U3dhcEVsICE9PSBsYXN0U3dhcEVsKSB7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3MocHJldlN3YXBFbCwgb3B0aW9ucy5zd2FwQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaGFuZ2VkKCk7XG4gICAgICBjb21wbGV0ZWQodHJ1ZSk7XG4gICAgICBjYW5jZWwoKTtcbiAgICB9LFxuICAgIGRyb3A6IGZ1bmN0aW9uIGRyb3AoX3JlZjMpIHtcbiAgICAgIHZhciBhY3RpdmVTb3J0YWJsZSA9IF9yZWYzLmFjdGl2ZVNvcnRhYmxlLFxuICAgICAgICAgIHB1dFNvcnRhYmxlID0gX3JlZjMucHV0U29ydGFibGUsXG4gICAgICAgICAgZHJhZ0VsID0gX3JlZjMuZHJhZ0VsO1xuICAgICAgdmFyIHRvU29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCB0aGlzLnNvcnRhYmxlO1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICBsYXN0U3dhcEVsICYmIHRvZ2dsZUNsYXNzKGxhc3RTd2FwRWwsIG9wdGlvbnMuc3dhcENsYXNzLCBmYWxzZSk7XG5cbiAgICAgIGlmIChsYXN0U3dhcEVsICYmIChvcHRpb25zLnN3YXAgfHwgcHV0U29ydGFibGUgJiYgcHV0U29ydGFibGUub3B0aW9ucy5zd2FwKSkge1xuICAgICAgICBpZiAoZHJhZ0VsICE9PSBsYXN0U3dhcEVsKSB7XG4gICAgICAgICAgdG9Tb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgICAgICBpZiAodG9Tb3J0YWJsZSAhPT0gYWN0aXZlU29ydGFibGUpIGFjdGl2ZVNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgICAgICAgIHN3YXBOb2RlcyhkcmFnRWwsIGxhc3RTd2FwRWwpO1xuICAgICAgICAgIHRvU29ydGFibGUuYW5pbWF0ZUFsbCgpO1xuICAgICAgICAgIGlmICh0b1NvcnRhYmxlICE9PSBhY3RpdmVTb3J0YWJsZSkgYWN0aXZlU29ydGFibGUuYW5pbWF0ZUFsbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBudWxsaW5nOiBmdW5jdGlvbiBudWxsaW5nKCkge1xuICAgICAgbGFzdFN3YXBFbCA9IG51bGw7XG4gICAgfVxuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoU3dhcCwge1xuICAgIHBsdWdpbk5hbWU6ICdzd2FwJyxcbiAgICBldmVudFByb3BlcnRpZXM6IGZ1bmN0aW9uIGV2ZW50UHJvcGVydGllcygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN3YXBJdGVtOiBsYXN0U3dhcEVsXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN3YXBOb2RlcyhuMSwgbjIpIHtcbiAgdmFyIHAxID0gbjEucGFyZW50Tm9kZSxcbiAgICAgIHAyID0gbjIucGFyZW50Tm9kZSxcbiAgICAgIGkxLFxuICAgICAgaTI7XG4gIGlmICghcDEgfHwgIXAyIHx8IHAxLmlzRXF1YWxOb2RlKG4yKSB8fCBwMi5pc0VxdWFsTm9kZShuMSkpIHJldHVybjtcbiAgaTEgPSBpbmRleChuMSk7XG4gIGkyID0gaW5kZXgobjIpO1xuXG4gIGlmIChwMS5pc0VxdWFsTm9kZShwMikgJiYgaTEgPCBpMikge1xuICAgIGkyKys7XG4gIH1cblxuICBwMS5pbnNlcnRCZWZvcmUobjIsIHAxLmNoaWxkcmVuW2kxXSk7XG4gIHAyLmluc2VydEJlZm9yZShuMSwgcDIuY2hpbGRyZW5baTJdKTtcbn1cblxudmFyIG11bHRpRHJhZ0VsZW1lbnRzID0gW10sXG4gICAgbXVsdGlEcmFnQ2xvbmVzID0gW10sXG4gICAgbGFzdE11bHRpRHJhZ1NlbGVjdCxcbiAgICAvLyBmb3Igc2VsZWN0aW9uIHdpdGggbW9kaWZpZXIga2V5IGRvd24gKFNISUZUKVxubXVsdGlEcmFnU29ydGFibGUsXG4gICAgaW5pdGlhbEZvbGRpbmcgPSBmYWxzZSxcbiAgICAvLyBJbml0aWFsIG11bHRpLWRyYWcgZm9sZCB3aGVuIGRyYWcgc3RhcnRlZFxuZm9sZGluZyA9IGZhbHNlLFxuICAgIC8vIEZvbGRpbmcgYW55IG90aGVyIHRpbWVcbmRyYWdTdGFydGVkID0gZmFsc2UsXG4gICAgZHJhZ0VsJDEsXG4gICAgY2xvbmVzRnJvbVJlY3QsXG4gICAgY2xvbmVzSGlkZGVuO1xuXG5mdW5jdGlvbiBNdWx0aURyYWdQbHVnaW4oKSB7XG4gIGZ1bmN0aW9uIE11bHRpRHJhZyhzb3J0YWJsZSkge1xuICAgIC8vIEJpbmQgYWxsIHByaXZhdGUgbWV0aG9kc1xuICAgIGZvciAodmFyIGZuIGluIHRoaXMpIHtcbiAgICAgIGlmIChmbi5jaGFyQXQoMCkgPT09ICdfJyAmJiB0eXBlb2YgdGhpc1tmbl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzb3J0YWJsZS5vcHRpb25zLnN1cHBvcnRQb2ludGVyKSB7XG4gICAgICBvbihkb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb24oZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgICAgb24oZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICB9XG5cbiAgICBvbihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLl9jaGVja0tleURvd24pO1xuICAgIG9uKGRvY3VtZW50LCAna2V5dXAnLCB0aGlzLl9jaGVja0tleVVwKTtcbiAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgc2VsZWN0ZWRDbGFzczogJ3NvcnRhYmxlLXNlbGVjdGVkJyxcbiAgICAgIG11bHRpRHJhZ0tleTogbnVsbCxcbiAgICAgIHNldERhdGE6IGZ1bmN0aW9uIHNldERhdGEoZGF0YVRyYW5zZmVyLCBkcmFnRWwpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAnJztcblxuICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoICYmIG11bHRpRHJhZ1NvcnRhYmxlID09PSBzb3J0YWJsZSkge1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQsIGkpIHtcbiAgICAgICAgICAgIGRhdGEgKz0gKCFpID8gJycgOiAnLCAnKSArIG11bHRpRHJhZ0VsZW1lbnQudGV4dENvbnRlbnQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YSA9IGRyYWdFbC50ZXh0Q29udGVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGFUcmFuc2Zlci5zZXREYXRhKCdUZXh0JywgZGF0YSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIE11bHRpRHJhZy5wcm90b3R5cGUgPSB7XG4gICAgbXVsdGlEcmFnS2V5RG93bjogZmFsc2UsXG4gICAgaXNNdWx0aURyYWc6IGZhbHNlLFxuICAgIGRlbGF5U3RhcnRHbG9iYWw6IGZ1bmN0aW9uIGRlbGF5U3RhcnRHbG9iYWwoX3JlZikge1xuICAgICAgdmFyIGRyYWdnZWQgPSBfcmVmLmRyYWdFbDtcbiAgICAgIGRyYWdFbCQxID0gZHJhZ2dlZDtcbiAgICB9LFxuICAgIGRlbGF5RW5kZWQ6IGZ1bmN0aW9uIGRlbGF5RW5kZWQoKSB7XG4gICAgICB0aGlzLmlzTXVsdGlEcmFnID0gfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZHJhZ0VsJDEpO1xuICAgIH0sXG4gICAgc2V0dXBDbG9uZTogZnVuY3Rpb24gc2V0dXBDbG9uZShfcmVmMikge1xuICAgICAgdmFyIHNvcnRhYmxlID0gX3JlZjIuc29ydGFibGUsXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjIuY2FuY2VsO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzLnB1c2goY2xvbmUobXVsdGlEcmFnRWxlbWVudHNbaV0pKTtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzW2ldLnNvcnRhYmxlSW5kZXggPSBtdWx0aURyYWdFbGVtZW50c1tpXS5zb3J0YWJsZUluZGV4O1xuICAgICAgICBtdWx0aURyYWdDbG9uZXNbaV0uZHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICAgIG11bHRpRHJhZ0Nsb25lc1tpXS5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICcnO1xuICAgICAgICB0b2dnbGVDbGFzcyhtdWx0aURyYWdDbG9uZXNbaV0sIHRoaXMub3B0aW9ucy5zZWxlY3RlZENsYXNzLCBmYWxzZSk7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzW2ldID09PSBkcmFnRWwkMSAmJiB0b2dnbGVDbGFzcyhtdWx0aURyYWdDbG9uZXNbaV0sIHRoaXMub3B0aW9ucy5jaG9zZW5DbGFzcywgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBzb3J0YWJsZS5faGlkZUNsb25lKCk7XG5cbiAgICAgIGNhbmNlbCgpO1xuICAgIH0sXG4gICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKF9yZWYzKSB7XG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmMy5zb3J0YWJsZSxcbiAgICAgICAgICByb290RWwgPSBfcmVmMy5yb290RWwsXG4gICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50ID0gX3JlZjMuZGlzcGF0Y2hTb3J0YWJsZUV2ZW50LFxuICAgICAgICAgIGNhbmNlbCA9IF9yZWYzLmNhbmNlbDtcbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZykgcmV0dXJuO1xuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSkge1xuICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoICYmIG11bHRpRHJhZ1NvcnRhYmxlID09PSBzb3J0YWJsZSkge1xuICAgICAgICAgIGluc2VydE11bHRpRHJhZ0Nsb25lcyh0cnVlLCByb290RWwpO1xuICAgICAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCgnY2xvbmUnKTtcbiAgICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc2hvd0Nsb25lOiBmdW5jdGlvbiBzaG93Q2xvbmUoX3JlZjQpIHtcbiAgICAgIHZhciBjbG9uZU5vd1Nob3duID0gX3JlZjQuY2xvbmVOb3dTaG93bixcbiAgICAgICAgICByb290RWwgPSBfcmVmNC5yb290RWwsXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjQuY2FuY2VsO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG4gICAgICBpbnNlcnRNdWx0aURyYWdDbG9uZXMoZmFsc2UsIHJvb3RFbCk7XG4gICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgY3NzKGNsb25lLCAnZGlzcGxheScsICcnKTtcbiAgICAgIH0pO1xuICAgICAgY2xvbmVOb3dTaG93bigpO1xuICAgICAgY2xvbmVzSGlkZGVuID0gZmFsc2U7XG4gICAgICBjYW5jZWwoKTtcbiAgICB9LFxuICAgIGhpZGVDbG9uZTogZnVuY3Rpb24gaGlkZUNsb25lKF9yZWY1KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmNS5zb3J0YWJsZSxcbiAgICAgICAgICBjbG9uZU5vd0hpZGRlbiA9IF9yZWY1LmNsb25lTm93SGlkZGVuLFxuICAgICAgICAgIGNhbmNlbCA9IF9yZWY1LmNhbmNlbDtcbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZykgcmV0dXJuO1xuICAgICAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgIGNzcyhjbG9uZSwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuXG4gICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlICYmIGNsb25lLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBjbG9uZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjbG9uZU5vd0hpZGRlbigpO1xuICAgICAgY2xvbmVzSGlkZGVuID0gdHJ1ZTtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH0sXG4gICAgZHJhZ1N0YXJ0R2xvYmFsOiBmdW5jdGlvbiBkcmFnU3RhcnRHbG9iYWwoX3JlZjYpIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWY2LnNvcnRhYmxlO1xuXG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcgJiYgbXVsdGlEcmFnU29ydGFibGUpIHtcbiAgICAgICAgbXVsdGlEcmFnU29ydGFibGUubXVsdGlEcmFnLl9kZXNlbGVjdE11bHRpRHJhZygpO1xuICAgICAgfVxuXG4gICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnQuc29ydGFibGVJbmRleCA9IGluZGV4KG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgfSk7IC8vIFNvcnQgbXVsdGktZHJhZyBlbGVtZW50c1xuXG4gICAgICBtdWx0aURyYWdFbGVtZW50cyA9IG11bHRpRHJhZ0VsZW1lbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEuc29ydGFibGVJbmRleCAtIGIuc29ydGFibGVJbmRleDtcbiAgICAgIH0pO1xuICAgICAgZHJhZ1N0YXJ0ZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgZHJhZ1N0YXJ0ZWQ6IGZ1bmN0aW9uIGRyYWdTdGFydGVkKF9yZWY3KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIHNvcnRhYmxlID0gX3JlZjcuc29ydGFibGU7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zb3J0KSB7XG4gICAgICAgIC8vIENhcHR1cmUgcmVjdHMsXG4gICAgICAgIC8vIGhpZGUgbXVsdGkgZHJhZyBlbGVtZW50cyAoYnkgcG9zaXRpb25pbmcgdGhlbSBhYnNvbHV0ZSksXG4gICAgICAgIC8vIHNldCBtdWx0aSBkcmFnIGVsZW1lbnRzIHJlY3RzIHRvIGRyYWdSZWN0LFxuICAgICAgICAvLyBzaG93IG11bHRpIGRyYWcgZWxlbWVudHMsXG4gICAgICAgIC8vIGFuaW1hdGUgdG8gcmVjdHMsXG4gICAgICAgIC8vIHVuc2V0IHJlY3RzICYgcmVtb3ZlIGZyb20gRE9NXG4gICAgICAgIHNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQgPT09IGRyYWdFbCQxKSByZXR1cm47XG4gICAgICAgICAgICBjc3MobXVsdGlEcmFnRWxlbWVudCwgJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIGRyYWdSZWN0ID0gZ2V0UmVjdChkcmFnRWwkMSwgZmFsc2UsIHRydWUsIHRydWUpO1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuO1xuICAgICAgICAgICAgc2V0UmVjdChtdWx0aURyYWdFbGVtZW50LCBkcmFnUmVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZm9sZGluZyA9IHRydWU7XG4gICAgICAgICAgaW5pdGlhbEZvbGRpbmcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNvcnRhYmxlLmFuaW1hdGVBbGwoZnVuY3Rpb24gKCkge1xuICAgICAgICBmb2xkaW5nID0gZmFsc2U7XG4gICAgICAgIGluaXRpYWxGb2xkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKF90aGlzMi5vcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHVuc2V0UmVjdChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSAvLyBSZW1vdmUgYWxsIGF1eGlsaWFyeSBtdWx0aWRyYWcgaXRlbXMgZnJvbSBlbCwgaWYgc29ydGluZyBlbmFibGVkXG5cblxuICAgICAgICBpZiAoX3RoaXMyLm9wdGlvbnMuc29ydCkge1xuICAgICAgICAgIHJlbW92ZU11bHRpRHJhZ0VsZW1lbnRzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZHJhZ092ZXI6IGZ1bmN0aW9uIGRyYWdPdmVyKF9yZWY4KSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gX3JlZjgudGFyZ2V0LFxuICAgICAgICAgIGNvbXBsZXRlZCA9IF9yZWY4LmNvbXBsZXRlZCxcbiAgICAgICAgICBjYW5jZWwgPSBfcmVmOC5jYW5jZWw7XG5cbiAgICAgIGlmIChmb2xkaW5nICYmIH5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKHRhcmdldCkpIHtcbiAgICAgICAgY29tcGxldGVkKGZhbHNlKTtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXZlcnQ6IGZ1bmN0aW9uIHJldmVydChfcmVmOSkge1xuICAgICAgdmFyIGZyb21Tb3J0YWJsZSA9IF9yZWY5LmZyb21Tb3J0YWJsZSxcbiAgICAgICAgICByb290RWwgPSBfcmVmOS5yb290RWwsXG4gICAgICAgICAgc29ydGFibGUgPSBfcmVmOS5zb3J0YWJsZSxcbiAgICAgICAgICBkcmFnUmVjdCA9IF9yZWY5LmRyYWdSZWN0O1xuXG4gICAgICBpZiAobXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAvLyBTZXR1cCB1bmZvbGQgYW5pbWF0aW9uXG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICBzb3J0YWJsZS5hZGRBbmltYXRpb25TdGF0ZSh7XG4gICAgICAgICAgICB0YXJnZXQ6IG11bHRpRHJhZ0VsZW1lbnQsXG4gICAgICAgICAgICByZWN0OiBmb2xkaW5nID8gZ2V0UmVjdChtdWx0aURyYWdFbGVtZW50KSA6IGRyYWdSZWN0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdW5zZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQuZnJvbVJlY3QgPSBkcmFnUmVjdDtcbiAgICAgICAgICBmcm9tU29ydGFibGUucmVtb3ZlQW5pbWF0aW9uU3RhdGUobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICBmb2xkaW5nID0gZmFsc2U7XG4gICAgICAgIGluc2VydE11bHRpRHJhZ0VsZW1lbnRzKCF0aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUsIHJvb3RFbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckNvbXBsZXRlZDogZnVuY3Rpb24gZHJhZ092ZXJDb21wbGV0ZWQoX3JlZjEwKSB7XG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmMTAuc29ydGFibGUsXG4gICAgICAgICAgaXNPd25lciA9IF9yZWYxMC5pc093bmVyLFxuICAgICAgICAgIGluc2VydGlvbiA9IF9yZWYxMC5pbnNlcnRpb24sXG4gICAgICAgICAgYWN0aXZlU29ydGFibGUgPSBfcmVmMTAuYWN0aXZlU29ydGFibGUsXG4gICAgICAgICAgcGFyZW50RWwgPSBfcmVmMTAucGFyZW50RWwsXG4gICAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmMTAucHV0U29ydGFibGU7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgaWYgKGluc2VydGlvbikge1xuICAgICAgICAvLyBDbG9uZXMgbXVzdCBiZSBoaWRkZW4gYmVmb3JlIGZvbGRpbmcgYW5pbWF0aW9uIHRvIGNhcHR1cmUgZHJhZ1JlY3RBYnNvbHV0ZSBwcm9wZXJseVxuICAgICAgICBpZiAoaXNPd25lcikge1xuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9oaWRlQ2xvbmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluaXRpYWxGb2xkaW5nID0gZmFsc2U7IC8vIElmIGxlYXZpbmcgc29ydDpmYWxzZSByb290LCBvciBhbHJlYWR5IGZvbGRpbmcgLSBGb2xkIHRvIG5ldyBsb2NhdGlvblxuXG4gICAgICAgIGlmIChvcHRpb25zLmFuaW1hdGlvbiAmJiBtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxICYmIChmb2xkaW5nIHx8ICFpc093bmVyICYmICFhY3RpdmVTb3J0YWJsZS5vcHRpb25zLnNvcnQgJiYgIXB1dFNvcnRhYmxlKSkge1xuICAgICAgICAgIC8vIEZvbGQ6IFNldCBhbGwgbXVsdGkgZHJhZyBlbGVtZW50cydzIHJlY3RzIHRvIGRyYWdFbCdzIHJlY3Qgd2hlbiBtdWx0aS1kcmFnIGVsZW1lbnRzIGFyZSBpbnZpc2libGVcbiAgICAgICAgICB2YXIgZHJhZ1JlY3RBYnNvbHV0ZSA9IGdldFJlY3QoZHJhZ0VsJDEsIGZhbHNlLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjtcbiAgICAgICAgICAgIHNldFJlY3QobXVsdGlEcmFnRWxlbWVudCwgZHJhZ1JlY3RBYnNvbHV0ZSk7IC8vIE1vdmUgZWxlbWVudChzKSB0byBlbmQgb2YgcGFyZW50RWwgc28gdGhhdCBpdCBkb2VzIG5vdCBpbnRlcmZlcmUgd2l0aCBtdWx0aS1kcmFnIGNsb25lcyBpbnNlcnRpb24gaWYgdGhleSBhcmUgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIHdoaWxlIGZvbGRpbmcsIGFuZCBzbyB0aGF0IHdlIGNhbiBjYXB0dXJlIHRoZW0gYWdhaW4gYmVjYXVzZSBvbGQgc29ydGFibGUgd2lsbCBubyBsb25nZXIgYmUgZnJvbVNvcnRhYmxlXG5cbiAgICAgICAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZvbGRpbmcgPSB0cnVlO1xuICAgICAgICB9IC8vIENsb25lcyBtdXN0IGJlIHNob3duIChhbmQgY2hlY2sgdG8gcmVtb3ZlIG11bHRpIGRyYWdzKSBhZnRlciBmb2xkaW5nIHdoZW4gaW50ZXJmZXJpbmcgbXVsdGlEcmFnRWxlbWVudHMgYXJlIG1vdmVkIG91dFxuXG5cbiAgICAgICAgaWYgKCFpc093bmVyKSB7XG4gICAgICAgICAgLy8gT25seSByZW1vdmUgaWYgbm90IGZvbGRpbmcgKGZvbGRpbmcgd2lsbCByZW1vdmUgdGhlbSBhbnl3YXlzKVxuICAgICAgICAgIGlmICghZm9sZGluZykge1xuICAgICAgICAgICAgcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdmFyIGNsb25lc0hpZGRlbkJlZm9yZSA9IGNsb25lc0hpZGRlbjtcblxuICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuX3Nob3dDbG9uZShzb3J0YWJsZSk7IC8vIFVuZm9sZCBhbmltYXRpb24gZm9yIGNsb25lcyBpZiBzaG93aW5nIGZyb20gaGlkZGVuXG5cblxuICAgICAgICAgICAgaWYgKGFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuYW5pbWF0aW9uICYmICFjbG9uZXNIaWRkZW4gJiYgY2xvbmVzSGlkZGVuQmVmb3JlKSB7XG4gICAgICAgICAgICAgIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLmFkZEFuaW1hdGlvblN0YXRlKHtcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogY2xvbmUsXG4gICAgICAgICAgICAgICAgICByZWN0OiBjbG9uZXNGcm9tUmVjdFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNsb25lLmZyb21SZWN0ID0gY2xvbmVzRnJvbVJlY3Q7XG4gICAgICAgICAgICAgICAgY2xvbmUudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9zaG93Q2xvbmUoc29ydGFibGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZHJhZ092ZXJBbmltYXRpb25DYXB0dXJlOiBmdW5jdGlvbiBkcmFnT3ZlckFuaW1hdGlvbkNhcHR1cmUoX3JlZjExKSB7XG4gICAgICB2YXIgZHJhZ1JlY3QgPSBfcmVmMTEuZHJhZ1JlY3QsXG4gICAgICAgICAgaXNPd25lciA9IF9yZWYxMS5pc093bmVyLFxuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZjExLmFjdGl2ZVNvcnRhYmxlO1xuICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICBtdWx0aURyYWdFbGVtZW50LnRoaXNBbmltYXRpb25EdXJhdGlvbiA9IG51bGw7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuYW5pbWF0aW9uICYmICFpc093bmVyICYmIGFjdGl2ZVNvcnRhYmxlLm11bHRpRHJhZy5pc011bHRpRHJhZykge1xuICAgICAgICBjbG9uZXNGcm9tUmVjdCA9IF9leHRlbmRzKHt9LCBkcmFnUmVjdCk7XG4gICAgICAgIHZhciBkcmFnTWF0cml4ID0gbWF0cml4KGRyYWdFbCQxLCB0cnVlKTtcbiAgICAgICAgY2xvbmVzRnJvbVJlY3QudG9wIC09IGRyYWdNYXRyaXguZjtcbiAgICAgICAgY2xvbmVzRnJvbVJlY3QubGVmdCAtPSBkcmFnTWF0cml4LmU7XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckFuaW1hdGlvbkNvbXBsZXRlOiBmdW5jdGlvbiBkcmFnT3ZlckFuaW1hdGlvbkNvbXBsZXRlKCkge1xuICAgICAgaWYgKGZvbGRpbmcpIHtcbiAgICAgICAgZm9sZGluZyA9IGZhbHNlO1xuICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZHJvcDogZnVuY3Rpb24gZHJvcChfcmVmMTIpIHtcbiAgICAgIHZhciBldnQgPSBfcmVmMTIub3JpZ2luYWxFdmVudCxcbiAgICAgICAgICByb290RWwgPSBfcmVmMTIucm9vdEVsLFxuICAgICAgICAgIHBhcmVudEVsID0gX3JlZjEyLnBhcmVudEVsLFxuICAgICAgICAgIHNvcnRhYmxlID0gX3JlZjEyLnNvcnRhYmxlLFxuICAgICAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCA9IF9yZWYxMi5kaXNwYXRjaFNvcnRhYmxlRXZlbnQsXG4gICAgICAgICAgb2xkSW5kZXggPSBfcmVmMTIub2xkSW5kZXgsXG4gICAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmMTIucHV0U29ydGFibGU7XG4gICAgICB2YXIgdG9Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IHRoaXMuc29ydGFibGU7XG4gICAgICBpZiAoIWV2dCkgcmV0dXJuO1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBwYXJlbnRFbC5jaGlsZHJlbjsgLy8gTXVsdGktZHJhZyBzZWxlY3Rpb25cblxuICAgICAgaWYgKCFkcmFnU3RhcnRlZCkge1xuICAgICAgICBpZiAob3B0aW9ucy5tdWx0aURyYWdLZXkgJiYgIXRoaXMubXVsdGlEcmFnS2V5RG93bikge1xuICAgICAgICAgIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0b2dnbGVDbGFzcyhkcmFnRWwkMSwgb3B0aW9ucy5zZWxlY3RlZENsYXNzLCAhfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZHJhZ0VsJDEpKTtcblxuICAgICAgICBpZiAoIX5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGRyYWdFbCQxKSkge1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnB1c2goZHJhZ0VsJDEpO1xuICAgICAgICAgIGRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlLFxuICAgICAgICAgICAgcm9vdEVsOiByb290RWwsXG4gICAgICAgICAgICBuYW1lOiAnc2VsZWN0JyxcbiAgICAgICAgICAgIHRhcmdldEVsOiBkcmFnRWwkMSxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZ0OiBldnRcbiAgICAgICAgICB9KTsgLy8gTW9kaWZpZXIgYWN0aXZhdGVkLCBzZWxlY3QgZnJvbSBsYXN0IHRvIGRyYWdFbFxuXG4gICAgICAgICAgaWYgKGV2dC5zaGlmdEtleSAmJiBsYXN0TXVsdGlEcmFnU2VsZWN0ICYmIHNvcnRhYmxlLmVsLmNvbnRhaW5zKGxhc3RNdWx0aURyYWdTZWxlY3QpKSB7XG4gICAgICAgICAgICB2YXIgbGFzdEluZGV4ID0gaW5kZXgobGFzdE11bHRpRHJhZ1NlbGVjdCksXG4gICAgICAgICAgICAgICAgY3VycmVudEluZGV4ID0gaW5kZXgoZHJhZ0VsJDEpO1xuXG4gICAgICAgICAgICBpZiAofmxhc3RJbmRleCAmJiB+Y3VycmVudEluZGV4ICYmIGxhc3RJbmRleCAhPT0gY3VycmVudEluZGV4KSB7XG4gICAgICAgICAgICAgIC8vIE11c3QgaW5jbHVkZSBsYXN0TXVsdGlEcmFnU2VsZWN0IChzZWxlY3QgaXQpLCBpbiBjYXNlIG1vZGlmaWVkIHNlbGVjdGlvbiBmcm9tIG5vIHNlbGVjdGlvblxuICAgICAgICAgICAgICAvLyAoYnV0IHByZXZpb3VzIHNlbGVjdGlvbiBleGlzdGVkKVxuICAgICAgICAgICAgICB2YXIgbiwgaTtcblxuICAgICAgICAgICAgICBpZiAoY3VycmVudEluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgaSA9IGxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICBuID0gY3VycmVudEluZGV4O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGkgPSBjdXJyZW50SW5kZXg7XG4gICAgICAgICAgICAgICAgbiA9IGxhc3RJbmRleCArIDE7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBmb3IgKDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihjaGlsZHJlbltpXSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGNoaWxkcmVuW2ldLCBvcHRpb25zLnNlbGVjdGVkQ2xhc3MsIHRydWUpO1xuICAgICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlLFxuICAgICAgICAgICAgICAgICAgcm9vdEVsOiByb290RWwsXG4gICAgICAgICAgICAgICAgICBuYW1lOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgIHRhcmdldEVsOiBjaGlsZHJlbltpXSxcbiAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZ0OiBldnRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYXN0TXVsdGlEcmFnU2VsZWN0ID0gZHJhZ0VsJDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbXVsdGlEcmFnU29ydGFibGUgPSB0b1NvcnRhYmxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnNwbGljZShtdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGRyYWdFbCQxKSwgMSk7XG4gICAgICAgICAgbGFzdE11bHRpRHJhZ1NlbGVjdCA9IG51bGw7XG4gICAgICAgICAgZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgICAgICByb290RWw6IHJvb3RFbCxcbiAgICAgICAgICAgIG5hbWU6ICdkZXNlbGVjdCcsXG4gICAgICAgICAgICB0YXJnZXRFbDogZHJhZ0VsJDEsXG4gICAgICAgICAgICBvcmlnaW5hbEV2dDogZXZ0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gTXVsdGktZHJhZyBkcm9wXG5cblxuICAgICAgaWYgKGRyYWdTdGFydGVkICYmIHRoaXMuaXNNdWx0aURyYWcpIHtcbiAgICAgICAgLy8gRG8gbm90IFwidW5mb2xkXCIgYWZ0ZXIgYXJvdW5kIGRyYWdFbCBpZiByZXZlcnRlZFxuICAgICAgICBpZiAoKHBhcmVudEVsW2V4cGFuZG9dLm9wdGlvbnMuc29ydCB8fCBwYXJlbnRFbCAhPT0gcm9vdEVsKSAmJiBtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgdmFyIGRyYWdSZWN0ID0gZ2V0UmVjdChkcmFnRWwkMSksXG4gICAgICAgICAgICAgIG11bHRpRHJhZ0luZGV4ID0gaW5kZXgoZHJhZ0VsJDEsICc6bm90KC4nICsgdGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MgKyAnKScpO1xuICAgICAgICAgIGlmICghaW5pdGlhbEZvbGRpbmcgJiYgb3B0aW9ucy5hbmltYXRpb24pIGRyYWdFbCQxLnRoaXNBbmltYXRpb25EdXJhdGlvbiA9IG51bGw7XG4gICAgICAgICAgdG9Tb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcblxuICAgICAgICAgIGlmICghaW5pdGlhbEZvbGRpbmcpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgICBkcmFnRWwkMS5mcm9tUmVjdCA9IGRyYWdSZWN0O1xuICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQgIT09IGRyYWdFbCQxKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcmVjdCA9IGZvbGRpbmcgPyBnZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQpIDogZHJhZ1JlY3Q7XG4gICAgICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50LmZyb21SZWN0ID0gcmVjdDsgLy8gUHJlcGFyZSB1bmZvbGQgYW5pbWF0aW9uXG5cbiAgICAgICAgICAgICAgICAgIHRvU29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IG11bHRpRHJhZ0VsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHJlY3Q6IHJlY3RcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IC8vIE11bHRpIGRyYWcgZWxlbWVudHMgYXJlIG5vdCBuZWNlc3NhcmlseSByZW1vdmVkIGZyb20gdGhlIERPTSBvbiBkcm9wLCBzbyB0byByZWluc2VydFxuICAgICAgICAgICAgLy8gcHJvcGVybHkgdGhleSBtdXN0IGFsbCBiZSByZW1vdmVkXG5cblxuICAgICAgICAgICAgcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKTtcbiAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuW211bHRpRHJhZ0luZGV4XSkge1xuICAgICAgICAgICAgICAgIHBhcmVudEVsLmluc2VydEJlZm9yZShtdWx0aURyYWdFbGVtZW50LCBjaGlsZHJlblttdWx0aURyYWdJbmRleF0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgbXVsdGlEcmFnSW5kZXgrKztcbiAgICAgICAgICAgIH0pOyAvLyBJZiBpbml0aWFsIGZvbGRpbmcgaXMgZG9uZSwgdGhlIGVsZW1lbnRzIG1heSBoYXZlIGNoYW5nZWQgcG9zaXRpb24gYmVjYXVzZSB0aGV5IGFyZSBub3dcbiAgICAgICAgICAgIC8vIHVuZm9sZGluZyBhcm91bmQgZHJhZ0VsLCBldmVuIHRob3VnaCBkcmFnRWwgbWF5IG5vdCBoYXZlIGhpcyBpbmRleCBjaGFuZ2VkLCBzbyB1cGRhdGUgZXZlbnRcbiAgICAgICAgICAgIC8vIG11c3QgYmUgZmlyZWQgaGVyZSBhcyBTb3J0YWJsZSB3aWxsIG5vdC5cblxuICAgICAgICAgICAgaWYgKG9sZEluZGV4ID09PSBpbmRleChkcmFnRWwkMSkpIHtcbiAgICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQuc29ydGFibGVJbmRleCAhPT0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBpZiAodXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KCd1cGRhdGUnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gLy8gTXVzdCBiZSBkb25lIGFmdGVyIGNhcHR1cmluZyBpbmRpdmlkdWFsIHJlY3RzIChzY3JvbGwgYmFyKVxuXG5cbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICB1bnNldFJlY3QobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdG9Tb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHRvU29ydGFibGU7XG4gICAgICB9IC8vIFJlbW92ZSBjbG9uZXMgaWYgbmVjZXNzYXJ5XG5cblxuICAgICAgaWYgKHJvb3RFbCA9PT0gcGFyZW50RWwgfHwgcHV0U29ydGFibGUgJiYgcHV0U29ydGFibGUubGFzdFB1dE1vZGUgIT09ICdjbG9uZScpIHtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgICAgY2xvbmUucGFyZW50Tm9kZSAmJiBjbG9uZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBudWxsaW5nR2xvYmFsOiBmdW5jdGlvbiBudWxsaW5nR2xvYmFsKCkge1xuICAgICAgdGhpcy5pc011bHRpRHJhZyA9IGRyYWdTdGFydGVkID0gZmFsc2U7XG4gICAgICBtdWx0aURyYWdDbG9uZXMubGVuZ3RoID0gMDtcbiAgICB9LFxuICAgIGRlc3Ryb3lHbG9iYWw6IGZ1bmN0aW9uIGRlc3Ryb3lHbG9iYWwoKSB7XG4gICAgICB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZygpO1xuXG4gICAgICBvZmYoZG9jdW1lbnQsICdwb2ludGVydXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvZmYoZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvZmYoZG9jdW1lbnQsICdrZXlkb3duJywgdGhpcy5fY2hlY2tLZXlEb3duKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ2tleXVwJywgdGhpcy5fY2hlY2tLZXlVcCk7XG4gICAgfSxcbiAgICBfZGVzZWxlY3RNdWx0aURyYWc6IGZ1bmN0aW9uIF9kZXNlbGVjdE11bHRpRHJhZyhldnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZHJhZ1N0YXJ0ZWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZHJhZ1N0YXJ0ZWQpIHJldHVybjsgLy8gT25seSBkZXNlbGVjdCBpZiBzZWxlY3Rpb24gaXMgaW4gdGhpcyBzb3J0YWJsZVxuXG4gICAgICBpZiAobXVsdGlEcmFnU29ydGFibGUgIT09IHRoaXMuc29ydGFibGUpIHJldHVybjsgLy8gT25seSBkZXNlbGVjdCBpZiB0YXJnZXQgaXMgbm90IGl0ZW0gaW4gdGhpcyBzb3J0YWJsZVxuXG4gICAgICBpZiAoZXZ0ICYmIGNsb3Nlc3QoZXZ0LnRhcmdldCwgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSwgdGhpcy5zb3J0YWJsZS5lbCwgZmFsc2UpKSByZXR1cm47IC8vIE9ubHkgZGVzZWxlY3QgaWYgbGVmdCBjbGlja1xuXG4gICAgICBpZiAoZXZ0ICYmIGV2dC5idXR0b24gIT09IDApIHJldHVybjtcblxuICAgICAgd2hpbGUgKG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICB2YXIgZWwgPSBtdWx0aURyYWdFbGVtZW50c1swXTtcbiAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHRoaXMub3B0aW9ucy5zZWxlY3RlZENsYXNzLCBmYWxzZSk7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnNoaWZ0KCk7XG4gICAgICAgIGRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLnNvcnRhYmxlLFxuICAgICAgICAgIHJvb3RFbDogdGhpcy5zb3J0YWJsZS5lbCxcbiAgICAgICAgICBuYW1lOiAnZGVzZWxlY3QnLFxuICAgICAgICAgIHRhcmdldEVsOiBlbCxcbiAgICAgICAgICBvcmlnaW5hbEV2dDogZXZ0XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgX2NoZWNrS2V5RG93bjogZnVuY3Rpb24gX2NoZWNrS2V5RG93bihldnQpIHtcbiAgICAgIGlmIChldnQua2V5ID09PSB0aGlzLm9wdGlvbnMubXVsdGlEcmFnS2V5KSB7XG4gICAgICAgIHRoaXMubXVsdGlEcmFnS2V5RG93biA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBfY2hlY2tLZXlVcDogZnVuY3Rpb24gX2NoZWNrS2V5VXAoZXZ0KSB7XG4gICAgICBpZiAoZXZ0LmtleSA9PT0gdGhpcy5vcHRpb25zLm11bHRpRHJhZ0tleSkge1xuICAgICAgICB0aGlzLm11bHRpRHJhZ0tleURvd24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyhNdWx0aURyYWcsIHtcbiAgICAvLyBTdGF0aWMgbWV0aG9kcyAmIHByb3BlcnRpZXNcbiAgICBwbHVnaW5OYW1lOiAnbXVsdGlEcmFnJyxcbiAgICB1dGlsczoge1xuICAgICAgLyoqXHJcbiAgICAgICAqIFNlbGVjdHMgdGhlIHByb3ZpZGVkIG11bHRpLWRyYWcgaXRlbVxyXG4gICAgICAgKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwgICAgVGhlIGVsZW1lbnQgdG8gYmUgc2VsZWN0ZWRcclxuICAgICAgICovXG4gICAgICBzZWxlY3Q6IGZ1bmN0aW9uIHNlbGVjdChlbCkge1xuICAgICAgICB2YXIgc29ydGFibGUgPSBlbC5wYXJlbnROb2RlW2V4cGFuZG9dO1xuICAgICAgICBpZiAoIXNvcnRhYmxlIHx8ICFzb3J0YWJsZS5vcHRpb25zLm11bHRpRHJhZyB8fCB+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihlbCkpIHJldHVybjtcblxuICAgICAgICBpZiAobXVsdGlEcmFnU29ydGFibGUgJiYgbXVsdGlEcmFnU29ydGFibGUgIT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgbXVsdGlEcmFnU29ydGFibGUubXVsdGlEcmFnLl9kZXNlbGVjdE11bHRpRHJhZygpO1xuXG4gICAgICAgICAgbXVsdGlEcmFnU29ydGFibGUgPSBzb3J0YWJsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvZ2dsZUNsYXNzKGVsLCBzb3J0YWJsZS5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIHRydWUpO1xuICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5wdXNoKGVsKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBEZXNlbGVjdHMgdGhlIHByb3ZpZGVkIG11bHRpLWRyYWcgaXRlbVxyXG4gICAgICAgKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwgICAgVGhlIGVsZW1lbnQgdG8gYmUgZGVzZWxlY3RlZFxyXG4gICAgICAgKi9cbiAgICAgIGRlc2VsZWN0OiBmdW5jdGlvbiBkZXNlbGVjdChlbCkge1xuICAgICAgICB2YXIgc29ydGFibGUgPSBlbC5wYXJlbnROb2RlW2V4cGFuZG9dLFxuICAgICAgICAgICAgaW5kZXggPSBtdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGVsKTtcbiAgICAgICAgaWYgKCFzb3J0YWJsZSB8fCAhc29ydGFibGUub3B0aW9ucy5tdWx0aURyYWcgfHwgIX5pbmRleCkgcmV0dXJuO1xuICAgICAgICB0b2dnbGVDbGFzcyhlbCwgc29ydGFibGUub3B0aW9ucy5zZWxlY3RlZENsYXNzLCBmYWxzZSk7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBldmVudFByb3BlcnRpZXM6IGZ1bmN0aW9uIGV2ZW50UHJvcGVydGllcygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgb2xkSW5kaWNpZXMgPSBbXSxcbiAgICAgICAgICBuZXdJbmRpY2llcyA9IFtdO1xuICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICBvbGRJbmRpY2llcy5wdXNoKHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50OiBtdWx0aURyYWdFbGVtZW50LFxuICAgICAgICAgIGluZGV4OiBtdWx0aURyYWdFbGVtZW50LnNvcnRhYmxlSW5kZXhcbiAgICAgICAgfSk7IC8vIG11bHRpRHJhZ0VsZW1lbnRzIHdpbGwgYWxyZWFkeSBiZSBzb3J0ZWQgaWYgZm9sZGluZ1xuXG4gICAgICAgIHZhciBuZXdJbmRleDtcblxuICAgICAgICBpZiAoZm9sZGluZyAmJiBtdWx0aURyYWdFbGVtZW50ICE9PSBkcmFnRWwkMSkge1xuICAgICAgICAgIG5ld0luZGV4ID0gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9sZGluZykge1xuICAgICAgICAgIG5ld0luZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCwgJzpub3QoLicgKyBfdGhpczMub3B0aW9ucy5zZWxlY3RlZENsYXNzICsgJyknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdJbmRleCA9IGluZGV4KG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3SW5kaWNpZXMucHVzaCh7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICBpbmRleDogbmV3SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGl0ZW1zOiBfdG9Db25zdW1hYmxlQXJyYXkobXVsdGlEcmFnRWxlbWVudHMpLFxuICAgICAgICBjbG9uZXM6IFtdLmNvbmNhdChtdWx0aURyYWdDbG9uZXMpLFxuICAgICAgICBvbGRJbmRpY2llczogb2xkSW5kaWNpZXMsXG4gICAgICAgIG5ld0luZGljaWVzOiBuZXdJbmRpY2llc1xuICAgICAgfTtcbiAgICB9LFxuICAgIG9wdGlvbkxpc3RlbmVyczoge1xuICAgICAgbXVsdGlEcmFnS2V5OiBmdW5jdGlvbiBtdWx0aURyYWdLZXkoa2V5KSB7XG4gICAgICAgIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGlmIChrZXkgPT09ICdjdHJsJykge1xuICAgICAgICAgIGtleSA9ICdDb250cm9sJztcbiAgICAgICAgfSBlbHNlIGlmIChrZXkubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGtleSA9IGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zdWJzdHIoMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGluc2VydE11bHRpRHJhZ0VsZW1lbnRzKGNsb25lc0luc2VydGVkLCByb290RWwpIHtcbiAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCwgaSkge1xuICAgIHZhciB0YXJnZXQgPSByb290RWwuY2hpbGRyZW5bbXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4ICsgKGNsb25lc0luc2VydGVkID8gTnVtYmVyKGkpIDogMCldO1xuXG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgcm9vdEVsLmluc2VydEJlZm9yZShtdWx0aURyYWdFbGVtZW50LCB0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290RWwuYXBwZW5kQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxyXG4gKiBJbnNlcnQgbXVsdGktZHJhZyBjbG9uZXNcclxuICogQHBhcmFtICB7W0Jvb2xlYW5dfSBlbGVtZW50c0luc2VydGVkICBXaGV0aGVyIHRoZSBtdWx0aS1kcmFnIGVsZW1lbnRzIGFyZSBpbnNlcnRlZFxyXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gcm9vdEVsXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydE11bHRpRHJhZ0Nsb25lcyhlbGVtZW50c0luc2VydGVkLCByb290RWwpIHtcbiAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lLCBpKSB7XG4gICAgdmFyIHRhcmdldCA9IHJvb3RFbC5jaGlsZHJlbltjbG9uZS5zb3J0YWJsZUluZGV4ICsgKGVsZW1lbnRzSW5zZXJ0ZWQgPyBOdW1iZXIoaSkgOiAwKV07XG5cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGNsb25lLCB0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290RWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU11bHRpRHJhZ0VsZW1lbnRzKCkge1xuICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQgPT09IGRyYWdFbCQxKSByZXR1cm47XG4gICAgbXVsdGlEcmFnRWxlbWVudC5wYXJlbnROb2RlICYmIG11bHRpRHJhZ0VsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChtdWx0aURyYWdFbGVtZW50KTtcbiAgfSk7XG59XG5cblNvcnRhYmxlLm1vdW50KG5ldyBBdXRvU2Nyb2xsUGx1Z2luKCkpO1xuU29ydGFibGUubW91bnQoUmVtb3ZlLCBSZXZlcnQpO1xuXG5leHBvcnQgZGVmYXVsdCBTb3J0YWJsZTtcbmV4cG9ydCB7IE11bHRpRHJhZ1BsdWdpbiBhcyBNdWx0aURyYWcsIFNvcnRhYmxlLCBTd2FwUGx1Z2luIGFzIFN3YXAgfTtcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uc2Nzcz92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcIm1haW5cIiB9LCBbXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJ0b2RvLWFwcFwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2hlbGlrLWlucHV0XCIgfSwgW1xuICAgICAgICBfYyhcImRpdlwiLCBbXG4gICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICAgICAgICDQmNC80Y8g0YfQtdC70LjQutCwOiBcIiksXG4gICAgICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IF92bS5uYW1lRmlyc3QsXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJuYW1lRmlyc3RcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm5hbWVGaXJzdCB9LFxuICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdm0ubmFtZUZpcnN0ID0gJGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiZGl2XCIsIFtcbiAgICAgICAgICBfdm0uX3YoXCJcXG4gICAgICAgICAgICAgINCk0LDQvNC40LvQuNGPINGH0LXQu9C40LrQsDogXCIpLFxuICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubmFtZVNlY29uZCxcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcIm5hbWVTZWNvbmRcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm5hbWVTZWNvbmQgfSxcbiAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3ZtLm5hbWVTZWNvbmQgPSAkZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pLFxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJkaXZcIiwgW1xuICAgICAgICAgIF92bS5fdihcIlxcbiAgICAgICAgICAgICAg0J7RgtGH0LXRgdGC0LLQviDRh9C10LvQuNC60LA6IFwiKSxcbiAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm5hbWVMYXN0LFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwibmFtZUxhc3RcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm5hbWVMYXN0IH0sXG4gICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF92bS5uYW1lTGFzdCA9ICRldmVudC50YXJnZXQudmFsdWVcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSksXG4gICAgICAgIF0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImRpdlwiLCBbXG4gICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICAgICAgICDQktC+0LfRgNCw0YHRgiDRh9C10LvQuNC60LA6IFwiKSxcbiAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmFnZSxcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcImFnZVwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uYWdlIH0sXG4gICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF92bS5hZ2UgPSAkZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pLFxuICAgICAgICBdKSxcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiYnV0dG9uXCIsIHsgb246IHsgY2xpY2s6IF92bS5hZGROZXcgfSB9LCBbX3ZtLl92KFwi0JTQvtCx0LDQstC40YLRjFwiKV0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiYnV0dG9uXCIsIHsgb246IHsgY2xpY2s6IF92bS5jbGVhcklucHV0IH0gfSwgW192bS5fdihcItCe0YfQuNGB0LjRgtGMINCy0LLQvtC0XCIpXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLnNob3dGcm9tTG9jYWxcbiAgICAgICAgPyBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNoZWxpay10YWJsZVwiIH0sIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNoZWxpay1pbmZvX193cmFwXCIgfSxcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2hlbGlrLWluZm9fX3RpdGxlXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwi0JfQsNC/0L7QvNC90LXQvdC+XCIpLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX3ZtLl9tKDApLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICBcImRyYWdnYWJsZVwiLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjaGVsaWstaW5mb19fbGlzdFwiLFxuICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgIGdyb3VwOiBcInBlb3BsZXNcIixcbiAgICAgICAgICAgICAgICAgICAgICB0YWc6IFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJnaG9zdC1jbGFzc1wiOiBcIm1vdmluZy1pdGVtXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5wZW9wbGVzLFxuICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoJCR2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0ucGVvcGxlcyA9ICQkdlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJwZW9wbGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5wZW9wbGVzLCBmdW5jdGlvbiAoY2hlbGlrLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoXG4gICAgICAgICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGNoZWxpay5uYW1lRmlyc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjaGVsaWstaW5mb19faXRlbVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjaGVsaWstaW5mb19faXRlbS1pbmRleFwiIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhpbmRleCArIDEpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2hlbGlrLWluZm9fX2l0ZW0tbmFtZVwiIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlbGlrLm5hbWVGaXJzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoXCJzcGFuXCIsIFtfdm0uX3YoX3ZtLl9zKGNoZWxpay5uYW1lRmlyc3QpKV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlbGlrLm5hbWVTZWNvbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKFwic3BhblwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiArIF92bS5fcyhjaGVsaWsubmFtZVNlY29uZCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVsaWsubmFtZUxhc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKFwic3BhblwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiArIF92bS5fcyhjaGVsaWsubmFtZUxhc3QpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2hlbGlrLWluZm9fX2l0ZW0tYWdlXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVsaWsuc2F2ZWRBZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKFwic3BhblwiLCBbX3ZtLl92KF92bS5fcyhjaGVsaWsuc2F2ZWRBZ2UpKV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2hlbGlrLWluZm9fX2l0ZW0tZGVsXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5kZWxldGVDaGVsaWsoaW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihcIlhcIildXG4gICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJidXR0b25cIiwgeyBvbjogeyBjbGljazogX3ZtLmNsZWFyTG9jYWwgfSB9LCBbXG4gICAgICAgICAgICAgIF92bS5fdihcItCe0YfQuNGB0YLQuNGC0YxcIiksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdKVxuICAgICAgICA6IF92bS5fZSgpLFxuICAgIF0pLFxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2hlbGlrLWluZm9fX3Byb3BlcnRpZXMtbGlzdFwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2hlbGlrLWluZm9fX3Byb3BlcnRpZXMtaW5kZXhcIiB9LCBbXG4gICAgICAgIF92bS5fdihcItCd0L7QvNC10YA6XCIpLFxuICAgICAgXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjaGVsaWstaW5mb19fcHJvcGVydGllcy1uYW1lXCIgfSwgW1xuICAgICAgICBfdm0uX3YoXCLQpNCY0J46XCIpLFxuICAgICAgXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjaGVsaWstaW5mb19fcHJvcGVydGllcy1hZ2VcIiB9LCBbXG4gICAgICAgIF92bS5fdihcItCS0L7Qt9GA0LDRgdGCOlwiKSxcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2hlbGlrLWluZm9fX3Byb3BlcnRpZXMtYmxhbmtcIiB9KSxcbiAgICBdKVxuICB9LFxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgKG9wdGlvbnMuZnVuY3Rpb25hbCA/IHRoaXMucGFyZW50IDogdGhpcykuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdFxuICAgICAgICApXG4gICAgICB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIiwiLyohXG4gKiBWdWUuanMgdjIuNi4xNFxuICogKGMpIDIwMTQtMjAyMSBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiAoXG4gICAgaXNEZWYodmFsKSAmJlxuICAgIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCcsXG4gICdzZXJ2ZXJQcmVmZXRjaCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLlxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAqIHNraXBwaW5nIFxcdTEwMDAwLVxcdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlNcbiAqL1xudmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgoXCJbXlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiLiRfXFxcXGRdXCIpKTtcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xudmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7XG52YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbmlmIChpbkJyb3dzZXIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCAncGFzc2l2ZScsICh7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QtcGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG4vLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmVcbi8vIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgY2FuIHNldCBWVUVfRU5WXG52YXIgX2lzU2VydmVyO1xudmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3NlciAmJiAhaW5XZWV4ICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddICYmIGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xuXG52YXIgX1NldDtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm07XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICBpZiAoRGVwLnRhcmdldCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAvLyBzdWJzIGFyZW4ndCBzb3J0ZWQgaW4gc2NoZWR1bGVyIGlmIG5vdCBydW5uaW5nIGFzeW5jXG4gICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxuICAgIC8vIG9yZGVyXG4gICAgc3Vicy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIFRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlclxuLy8gY2FuIGJlIGV2YWx1YXRlZCBhdCBhIHRpbWUuXG5EZXAudGFyZ2V0ID0gbnVsbDtcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0ICh0YXJnZXQpIHtcbiAgdGFyZ2V0U3RhY2sucHVzaCh0YXJnZXQpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICB0YXJnZXRTdGFjay5wb3AoKTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrW3RhcmdldFN0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnMsXG4gIGFzeW5jRmFjdG9yeVxuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIC8vICM3OTc1XG4gICAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nXG4gICAgLy8gYSBjaGlsZC5cbiAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbi8qXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcbiAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICovXG5cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xudmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XG5cbnZhciBtZXRob2RzVG9QYXRjaCA9IFtcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl07XG5cbi8qKlxuICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gKi9cbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpO1xuXG4vKipcbiAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQnc1xuICogdXBkYXRlIGNvbXB1dGF0aW9uLlxuICovXG52YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyAodmFsdWUpIHtcbiAgc2hvdWxkT2JzZXJ2ZSA9IHZhbHVlO1xufVxuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGhlIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGlmIChoYXNQcm90bykge1xuICAgICAgcHJvdG9BdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIH1cbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5c1tpXSk7XG4gIH1cbn07XG5cbi8qKlxuICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gIH1cbn07XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDtcbiAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXJcbiAgICAgIGlmIChnZXR0ZXIgJiYgIXNldHRlcikgeyByZXR1cm4gfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGRlZmluZVJlYWN0aXZlJCQxKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IGRlbGV0ZSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEpO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGRlbGV0aW5nIHByb3BlcnRpZXMgb24gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghaGFzT3duKHRhcmdldCwga2V5KSkge1xuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgaWYgKCFvYikge1xuICAgIHJldHVyblxuICB9XG4gIG9iLmRlcC5ub3RpZnkoKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxuICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gKi9cbmZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkge1xuICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG52YXIgc3RyYXRzID0gY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcblxuLyoqXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG5cbiAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICA/IFJlZmxlY3Qub3duS2V5cyhmcm9tKVxuICAgIDogT2JqZWN0LmtleXMoZnJvbSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICAvLyBpbiBjYXNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBvYnNlcnZlZC4uLlxuICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJlxuICAgICAgaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QoZnJvbVZhbClcbiAgICApIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBwYXJlbnRWYWw7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsKVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pXG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHZhciByZXMgPSBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWw7XG4gIHJldHVybiByZXNcbiAgICA/IGRlZHVwZUhvb2tzKHJlcylcbiAgICA6IHJlc1xufVxuXG5mdW5jdGlvbiBkZWR1cGVIb29rcyAoaG9va3MpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJlcy5pbmRleE9mKGhvb2tzW2ldKSA9PT0gLTEpIHtcbiAgICAgIHJlcy5wdXNoKGhvb2tzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghbmV3IFJlZ0V4cCgoXCJeW2EtekEtWl1bXFxcXC1cXFxcLjAtOV9cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qJFwiKSkudGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ3Nob3VsZCBjb25mb3JtIHRvIHZhbGlkIGN1c3RvbSBlbGVtZW50IG5hbWUgaW4gaHRtbDUgc3BlY2lmaWNhdGlvbi4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmJCQxID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYkJDEsIHVwZGF0ZTogZGVmJCQxIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG5cbiAgLy8gQXBwbHkgZXh0ZW5kcyBhbmQgbWl4aW5zIG9uIHRoZSBjaGlsZCBvcHRpb25zLFxuICAvLyBidXQgb25seSBpZiBpdCBpcyBhIHJhdyBvcHRpb25zIG9iamVjdCB0aGF0IGlzbid0XG4gIC8vIHRoZSByZXN1bHQgb2YgYW5vdGhlciBtZXJnZU9wdGlvbnMgY2FsbC5cbiAgLy8gT25seSBtZXJnZWQgb3B0aW9ucyBoYXMgdGhlIF9iYXNlIHByb3BlcnR5LlxuICBpZiAoIWNoaWxkLl9iYXNlKSB7XG4gICAgaWYgKGNoaWxkLmV4dGVuZHMpIHtcbiAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLmV4dGVuZHMsIHZtKTtcbiAgICB9XG4gICAgaWYgKGNoaWxkLm1peGlucykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLm1peGluc1tpXSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBib29sZWFuIGNhc3RpbmdcbiAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gIH1cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAvLyBza2lwIHZhbGlkYXRpb24gZm9yIHdlZXggcmVjeWNsZS1saXN0IGNoaWxkIGNvbXBvbmVudCBwcm9wc1xuICAgICEoZmFsc2UpXG4gICkge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc09iamVjdChkZWYpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bS5fcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nXG4gICAgPyBkZWYuY2FsbCh2bSlcbiAgICA6IGRlZlxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJvcCAoXG4gIHByb3AsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICB2bSxcbiAgYWJzZW50XG4pIHtcbiAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgd2FybihcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7XG4gIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XG4gIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSwgdm0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIGhhdmVFeHBlY3RlZFR5cGVzID0gZXhwZWN0ZWRUeXBlcy5zb21lKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0OyB9KTtcbiAgaWYgKCF2YWxpZCAmJiBoYXZlRXhwZWN0ZWRUeXBlcykge1xuICAgIHdhcm4oXG4gICAgICBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sfEJpZ0ludCkkLztcblxuZnVuY3Rpb24gYXNzZXJ0VHlwZSAodmFsdWUsIHR5cGUsIHZtKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgd2FybignSW52YWxpZCBwcm9wIHR5cGU6IFwiJyArIFN0cmluZyh0eXBlKSArICdcIiBpcyBub3QgYSBjb25zdHJ1Y3RvcicsIHZtKTtcbiAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgdmFsaWQ6IHZhbGlkLFxuICAgIGV4cGVjdGVkVHlwZTogZXhwZWN0ZWRUeXBlXG4gIH1cbn1cblxudmFyIGZ1bmN0aW9uVHlwZUNoZWNrUkUgPSAvXlxccypmdW5jdGlvbiAoXFx3KykvO1xuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKGZ1bmN0aW9uVHlwZUNoZWNrUkUpO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZSAobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgdmFyIG1lc3NhZ2UgPSBcIkludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIiArXG4gICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSk7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICB2YXIgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gIGlmIChcbiAgICBleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgaXNFeHBsaWNhYmxlKHR5cGVvZiB2YWx1ZSkgJiZcbiAgICAhaXNCb29sZWFuKGV4cGVjdGVkVHlwZSwgcmVjZWl2ZWRUeXBlKVxuICApIHtcbiAgICBtZXNzYWdlICs9IFwiIHdpdGggdmFsdWUgXCIgKyAoc3R5bGVWYWx1ZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlKSk7XG4gIH1cbiAgbWVzc2FnZSArPSBcIiwgZ290IFwiICsgcmVjZWl2ZWRUeXBlICsgXCIgXCI7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwid2l0aCB2YWx1ZSBcIiArIChzdHlsZVZhbHVlKHZhbHVlLCByZWNlaXZlZFR5cGUpKSArIFwiLlwiO1xuICB9XG4gIHJldHVybiBtZXNzYWdlXG59XG5cbmZ1bmN0aW9uIHN0eWxlVmFsdWUgKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xuICAgIHJldHVybiAoXCJcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIChcIlwiICsgKE51bWJlcih2YWx1ZSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIHZhbHVlKVxuICB9XG59XG5cbnZhciBFWFBMSUNBQkxFX1RZUEVTID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSAodmFsdWUpIHtcbiAgcmV0dXJuIEVYUExJQ0FCTEVfVFlQRVMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbTsgfSlcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuICgpIHtcbiAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJzsgfSlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIC8vIERlYWN0aXZhdGUgZGVwcyB0cmFja2luZyB3aGlsZSBwcm9jZXNzaW5nIGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgcG9zc2libGUgaW5maW5pdGUgcmVuZGVyaW5nLlxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICBpZiAodm0pIHtcbiAgICAgIHZhciBjdXIgPSB2bTtcbiAgICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XG4gICAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmIChjYXB0dXJlKSB7IHJldHVybiB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGUsIGN1ciwgJ2Vycm9yQ2FwdHVyZWQgaG9vaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoXG4gIGhhbmRsZXIsXG4gIGNvbnRleHQsXG4gIGFyZ3MsXG4gIHZtLFxuICBpbmZvXG4pIHtcbiAgdmFyIHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTtcbiAgICBpZiAocmVzICYmICFyZXMuX2lzVnVlICYmIGlzUHJvbWlzZShyZXMpICYmICFyZXMuX2hhbmRsZWQpIHtcbiAgICAgIHJlcy5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyBcIiAoUHJvbWlzZS9hc3luYylcIik7IH0pO1xuICAgICAgLy8gaXNzdWUgIzk1MTFcbiAgICAgIC8vIGF2b2lkIGNhdGNoIHRyaWdnZXJpbmcgbXVsdGlwbGUgdGltZXMgd2hlbiBuZXN0ZWQgY2FsbHNcbiAgICAgIHJlcy5faGFuZGxlZCA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8pO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlcixcbiAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbiAgICAgIGlmIChlICE9PSBlcnIpIHtcbiAgICAgICAgbG9nRXJyb3IoZSwgbnVsbCwgJ2NvbmZpZy5lcnJvckhhbmRsZXInKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGxvZ0Vycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybigoXCJFcnJvciBpbiBcIiArIGluZm8gKyBcIjogXFxcIlwiICsgKGVyci50b1N0cmluZygpKSArIFwiXFxcIlwiKSwgdm0pO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICgoaW5Ccm93c2VyIHx8IGluV2VleCkgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVyclxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgaXNVc2luZ01pY3JvVGFzayA9IGZhbHNlO1xuXG52YXIgY2FsbGJhY2tzID0gW107XG52YXIgcGVuZGluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBmbHVzaENhbGxiYWNrcyAoKSB7XG4gIHBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIGNvcGllcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29waWVzW2ldKCk7XG4gIH1cbn1cblxuLy8gSGVyZSB3ZSBoYXZlIGFzeW5jIGRlZmVycmluZyB3cmFwcGVycyB1c2luZyBtaWNyb3Rhc2tzLlxuLy8gSW4gMi41IHdlIHVzZWQgKG1hY3JvKSB0YXNrcyAoaW4gY29tYmluYXRpb24gd2l0aCBtaWNyb3Rhc2tzKS5cbi8vIEhvd2V2ZXIsIGl0IGhhcyBzdWJ0bGUgcHJvYmxlbXMgd2hlbiBzdGF0ZSBpcyBjaGFuZ2VkIHJpZ2h0IGJlZm9yZSByZXBhaW50XG4vLyAoZS5nLiAjNjgxMywgb3V0LWluIHRyYW5zaXRpb25zKS5cbi8vIEFsc28sIHVzaW5nIChtYWNybykgdGFza3MgaW4gZXZlbnQgaGFuZGxlciB3b3VsZCBjYXVzZSBzb21lIHdlaXJkIGJlaGF2aW9yc1xuLy8gdGhhdCBjYW5ub3QgYmUgY2lyY3VtdmVudGVkIChlLmcuICM3MTA5LCAjNzE1MywgIzc1NDYsICM3ODM0LCAjODEwOSkuXG4vLyBTbyB3ZSBub3cgdXNlIG1pY3JvdGFza3MgZXZlcnl3aGVyZSwgYWdhaW4uXG4vLyBBIG1ham9yIGRyYXdiYWNrIG9mIHRoaXMgdHJhZGVvZmYgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3Ncbi8vIHdoZXJlIG1pY3JvdGFza3MgaGF2ZSB0b28gaGlnaCBhIHByaW9yaXR5IGFuZCBmaXJlIGluIGJldHdlZW4gc3VwcG9zZWRseVxuLy8gc2VxdWVudGlhbCBldmVudHMgKGUuZy4gIzQ1MjEsICM2NjkwLCB3aGljaCBoYXZlIHdvcmthcm91bmRzKVxuLy8gb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lIGV2ZW50ICgjNjU2NikuXG52YXIgdGltZXJGdW5jO1xuXG4vLyBUaGUgbmV4dFRpY2sgYmVoYXZpb3IgbGV2ZXJhZ2VzIHRoZSBtaWNyb3Rhc2sgcXVldWUsIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZFxuLy8gdmlhIGVpdGhlciBuYXRpdmUgUHJvbWlzZS50aGVuIG9yIE11dGF0aW9uT2JzZXJ2ZXIuXG4vLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW5cbi8vIFVJV2ViVmlldyBpbiBpT1MgPj0gOS4zLjMgd2hlbiB0cmlnZ2VyZWQgaW4gdG91Y2ggZXZlbnQgaGFuZGxlcnMuIEl0XG4vLyBjb21wbGV0ZWx5IHN0b3BzIHdvcmtpbmcgYWZ0ZXIgdHJpZ2dlcmluZyBhIGZldyB0aW1lcy4uLiBzbywgaWYgbmF0aXZlXG4vLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCwgJGZsb3ctZGlzYWJsZS1saW5lICovXG5pZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgIC8vIEluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgIC8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG4gICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgfTtcbiAgaXNVc2luZ01pY3JvVGFzayA9IHRydWU7XG59IGVsc2UgaWYgKCFpc0lFICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gIGlzTmF0aXZlKE11dGF0aW9uT2JzZXJ2ZXIpIHx8XG4gIC8vIFBoYW50b21KUyBhbmQgaU9TIDcueFxuICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4pKSB7XG4gIC8vIFVzZSBNdXRhdGlvbk9ic2VydmVyIHdoZXJlIG5hdGl2ZSBQcm9taXNlIGlzIG5vdCBhdmFpbGFibGUsXG4gIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAvLyAoIzY0NjYgTXV0YXRpb25PYnNlcnZlciBpcyB1bnJlbGlhYmxlIGluIElFMTEpXG4gIHZhciBjb3VudGVyID0gMTtcbiAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpO1xuICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY291bnRlcikpO1xuICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICB9KTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICB0ZXh0Tm9kZS5kYXRhID0gU3RyaW5nKGNvdW50ZXIpO1xuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xuICAvLyBGYWxsYmFjayB0byBzZXRJbW1lZGlhdGUuXG4gIC8vIFRlY2huaWNhbGx5IGl0IGxldmVyYWdlcyB0aGUgKG1hY3JvKSB0YXNrIHF1ZXVlLFxuICAvLyBidXQgaXQgaXMgc3RpbGwgYSBiZXR0ZXIgY2hvaWNlIHRoYW4gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldEltbWVkaWF0ZShmbHVzaENhbGxiYWNrcyk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBGYWxsYmFjayB0byBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dChmbHVzaENhbGxiYWNrcywgMCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrIChjYiwgY3R4KSB7XG4gIHZhciBfcmVzb2x2ZTtcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbChjdHgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCBjdHgsICduZXh0VGljaycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlKGN0eCk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgcGVuZGluZyA9IHRydWU7XG4gICAgdGltZXJGdW5jKCk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsQmlnSW50LCcgK1xuICAgICdyZXF1aXJlJyAvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG4gICk7XG5cbiAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgb3IgbWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgYnV0IFwiICtcbiAgICAgICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgK1xuICAgICAgJ2VpdGhlciBpbiB0aGUgZGF0YSBvcHRpb24sIG9yIGZvciBjbGFzcy1iYXNlZCBjb21wb25lbnRzLCBieSAnICtcbiAgICAgICdpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5LiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgd2FyblJlc2VydmVkUHJlZml4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcXFwiJGRhdGEuXCIgKyBrZXkgKyBcIlxcXCIgYmVjYXVzZSBcIiArXG4gICAgICAncHJvcGVydGllcyBzdGFydGluZyB3aXRoIFwiJFwiIG9yIFwiX1wiIGFyZSBub3QgcHJveGllZCBpbiB0aGUgVnVlIGluc3RhbmNlIHRvICcgK1xuICAgICAgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscy4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJveHkpO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8XG4gICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIC8vIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKVxuICAgIH07XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBub3JtYWxpemVFdmVudCA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgcGFzc2l2ZSA9IG5hbWUuY2hhckF0KDApID09PSAnJic7XG4gIG5hbWUgPSBwYXNzaXZlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBvbmNlJCQxID0gbmFtZS5jaGFyQXQoMCkgPT09ICd+JzsgLy8gUHJlZml4ZWQgbGFzdCwgY2hlY2tlZCBmaXJzdFxuICBuYW1lID0gb25jZSQkMSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgY2FwdHVyZSA9IG5hbWUuY2hhckF0KDApID09PSAnISc7XG4gIG5hbWUgPSBjYXB0dXJlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBvbmNlOiBvbmNlJCQxLFxuICAgIGNhcHR1cmU6IGNhcHR1cmUsXG4gICAgcGFzc2l2ZTogcGFzc2l2ZVxuICB9XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRm5JbnZva2VyIChmbnMsIHZtKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjbG9uZWRbaV0sIG51bGwsIGFyZ3VtZW50cyQxLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJldHVybiBoYW5kbGVyIHJldHVybiB2YWx1ZSBmb3Igc2luZ2xlIGhhbmRsZXJzXG4gICAgICByZXR1cm4gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoZm5zLCBudWxsLCBhcmd1bWVudHMsIHZtLCBcInYtb24gaGFuZGxlclwiKVxuICAgIH1cbiAgfVxuICBpbnZva2VyLmZucyA9IGZucztcbiAgcmV0dXJuIGludm9rZXJcbn1cblxuZnVuY3Rpb24gdXBkYXRlTGlzdGVuZXJzIChcbiAgb24sXG4gIG9sZE9uLFxuICBhZGQsXG4gIHJlbW92ZSQkMSxcbiAgY3JlYXRlT25jZUhhbmRsZXIsXG4gIHZtXG4pIHtcbiAgdmFyIG5hbWUsIGRlZiQkMSwgY3VyLCBvbGQsIGV2ZW50O1xuICBmb3IgKG5hbWUgaW4gb24pIHtcbiAgICBkZWYkJDEgPSBjdXIgPSBvbltuYW1lXTtcbiAgICBvbGQgPSBvbGRPbltuYW1lXTtcbiAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgIGlmIChpc1VuZGVmKGN1cikpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJJbnZhbGlkIGhhbmRsZXIgZm9yIGV2ZW50IFxcXCJcIiArIChldmVudC5uYW1lKSArIFwiXFxcIjogZ290IFwiICsgU3RyaW5nKGN1ciksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGQpKSB7XG4gICAgICBpZiAoaXNVbmRlZihjdXIuZm5zKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUZuSW52b2tlcihjdXIsIHZtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1RydWUoZXZlbnQub25jZSkpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVPbmNlSGFuZGxlcihldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUpO1xuICAgICAgfVxuICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSwgZXZlbnQucGFzc2l2ZSwgZXZlbnQucGFyYW1zKTtcbiAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG4gICAgICBvbGQuZm5zID0gY3VyO1xuICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkge1xuICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgIHJlbW92ZSQkMShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rKSB7XG4gIGlmIChkZWYgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIGRlZiA9IGRlZi5kYXRhLmhvb2sgfHwgKGRlZi5kYXRhLmhvb2sgPSB7fSk7XG4gIH1cbiAgdmFyIGludm9rZXI7XG4gIHZhciBvbGRIb29rID0gZGVmW2hvb2tLZXldO1xuXG4gIGZ1bmN0aW9uIHdyYXBwZWRIb29rICgpIHtcbiAgICBob29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgLy8gaW1wb3J0YW50OiByZW1vdmUgbWVyZ2VkIGhvb2sgdG8gZW5zdXJlIGl0J3MgY2FsbGVkIG9ubHkgb25jZVxuICAgIC8vIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrXG4gICAgcmVtb3ZlKGludm9rZXIuZm5zLCB3cmFwcGVkSG9vayk7XG4gIH1cblxuICBpZiAoaXNVbmRlZihvbGRIb29rKSkge1xuICAgIC8vIG5vIGV4aXN0aW5nIGhvb2tcbiAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFt3cmFwcGVkSG9va10pO1xuICB9IGVsc2Uge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc0RlZihvbGRIb29rLmZucykgJiYgaXNUcnVlKG9sZEhvb2subWVyZ2VkKSkge1xuICAgICAgLy8gYWxyZWFkeSBhIG1lcmdlZCBpbnZva2VyXG4gICAgICBpbnZva2VyID0gb2xkSG9vaztcbiAgICAgIGludm9rZXIuZm5zLnB1c2god3JhcHBlZEhvb2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBwbGFpbiBob29rXG4gICAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFtvbGRIb29rLCB3cmFwcGVkSG9va10pO1xuICAgIH1cbiAgfVxuXG4gIGludm9rZXIubWVyZ2VkID0gdHJ1ZTtcbiAgZGVmW2hvb2tLZXldID0gaW52b2tlcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEgKFxuICBkYXRhLFxuICBDdG9yLFxuICB0YWdcbikge1xuICAvLyB3ZSBhcmUgb25seSBleHRyYWN0aW5nIHJhdyB2YWx1ZXMgaGVyZS5cbiAgLy8gdmFsaWRhdGlvbiBhbmQgZGVmYXVsdCB2YWx1ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCBpdHNlbGYuXG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzVW5kZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICB2YXIgcHJvcHMgPSBkYXRhLnByb3BzO1xuICBpZiAoaXNEZWYoYXR0cnMpIHx8IGlzRGVmKHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgdmFyIGFsdEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIGtleUluTG93ZXJDYXNlID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgIT09IGtleUluTG93ZXJDYXNlICYmXG4gICAgICAgICAgYXR0cnMgJiYgaGFzT3duKGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGlwKFxuICAgICAgICAgICAgXCJQcm9wIFxcXCJcIiArIGtleUluTG93ZXJDYXNlICsgXCJcXFwiIGlzIHBhc3NlZCB0byBjb21wb25lbnQgXCIgK1xuICAgICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodGFnIHx8IEN0b3IpKSArIFwiLCBidXQgdGhlIGRlY2xhcmVkIHByb3AgbmFtZSBpc1wiICtcbiAgICAgICAgICAgIFwiIFxcXCJcIiArIGtleSArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCBjYW1lbENhc2VkIFwiICtcbiAgICAgICAgICAgIFwicHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBcIiArXG4gICAgICAgICAgICBcInRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgYWx0S2V5ICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wIChcbiAgcmVzLFxuICBoYXNoLFxuICBrZXksXG4gIGFsdEtleSxcbiAgcHJlc2VydmVcbikge1xuICBpZiAoaXNEZWYoaGFzaCkpIHtcbiAgICBpZiAoaGFzT3duKGhhc2gsIGtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFtrZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKGhhc093bihoYXNoLCBhbHRLZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hbYWx0S2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxuLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XG4vLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuLy9cbi8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXG4vLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG4vLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6XG5cbi8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbi8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcbi8vIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkIC0gaWYgYW55IGNoaWxkIGlzIGFuIEFycmF5LCB3ZSBmbGF0dGVuIHRoZSB3aG9sZVxuLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG4vLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXG5mdW5jdGlvbiBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGNoaWxkcmVuKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGRyZW5cbn1cblxuLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcbi8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxuLy8gd2l0aCBoYW5kLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucyAvIEpTWC4gSW4gc3VjaCBjYXNlcyBhIGZ1bGwgbm9ybWFsaXphdGlvblxuLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxuICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXG4gICAgOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgICAgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gaXNUZXh0Tm9kZSAobm9kZSkge1xuICByZXR1cm4gaXNEZWYobm9kZSkgJiYgaXNEZWYobm9kZS50ZXh0KSAmJiBpc0ZhbHNlKG5vZGUuaXNDb21tZW50KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSwgYywgbGFzdEluZGV4LCBsYXN0O1xuICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGlzVW5kZWYoYykgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJykgeyBjb250aW51ZSB9XG4gICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgbGFzdCA9IHJlc1tsYXN0SW5kZXhdO1xuICAgIC8vICBuZXN0ZWRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xuICAgICAgICBjID0gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCAoKG5lc3RlZEluZGV4IHx8ICcnKSArIFwiX1wiICsgaSkpO1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIGlmIChpc1RleHROb2RlKGNbMF0pICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyAoY1swXSkudGV4dCk7XG4gICAgICAgICAgYy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgYyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgaWYgKGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgU1NSIGh5ZHJhdGlvbiBiZWNhdXNlIHRleHQgbm9kZXMgYXJlXG4gICAgICAgIC8vIGVzc2VudGlhbGx5IG1lcmdlZCB3aGVuIHJlbmRlcmVkIHRvIEhUTUwgc3RyaW5nc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuICAgICAgICBpZiAoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSAmJlxuICAgICAgICAgIGlzRGVmKGMudGFnKSAmJlxuICAgICAgICAgIGlzVW5kZWYoYy5rZXkpICYmXG4gICAgICAgICAgaXNEZWYobmVzdGVkSW5kZXgpKSB7XG4gICAgICAgICAgYy5rZXkgPSBcIl9fdmxpc3RcIiArIG5lc3RlZEluZGV4ICsgXCJfXCIgKyBpICsgXCJfX1wiO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICBpZiAocHJvdmlkZSkge1xuICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgIDogcHJvdmlkZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHtcbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhbiBpbmplY3RlZCB2YWx1ZSBkaXJlY3RseSBzaW5jZSB0aGUgY2hhbmdlcyB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcImluamVjdGlvbiBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbmplY3QgKGluamVjdCwgdm0pIHtcbiAgaWYgKGluamVjdCkge1xuICAgIC8vIGluamVjdCBpcyA6YW55IGJlY2F1c2UgZmxvdyBpcyBub3Qgc21hcnQgZW5vdWdoIHRvIGZpZ3VyZSBvdXQgY2FjaGVkXG4gICAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICAgID8gUmVmbGVjdC5vd25LZXlzKGluamVjdClcbiAgICAgIDogT2JqZWN0LmtleXMoaW5qZWN0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAvLyAjNjU3NCBpbiBjYXNlIHRoZSBpbmplY3Qgb2JqZWN0IGlzIG9ic2VydmVkLi4uXG4gICAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgICB2YXIgcHJvdmlkZUtleSA9IGluamVjdFtrZXldLmZyb207XG4gICAgICB2YXIgc291cmNlID0gdm07XG4gICAgICB3aGlsZSAoc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuX3Byb3ZpZGVkICYmIGhhc093bihzb3VyY2UuX3Byb3ZpZGVkLCBwcm92aWRlS2V5KSkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gc291cmNlLl9wcm92aWRlZFtwcm92aWRlS2V5XTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBpbmplY3Rba2V5XSkge1xuICAgICAgICAgIHZhciBwcm92aWRlRGVmYXVsdCA9IGluamVjdFtrZXldLmRlZmF1bHQ7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB0eXBlb2YgcHJvdmlkZURlZmF1bHQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gcHJvdmlkZURlZmF1bHQuY2FsbCh2bSlcbiAgICAgICAgICAgIDogcHJvdmlkZURlZmF1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oKFwiSW5qZWN0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBub3QgZm91bmRcIiksIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cbiAgdmFyIHNsb3RzID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgdmFyIGRhdGEgPSBjaGlsZC5kYXRhO1xuICAgIC8vIHJlbW92ZSBzbG90IGF0dHJpYnV0ZSBpZiB0aGUgbm9kZSBpcyByZXNvbHZlZCBhcyBhIFZ1ZSBzbG90IG5vZGVcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMuc2xvdCkge1xuICAgICAgZGVsZXRlIGRhdGEuYXR0cnMuc2xvdDtcbiAgICB9XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mbkNvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICBkYXRhICYmIGRhdGEuc2xvdCAhPSBudWxsXG4gICAgKSB7XG4gICAgICB2YXIgbmFtZSA9IGRhdGEuc2xvdDtcbiAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAoc2xvdHMuZGVmYXVsdCB8fCAoc2xvdHMuZGVmYXVsdCA9IFtdKSkucHVzaChjaGlsZCk7XG4gICAgfVxuICB9XG4gIC8vIGlnbm9yZSBzbG90cyB0aGF0IGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZVxuICBmb3IgKHZhciBuYW1lJDEgaW4gc2xvdHMpIHtcbiAgICBpZiAoc2xvdHNbbmFtZSQxXS5ldmVyeShpc1doaXRlc3BhY2UpKSB7XG4gICAgICBkZWxldGUgc2xvdHNbbmFtZSQxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNsb3RzXG59XG5cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZSAobm9kZSkge1xuICByZXR1cm4gKG5vZGUuaXNDb21tZW50ICYmICFub2RlLmFzeW5jRmFjdG9yeSkgfHwgbm9kZS50ZXh0ID09PSAnICdcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlciAobm9kZSkge1xuICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgJiYgbm9kZS5hc3luY0ZhY3Rvcnlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3RzIChcbiAgc2xvdHMsXG4gIG5vcm1hbFNsb3RzLFxuICBwcmV2U2xvdHNcbikge1xuICB2YXIgcmVzO1xuICB2YXIgaGFzTm9ybWFsU2xvdHMgPSBPYmplY3Qua2V5cyhub3JtYWxTbG90cykubGVuZ3RoID4gMDtcbiAgdmFyIGlzU3RhYmxlID0gc2xvdHMgPyAhIXNsb3RzLiRzdGFibGUgOiAhaGFzTm9ybWFsU2xvdHM7XG4gIHZhciBrZXkgPSBzbG90cyAmJiBzbG90cy4ka2V5O1xuICBpZiAoIXNsb3RzKSB7XG4gICAgcmVzID0ge307XG4gIH0gZWxzZSBpZiAoc2xvdHMuX25vcm1hbGl6ZWQpIHtcbiAgICAvLyBmYXN0IHBhdGggMTogY2hpbGQgY29tcG9uZW50IHJlLXJlbmRlciBvbmx5LCBwYXJlbnQgZGlkIG5vdCBjaGFuZ2VcbiAgICByZXR1cm4gc2xvdHMuX25vcm1hbGl6ZWRcbiAgfSBlbHNlIGlmIChcbiAgICBpc1N0YWJsZSAmJlxuICAgIHByZXZTbG90cyAmJlxuICAgIHByZXZTbG90cyAhPT0gZW1wdHlPYmplY3QgJiZcbiAgICBrZXkgPT09IHByZXZTbG90cy4ka2V5ICYmXG4gICAgIWhhc05vcm1hbFNsb3RzICYmXG4gICAgIXByZXZTbG90cy4kaGFzTm9ybWFsXG4gICkge1xuICAgIC8vIGZhc3QgcGF0aCAyOiBzdGFibGUgc2NvcGVkIHNsb3RzIHcvIG5vIG5vcm1hbCBzbG90cyB0byBwcm94eSxcbiAgICAvLyBvbmx5IG5lZWQgdG8gbm9ybWFsaXplIG9uY2VcbiAgICByZXR1cm4gcHJldlNsb3RzXG4gIH0gZWxzZSB7XG4gICAgcmVzID0ge307XG4gICAgZm9yICh2YXIga2V5JDEgaW4gc2xvdHMpIHtcbiAgICAgIGlmIChzbG90c1trZXkkMV0gJiYga2V5JDFbMF0gIT09ICckJykge1xuICAgICAgICByZXNba2V5JDFdID0gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5JDEsIHNsb3RzW2tleSQxXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGV4cG9zZSBub3JtYWwgc2xvdHMgb24gc2NvcGVkU2xvdHNcbiAgZm9yICh2YXIga2V5JDIgaW4gbm9ybWFsU2xvdHMpIHtcbiAgICBpZiAoIShrZXkkMiBpbiByZXMpKSB7XG4gICAgICByZXNba2V5JDJdID0gcHJveHlOb3JtYWxTbG90KG5vcm1hbFNsb3RzLCBrZXkkMik7XG4gICAgfVxuICB9XG4gIC8vIGF2b3JpYXogc2VlbXMgdG8gbW9jayBhIG5vbi1leHRlbnNpYmxlICRzY29wZWRTbG90cyBvYmplY3RcbiAgLy8gYW5kIHdoZW4gdGhhdCBpcyBwYXNzZWQgZG93biB0aGlzIHdvdWxkIGNhdXNlIGFuIGVycm9yXG4gIGlmIChzbG90cyAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHNsb3RzKSkge1xuICAgIChzbG90cykuX25vcm1hbGl6ZWQgPSByZXM7XG4gIH1cbiAgZGVmKHJlcywgJyRzdGFibGUnLCBpc1N0YWJsZSk7XG4gIGRlZihyZXMsICcka2V5Jywga2V5KTtcbiAgZGVmKHJlcywgJyRoYXNOb3JtYWwnLCBoYXNOb3JtYWxTbG90cyk7XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5LCBmbikge1xuICB2YXIgbm9ybWFsaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzID0gYXJndW1lbnRzLmxlbmd0aCA/IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgOiBmbih7fSk7XG4gICAgcmVzID0gcmVzICYmIHR5cGVvZiByZXMgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHJlcylcbiAgICAgID8gW3Jlc10gLy8gc2luZ2xlIHZub2RlXG4gICAgICA6IG5vcm1hbGl6ZUNoaWxkcmVuKHJlcyk7XG4gICAgdmFyIHZub2RlID0gcmVzICYmIHJlc1swXTtcbiAgICByZXR1cm4gcmVzICYmIChcbiAgICAgICF2bm9kZSB8fFxuICAgICAgKHJlcy5sZW5ndGggPT09IDEgJiYgdm5vZGUuaXNDb21tZW50ICYmICFpc0FzeW5jUGxhY2Vob2xkZXIodm5vZGUpKSAvLyAjOTY1OCwgIzEwMzkxXG4gICAgKSA/IHVuZGVmaW5lZFxuICAgICAgOiByZXNcbiAgfTtcbiAgLy8gdGhpcyBpcyBhIHNsb3QgdXNpbmcgdGhlIG5ldyB2LXNsb3Qgc3ludGF4IHdpdGhvdXQgc2NvcGUuIGFsdGhvdWdoIGl0IGlzXG4gIC8vIGNvbXBpbGVkIGFzIGEgc2NvcGVkIHNsb3QsIHJlbmRlciBmbiB1c2VycyB3b3VsZCBleHBlY3QgaXQgdG8gYmUgcHJlc2VudFxuICAvLyBvbiB0aGlzLiRzbG90cyBiZWNhdXNlIHRoZSB1c2FnZSBpcyBzZW1hbnRpY2FsbHkgYSBub3JtYWwgc2xvdC5cbiAgaWYgKGZuLnByb3h5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vcm1hbFNsb3RzLCBrZXksIHtcbiAgICAgIGdldDogbm9ybWFsaXplZCxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZFxufVxuXG5mdW5jdGlvbiBwcm94eU5vcm1hbFNsb3Qoc2xvdHMsIGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2xvdHNba2V5XTsgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgdmFsLFxuICByZW5kZXJcbikge1xuICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwpO1xuICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKGkgKyAxLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgIGlmIChoYXNTeW1ib2wgJiYgdmFsW1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgIHJldCA9IFtdO1xuICAgICAgdmFyIGl0ZXJhdG9yID0gdmFsW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB3aGlsZSAoIXJlc3VsdC5kb25lKSB7XG4gICAgICAgIHJldC5wdXNoKHJlbmRlcihyZXN1bHQudmFsdWUsIHJldC5sZW5ndGgpKTtcbiAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtrZXldLCBrZXksIGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzRGVmKHJldCkpIHtcbiAgICByZXQgPSBbXTtcbiAgfVxuICAocmV0KS5faXNWTGlzdCA9IHRydWU7XG4gIHJldHVybiByZXRcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyA8c2xvdD5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU2xvdCAoXG4gIG5hbWUsXG4gIGZhbGxiYWNrUmVuZGVyLFxuICBwcm9wcyxcbiAgYmluZE9iamVjdFxuKSB7XG4gIHZhciBzY29wZWRTbG90Rm4gPSB0aGlzLiRzY29wZWRTbG90c1tuYW1lXTtcbiAgdmFyIG5vZGVzO1xuICBpZiAoc2NvcGVkU2xvdEZuKSB7XG4gICAgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2Fybignc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsIHRoaXMpO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9XG4gICAgICBzY29wZWRTbG90Rm4ocHJvcHMpIHx8XG4gICAgICAodHlwZW9mIGZhbGxiYWNrUmVuZGVyID09PSAnZnVuY3Rpb24nID8gZmFsbGJhY2tSZW5kZXIoKSA6IGZhbGxiYWNrUmVuZGVyKTtcbiAgfSBlbHNlIHtcbiAgICBub2RlcyA9XG4gICAgICB0aGlzLiRzbG90c1tuYW1lXSB8fFxuICAgICAgKHR5cGVvZiBmYWxsYmFja1JlbmRlciA9PT0gJ2Z1bmN0aW9uJyA/IGZhbGxiYWNrUmVuZGVyKCkgOiBmYWxsYmFja1JlbmRlcik7XG4gIH1cblxuICB2YXIgdGFyZ2V0ID0gcHJvcHMgJiYgcHJvcHMuc2xvdDtcbiAgaWYgKHRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScsIHsgc2xvdDogdGFyZ2V0IH0sIG5vZGVzKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBub2Rlc1xuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgZmlsdGVyc1xuICovXG5mdW5jdGlvbiByZXNvbHZlRmlsdGVyIChpZCkge1xuICByZXR1cm4gcmVzb2x2ZUFzc2V0KHRoaXMuJG9wdGlvbnMsICdmaWx0ZXJzJywgaWQsIHRydWUpIHx8IGlkZW50aXR5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0tleU5vdE1hdGNoIChleHBlY3QsIGFjdHVhbCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3QpKSB7XG4gICAgcmV0dXJuIGV4cGVjdC5pbmRleE9mKGFjdHVhbCkgPT09IC0xXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGV4cGVjdCAhPT0gYWN0dWFsXG4gIH1cbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgY2hlY2tpbmcga2V5Q29kZXMgZnJvbSBjb25maWcuXG4gKiBleHBvc2VkIGFzIFZ1ZS5wcm90b3R5cGUuX2tcbiAqIHBhc3NpbmcgaW4gZXZlbnRLZXlOYW1lIGFzIGxhc3QgYXJndW1lbnQgc2VwYXJhdGVseSBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICovXG5mdW5jdGlvbiBjaGVja0tleUNvZGVzIChcbiAgZXZlbnRLZXlDb2RlLFxuICBrZXksXG4gIGJ1aWx0SW5LZXlDb2RlLFxuICBldmVudEtleU5hbWUsXG4gIGJ1aWx0SW5LZXlOYW1lXG4pIHtcbiAgdmFyIG1hcHBlZEtleUNvZGUgPSBjb25maWcua2V5Q29kZXNba2V5XSB8fCBidWlsdEluS2V5Q29kZTtcbiAgaWYgKGJ1aWx0SW5LZXlOYW1lICYmIGV2ZW50S2V5TmFtZSAmJiAhY29uZmlnLmtleUNvZGVzW2tleV0pIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChidWlsdEluS2V5TmFtZSwgZXZlbnRLZXlOYW1lKVxuICB9IGVsc2UgaWYgKG1hcHBlZEtleUNvZGUpIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChtYXBwZWRLZXlDb2RlLCBldmVudEtleUNvZGUpXG4gIH0gZWxzZSBpZiAoZXZlbnRLZXlOYW1lKSB7XG4gICAgcmV0dXJuIGh5cGhlbmF0ZShldmVudEtleU5hbWUpICE9PSBrZXlcbiAgfVxuICByZXR1cm4gZXZlbnRLZXlDb2RlID09PSB1bmRlZmluZWRcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAqL1xuZnVuY3Rpb24gYmluZE9iamVjdFByb3BzIChcbiAgZGF0YSxcbiAgdGFnLFxuICB2YWx1ZSxcbiAgYXNQcm9wLFxuICBpc1N5bmNcbikge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3Qgb3IgQXJyYXkgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgaGFzaDtcbiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgPT09ICdjbGFzcycgfHxcbiAgICAgICAgICBrZXkgPT09ICdzdHlsZScgfHxcbiAgICAgICAgICBpc1Jlc2VydmVkQXR0cmlidXRlKGtleSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaGFzaCA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxuICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYW1lbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgICBpZiAoIShjYW1lbGl6ZWRLZXkgaW4gaGFzaCkgJiYgIShoeXBoZW5hdGVkS2V5IGluIGhhc2gpKSB7XG4gICAgICAgICAgaGFzaFtrZXldID0gdmFsdWVba2V5XTtcblxuICAgICAgICAgIGlmIChpc1N5bmMpIHtcbiAgICAgICAgICAgIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gICAgICAgICAgICBvblsoXCJ1cGRhdGU6XCIgKyBrZXkpXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFsdWVba2V5XSA9ICRldmVudDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIGxvb3AoIGtleSApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHN0YXRpYyB0cmVlcy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU3RhdGljIChcbiAgaW5kZXgsXG4gIGlzSW5Gb3Jcbikge1xuICB2YXIgY2FjaGVkID0gdGhpcy5fc3RhdGljVHJlZXMgfHwgKHRoaXMuX3N0YXRpY1RyZWVzID0gW10pO1xuICB2YXIgdHJlZSA9IGNhY2hlZFtpbmRleF07XG4gIC8vIGlmIGhhcyBhbHJlYWR5LXJlbmRlcmVkIHN0YXRpYyB0cmVlIGFuZCBub3QgaW5zaWRlIHYtZm9yLFxuICAvLyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgdHJlZS5cbiAgaWYgKHRyZWUgJiYgIWlzSW5Gb3IpIHtcbiAgICByZXR1cm4gdHJlZVxuICB9XG4gIC8vIG90aGVyd2lzZSwgcmVuZGVyIGEgZnJlc2ggdHJlZS5cbiAgdHJlZSA9IGNhY2hlZFtpbmRleF0gPSB0aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tpbmRleF0uY2FsbChcbiAgICB0aGlzLl9yZW5kZXJQcm94eSxcbiAgICBudWxsLFxuICAgIHRoaXMgLy8gZm9yIHJlbmRlciBmbnMgZ2VuZXJhdGVkIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCB0ZW1wbGF0ZXNcbiAgKTtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX3N0YXRpY19fXCIgKyBpbmRleCksIGZhbHNlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3Igdi1vbmNlLlxuICogRWZmZWN0aXZlbHkgaXQgbWVhbnMgbWFya2luZyB0aGUgbm9kZSBhcyBzdGF0aWMgd2l0aCBhIHVuaXF1ZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIG1hcmtPbmNlIChcbiAgdHJlZSxcbiAgaW5kZXgsXG4gIGtleVxuKSB7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19vbmNlX19cIiArIGluZGV4ICsgKGtleSA/IChcIl9cIiArIGtleSkgOiBcIlwiKSksIHRydWUpO1xuICByZXR1cm4gdHJlZVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljIChcbiAgdHJlZSxcbiAga2V5LFxuICBpc09uY2Vcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRyZWVbaV0gJiYgdHlwZW9mIHRyZWVbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWVbaV0sIChrZXkgKyBcIl9cIiArIGkpLCBpc09uY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY05vZGUgKG5vZGUsIGtleSwgaXNPbmNlKSB7XG4gIG5vZGUuaXNTdGF0aWMgPSB0cnVlO1xuICBub2RlLmtleSA9IGtleTtcbiAgbm9kZS5pc09uY2UgPSBpc09uY2U7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kT2JqZWN0TGlzdGVuZXJzIChkYXRhLCB2YWx1ZSkge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LW9uIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgb24gPSBkYXRhLm9uID0gZGF0YS5vbiA/IGV4dGVuZCh7fSwgZGF0YS5vbikgOiB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSBvbltrZXldO1xuICAgICAgICB2YXIgb3VycyA9IHZhbHVlW2tleV07XG4gICAgICAgIG9uW2tleV0gPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgb3VycykgOiBvdXJzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVNjb3BlZFNsb3RzIChcbiAgZm5zLCAvLyBzZWUgZmxvdy92bm9kZVxuICByZXMsXG4gIC8vIHRoZSBmb2xsb3dpbmcgYXJlIGFkZGVkIGluIDIuNlxuICBoYXNEeW5hbWljS2V5cyxcbiAgY29udGVudEhhc2hLZXlcbikge1xuICByZXMgPSByZXMgfHwgeyAkc3RhYmxlOiAhaGFzRHluYW1pY0tleXMgfTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2xvdCA9IGZuc1tpXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbG90KSkge1xuICAgICAgcmVzb2x2ZVNjb3BlZFNsb3RzKHNsb3QsIHJlcywgaGFzRHluYW1pY0tleXMpO1xuICAgIH0gZWxzZSBpZiAoc2xvdCkge1xuICAgICAgLy8gbWFya2VyIGZvciByZXZlcnNlIHByb3h5aW5nIHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzXG4gICAgICBpZiAoc2xvdC5wcm94eSkge1xuICAgICAgICBzbG90LmZuLnByb3h5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJlc1tzbG90LmtleV0gPSBzbG90LmZuO1xuICAgIH1cbiAgfVxuICBpZiAoY29udGVudEhhc2hLZXkpIHtcbiAgICAocmVzKS4ka2V5ID0gY29udGVudEhhc2hLZXk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZER5bmFtaWNLZXlzIChiYXNlT2JqLCB2YWx1ZXMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIga2V5ID0gdmFsdWVzW2ldO1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkpIHtcbiAgICAgIGJhc2VPYmpbdmFsdWVzW2ldXSA9IHZhbHVlc1tpICsgMV07XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGtleSAhPT0gJycgJiYga2V5ICE9PSBudWxsKSB7XG4gICAgICAvLyBudWxsIGlzIGEgc3BlY2lhbCB2YWx1ZSBmb3IgZXhwbGljaXRseSByZW1vdmluZyBhIGJpbmRpbmdcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkludmFsaWQgdmFsdWUgZm9yIGR5bmFtaWMgZGlyZWN0aXZlIGFyZ3VtZW50IChleHBlY3RlZCBzdHJpbmcgb3IgbnVsbCk6IFwiICsga2V5KSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJhc2VPYmpcbn1cblxuLy8gaGVscGVyIHRvIGR5bmFtaWNhbGx5IGFwcGVuZCBtb2RpZmllciBydW50aW1lIG1hcmtlcnMgdG8gZXZlbnQgbmFtZXMuXG4vLyBlbnN1cmUgb25seSBhcHBlbmQgd2hlbiB2YWx1ZSBpcyBhbHJlYWR5IHN0cmluZywgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgY2FzdFxuLy8gdG8gc3RyaW5nIGFuZCBjYXVzZSB0aGUgdHlwZSBjaGVjayB0byBtaXNzLlxuZnVuY3Rpb24gcHJlcGVuZE1vZGlmaWVyICh2YWx1ZSwgc3ltYm9sKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gc3ltYm9sICsgdmFsdWUgOiB2YWx1ZVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5zdGFsbFJlbmRlckhlbHBlcnMgKHRhcmdldCkge1xuICB0YXJnZXQuX28gPSBtYXJrT25jZTtcbiAgdGFyZ2V0Ll9uID0gdG9OdW1iZXI7XG4gIHRhcmdldC5fcyA9IHRvU3RyaW5nO1xuICB0YXJnZXQuX2wgPSByZW5kZXJMaXN0O1xuICB0YXJnZXQuX3QgPSByZW5kZXJTbG90O1xuICB0YXJnZXQuX3EgPSBsb29zZUVxdWFsO1xuICB0YXJnZXQuX2kgPSBsb29zZUluZGV4T2Y7XG4gIHRhcmdldC5fbSA9IHJlbmRlclN0YXRpYztcbiAgdGFyZ2V0Ll9mID0gcmVzb2x2ZUZpbHRlcjtcbiAgdGFyZ2V0Ll9rID0gY2hlY2tLZXlDb2RlcztcbiAgdGFyZ2V0Ll9iID0gYmluZE9iamVjdFByb3BzO1xuICB0YXJnZXQuX3YgPSBjcmVhdGVUZXh0Vk5vZGU7XG4gIHRhcmdldC5fZSA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gIHRhcmdldC5fdSA9IHJlc29sdmVTY29wZWRTbG90cztcbiAgdGFyZ2V0Ll9nID0gYmluZE9iamVjdExpc3RlbmVycztcbiAgdGFyZ2V0Ll9kID0gYmluZER5bmFtaWNLZXlzO1xuICB0YXJnZXQuX3AgPSBwcmVwZW5kTW9kaWZpZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCAoXG4gIGRhdGEsXG4gIHByb3BzLFxuICBjaGlsZHJlbixcbiAgcGFyZW50LFxuICBDdG9yXG4pIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIC8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuICB2YXIgY29udGV4dFZtO1xuICBpZiAoaGFzT3duKHBhcmVudCwgJ191aWQnKSkge1xuICAgIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBjb250ZXh0Vm0uX29yaWdpbmFsID0gcGFyZW50O1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjb250ZXh0IHZtIHBhc3NlZCBpbiBpcyBhIGZ1bmN0aW9uYWwgY29udGV4dCBhcyB3ZWxsLlxuICAgIC8vIGluIHRoaXMgY2FzZSB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBhcmUgYWJsZSB0byBnZXQgYSBob2xkIHRvIHRoZVxuICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS5cbiAgICBjb250ZXh0Vm0gPSBwYXJlbnQ7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcGFyZW50ID0gcGFyZW50Ll9vcmlnaW5hbDtcbiAgfVxuICB2YXIgaXNDb21waWxlZCA9IGlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7XG4gIHZhciBuZWVkTm9ybWFsaXphdGlvbiA9ICFpc0NvbXBpbGVkO1xuXG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5saXN0ZW5lcnMgPSBkYXRhLm9uIHx8IGVtcHR5T2JqZWN0O1xuICB0aGlzLmluamVjdGlvbnMgPSByZXNvbHZlSW5qZWN0KG9wdGlvbnMuaW5qZWN0LCBwYXJlbnQpO1xuICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcyQxLiRzbG90cykge1xuICAgICAgbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIGRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHRoaXMkMS4kc2xvdHMgPSByZXNvbHZlU2xvdHMoY2hpbGRyZW4sIHBhcmVudClcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzJDEuJHNsb3RzXG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzY29wZWRTbG90cycsICh7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy5zbG90cygpKVxuICAgIH1cbiAgfSkpO1xuXG4gIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGlzQ29tcGlsZWQpIHtcbiAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbiAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICAvLyBwcmUtcmVzb2x2ZSBzbG90cyBmb3IgcmVuZGVyU2xvdCgpXG4gICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7XG4gICAgdGhpcy4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLiRzbG90cyk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5fc2NvcGVJZCkge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgICAgdmFyIHZub2RlID0gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTtcbiAgICAgIGlmICh2bm9kZSAmJiAhQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgdm5vZGUuZm5TY29wZUlkID0gb3B0aW9ucy5fc2NvcGVJZDtcbiAgICAgICAgdm5vZGUuZm5Db250ZXh0ID0gcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZub2RlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7IH07XG4gIH1cbn1cblxuaW5zdGFsbFJlbmRlckhlbHBlcnMoRnVuY3Rpb25hbFJlbmRlckNvbnRleHQucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCAoXG4gIEN0b3IsXG4gIHByb3BzRGF0YSxcbiAgZGF0YSxcbiAgY29udGV4dFZtLFxuICBjaGlsZHJlblxuKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgcHJvcHMgPSB7fTtcbiAgdmFyIHByb3BPcHRpb25zID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzRGVmKHByb3BPcHRpb25zKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEgfHwgZW1wdHlPYmplY3QpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNEZWYoZGF0YS5hdHRycykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5hdHRycyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YS5wcm9wcykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5wcm9wcyk7IH1cbiAgfVxuXG4gIHZhciByZW5kZXJDb250ZXh0ID0gbmV3IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0KFxuICAgIGRhdGEsXG4gICAgcHJvcHMsXG4gICAgY2hpbGRyZW4sXG4gICAgY29udGV4dFZtLFxuICAgIEN0b3JcbiAgKTtcblxuICB2YXIgdm5vZGUgPSBvcHRpb25zLnJlbmRlci5jYWxsKG51bGwsIHJlbmRlckNvbnRleHQuX2MsIHJlbmRlckNvbnRleHQpO1xuXG4gIGlmICh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGUsIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgdmFyIHZub2RlcyA9IG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlKSB8fCBbXTtcbiAgICB2YXIgcmVzID0gbmV3IEFycmF5KHZub2Rlcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXNbaV0gPSBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2Rlc1tpXSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCAodm5vZGUsIGRhdGEsIGNvbnRleHRWbSwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCkge1xuICAvLyAjNzgxNyBjbG9uZSBub2RlIGJlZm9yZSBzZXR0aW5nIGZuQ29udGV4dCwgb3RoZXJ3aXNlIGlmIHRoZSBub2RlIGlzIHJldXNlZFxuICAvLyAoZS5nLiBpdCB3YXMgZnJvbSBhIGNhY2hlZCBub3JtYWwgc2xvdCkgdGhlIGZuQ29udGV4dCBjYXVzZXMgbmFtZWQgc2xvdHNcbiAgLy8gdGhhdCBzaG91bGQgbm90IGJlIG1hdGNoZWQgdG8gbWF0Y2guXG4gIHZhciBjbG9uZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICBjbG9uZS5mbkNvbnRleHQgPSBjb250ZXh0Vm07XG4gIGNsb25lLmZuT3B0aW9ucyA9IG9wdGlvbnM7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgKGNsb25lLmRldnRvb2xzTWV0YSA9IGNsb25lLmRldnRvb2xzTWV0YSB8fCB7fSkucmVuZGVyQ29udGV4dCA9IHJlbmRlckNvbnRleHQ7XG4gIH1cbiAgaWYgKGRhdGEuc2xvdCkge1xuICAgIChjbG9uZS5kYXRhIHx8IChjbG9uZS5kYXRhID0ge30pKS5zbG90ID0gZGF0YS5zbG90O1xuICB9XG4gIHJldHVybiBjbG9uZVxufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzICh0bywgZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgIHRvW2NhbWVsaXplKGtleSldID0gZnJvbVtrZXldO1xuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICBpZiAoXG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJlxuICAgICAgIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCAmJlxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmVcbiAgICApIHtcbiAgICAgIC8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaFxuICAgICAgdmFyIG1vdW50ZWROb2RlID0gdm5vZGU7IC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICAgIGNvbXBvbmVudFZOb2RlSG9va3MucHJlcGF0Y2gobW91bnRlZE5vZGUsIG1vdW50ZWROb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgYWN0aXZlSW5zdGFuY2VcbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIHZhciBhc3luY0ZhY3Rvcnk7XG4gIGlmIChpc1VuZGVmKEN0b3IuY2lkKSkge1xuICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yKTtcbiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbiAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB0YWdcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XG4gICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgfVxuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgIGRhdGEgPSB7fTtcbiAgICBpZiAoc2xvdCkge1xuICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICB9XG4gIH1cblxuICAvLyBpbnN0YWxsIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpO1xuXG4gIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG4gIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcbiAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgYXN5bmNGYWN0b3J5XG4gICk7XG5cbiAgcmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUgKFxuICAvLyB3ZSBrbm93IGl0J3MgTW91bnRlZENvbXBvbmVudFZOb2RlIGJ1dCBmbG93IGRvZXNuJ3RcbiAgdm5vZGUsXG4gIC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuICBwYXJlbnRcbikge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBfaXNDb21wb25lbnQ6IHRydWUsXG4gICAgX3BhcmVudFZub2RlOiB2bm9kZSxcbiAgICBwYXJlbnQ6IHBhcmVudFxuICB9O1xuICAvLyBjaGVjayBpbmxpbmUtdGVtcGxhdGUgcmVuZGVyIGZ1bmN0aW9uc1xuICB2YXIgaW5saW5lVGVtcGxhdGUgPSB2bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlO1xuICBpZiAoaXNEZWYoaW5saW5lVGVtcGxhdGUpKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBpbmxpbmVUZW1wbGF0ZS5yZW5kZXI7XG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBpbmxpbmVUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbiAgcmV0dXJuIG5ldyB2bm9kZS5jb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucylcbn1cblxuZnVuY3Rpb24gaW5zdGFsbENvbXBvbmVudEhvb2tzIChkYXRhKSB7XG4gIHZhciBob29rcyA9IGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzVG9NZXJnZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBob29rc1RvTWVyZ2VbaV07XG4gICAgdmFyIGV4aXN0aW5nID0gaG9va3Nba2V5XTtcbiAgICB2YXIgdG9NZXJnZSA9IGNvbXBvbmVudFZOb2RlSG9va3Nba2V5XTtcbiAgICBpZiAoZXhpc3RpbmcgIT09IHRvTWVyZ2UgJiYgIShleGlzdGluZyAmJiBleGlzdGluZy5fbWVyZ2VkKSkge1xuICAgICAgaG9va3Nba2V5XSA9IGV4aXN0aW5nID8gbWVyZ2VIb29rJDEodG9NZXJnZSwgZXhpc3RpbmcpIDogdG9NZXJnZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VIb29rJDEgKGYxLCBmMikge1xuICB2YXIgbWVyZ2VkID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAvLyBmbG93IGNvbXBsYWlucyBhYm91dCBleHRyYSBhcmdzIHdoaWNoIGlzIHdoeSB3ZSB1c2UgYW55XG4gICAgZjEoYSwgYik7XG4gICAgZjIoYSwgYik7XG4gIH07XG4gIG1lcmdlZC5fbWVyZ2VkID0gdHJ1ZTtcbiAgcmV0dXJuIG1lcmdlZFxufVxuXG4vLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgaW5mbyAodmFsdWUgYW5kIGNhbGxiYWNrKSBpbnRvXG4vLyBwcm9wIGFuZCBldmVudCBoYW5kbGVyIHJlc3BlY3RpdmVseS5cbmZ1bmN0aW9uIHRyYW5zZm9ybU1vZGVsIChvcHRpb25zLCBkYXRhKSB7XG4gIHZhciBwcm9wID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5wcm9wKSB8fCAndmFsdWUnO1xuICB2YXIgZXZlbnQgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLmV2ZW50KSB8fCAnaW5wdXQnXG4gIDsoZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KSlbcHJvcF0gPSBkYXRhLm1vZGVsLnZhbHVlO1xuICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICB2YXIgZXhpc3RpbmcgPSBvbltldmVudF07XG4gIHZhciBjYWxsYmFjayA9IGRhdGEubW9kZWwuY2FsbGJhY2s7XG4gIGlmIChpc0RlZihleGlzdGluZykpIHtcbiAgICBpZiAoXG4gICAgICBBcnJheS5pc0FycmF5KGV4aXN0aW5nKVxuICAgICAgICA/IGV4aXN0aW5nLmluZGV4T2YoY2FsbGJhY2spID09PSAtMVxuICAgICAgICA6IGV4aXN0aW5nICE9PSBjYWxsYmFja1xuICAgICkge1xuICAgICAgb25bZXZlbnRdID0gW2NhbGxiYWNrXS5jb25jYXQoZXhpc3RpbmcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvbltldmVudF0gPSBjYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEua2V5KSAmJiAhaXNQcmltaXRpdmUoZGF0YS5rZXkpXG4gICkge1xuICAgIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG4gICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2bm9kZSwgbnM7XG4gIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuICAgIHZhciBDdG9yO1xuICAgIG5zID0gKGNvbnRleHQuJHZub2RlICYmIGNvbnRleHQuJHZub2RlLm5zKSB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLm5hdGl2ZU9uKSAmJiBkYXRhLnRhZyAhPT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJUaGUgLm5hdGl2ZSBtb2RpZmllciBmb3Igdi1vbiBpcyBvbmx5IHZhbGlkIG9uIGNvbXBvbmVudHMgYnV0IGl0IHdhcyB1c2VkIG9uIDxcIiArIHRhZyArIFwiPi5cIiksXG4gICAgICAgICAgY29udGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKGlzRGVmKG5zKSkgeyBhcHBseU5TKHZub2RlLCBucyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHsgcmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7IH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zLCBmb3JjZSkge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICBucyA9IHVuZGVmaW5lZDtcbiAgICBmb3JjZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChcbiAgICAgICAgaXNVbmRlZihjaGlsZC5ucykgfHwgKGlzVHJ1ZShmb3JjZSkgJiYgY2hpbGQudGFnICE9PSAnc3ZnJykpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlZiAjNTMxOFxuLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG5mdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyAoZGF0YSkge1xuICBpZiAoaXNPYmplY3QoZGF0YS5zdHlsZSkpIHtcbiAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTtcbiAgfVxuICBpZiAoaXNPYmplY3QoZGF0YS5jbGFzcykpIHtcbiAgICB0cmF2ZXJzZShkYXRhLmNsYXNzKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDsgLy8gdi1vbmNlIGNhY2hlZCB0cmVlc1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kdm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuXG4gIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRhdHRycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGxpc3RlbmVycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICB9XG59XG5cbnZhciBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzXG4gIGluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmIChfcGFyZW50Vm5vZGUpIHtcbiAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdm0uJHNsb3RzLFxuICAgICAgICB2bS4kc2NvcGVkU2xvdHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIG1haW50YWluIGEgc3RhY2sgYmVjYXVzZSBhbGwgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyBzZXBhcmF0ZWx5IGZyb20gb25lIGFub3RoZXIuIE5lc3RlZCBjb21wb25lbnQncyByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHdoZW4gcGFyZW50IGNvbXBvbmVudCBpcyBwYXRjaGVkLlxuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gdm07XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gICAgLy8gaWYgdGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zIG9ubHkgYSBzaW5nbGUgbm9kZSwgYWxsb3cgaXRcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkgJiYgdm5vZGUubGVuZ3RoID09PSAxKSB7XG4gICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgKTtcbiAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgLy8gKCkgPT4gUHJvbWlzZVxuICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHJlcy5jb21wb25lbnQpKSB7XG4gICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5sb2FkaW5nKSkge1xuICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgICAgICAgICAgICAgICA/IChcInRpbWVvdXQgKFwiICsgKHJlcy50aW1lb3V0KSArIFwibXMpXCIpXG4gICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCByZXMudGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdcbiAgICAgID8gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgICAgOiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpKSkge1xuICAgICAgICByZXR1cm4gY1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2bS5faGFzSG9va0V2ZW50ID0gZmFsc2U7XG4gIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldDtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICBfdGFyZ2V0LiRvZmYoZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgY3JlYXRlT25jZUhhbmRsZXIsIHZtKTtcbiAgdGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZtLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSQxID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSQxIDwgbDsgaSQxKyspIHtcbiAgICAgICAgdm0uJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIHZhciBjYjtcbiAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSkgfHxcbiAgICAoIW5ld1Njb3BlZFNsb3RzICYmIHZtLiRzY29wZWRTbG90cy4ka2V5KVxuICApO1xuXG4gIC8vIEFueSBzdGF0aWMgc2xvdCBjaGlsZHJlbiBmcm9tIHRoZSBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBkdXJpbmcgcGFyZW50J3NcbiAgLy8gdXBkYXRlLiBEeW5hbWljIHNjb3BlZCBzbG90cyBtYXkgYWxzbyBoYXZlIGNoYW5nZWQuIEluIHN1Y2ggY2FzZXMsIGEgZm9yY2VkXG4gIC8vIHVwZGF0ZSBpcyBuZWNlc3NhcnkgdG8gZW5zdXJlIGNvcnJlY3RuZXNzLlxuICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9ICEhKFxuICAgIHJlbmRlckNoaWxkcmVuIHx8ICAgICAgICAgICAgICAgLy8gaGFzIG5ldyBzdGF0aWMgc2xvdHNcbiAgICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gfHwgIC8vIGhhcyBvbGQgc3RhdGljIHNsb3RzXG4gICAgaGFzRHluYW1pY1Njb3BlZFNsb3RcbiAgKTtcblxuICB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblxuICBpZiAodm0uX3Zub2RlKSB7IC8vIHVwZGF0ZSBjaGlsZCB0cmVlJ3MgcGFyZW50XG4gICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlO1xuICB9XG4gIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiA9IHJlbmRlckNoaWxkcmVuO1xuXG4gIC8vIHVwZGF0ZSAkYXR0cnMgYW5kICRsaXN0ZW5lcnMgaGFzaFxuICAvLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGRcbiAgLy8gdXNlZCB0aGVtIGR1cmluZyByZW5kZXJcbiAgdm0uJGF0dHJzID0gcGFyZW50Vm5vZGUuZGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdDtcbiAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcblxuICAvLyB1cGRhdGUgcHJvcHNcbiAgaWYgKHByb3BzRGF0YSAmJiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgdmFyIHByb3BzID0gdm0uX3Byb3BzO1xuICAgIHZhciBwcm9wS2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcEtleXNbaV07XG4gICAgICB2YXIgcHJvcE9wdGlvbnMgPSB2bS4kb3B0aW9ucy5wcm9wczsgLy8gd3RmIGZsb3c/XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgIH1cbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgLy8ga2VlcCBhIGNvcHkgb2YgcmF3IHByb3BzRGF0YVxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YSA9IHByb3BzRGF0YTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG5cbiAgLy8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbiAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgdmFyIGluZm8gPSBob29rICsgXCIgaG9va1wiO1xuICBpZiAoaGFuZGxlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBudWxsLCB2bSwgaW5mbyk7XG4gICAgfVxuICB9XG4gIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2spO1xuICB9XG4gIHBvcFRhcmdldCgpO1xufVxuXG4vKiAgKi9cblxudmFyIE1BWF9VUERBVEVfQ09VTlQgPSAxMDA7XG5cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGFjdGl2YXRlZENoaWxkcmVuID0gW107XG52YXIgaGFzID0ge307XG52YXIgY2lyY3VsYXIgPSB7fTtcbnZhciB3YWl0aW5nID0gZmFsc2U7XG52YXIgZmx1c2hpbmcgPSBmYWxzZTtcbnZhciBpbmRleCA9IDA7XG5cbi8qKlxuICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuICovXG5mdW5jdGlvbiByZXNldFNjaGVkdWxlclN0YXRlICgpIHtcbiAgaW5kZXggPSBxdWV1ZS5sZW5ndGggPSBhY3RpdmF0ZWRDaGlsZHJlbi5sZW5ndGggPSAwO1xuICBoYXMgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaXJjdWxhciA9IHt9O1xuICB9XG4gIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlO1xufVxuXG4vLyBBc3luYyBlZGdlIGNhc2UgIzY1NjYgcmVxdWlyZXMgc2F2aW5nIHRoZSB0aW1lc3RhbXAgd2hlbiBldmVudCBsaXN0ZW5lcnMgYXJlXG4vLyBhdHRhY2hlZC4gSG93ZXZlciwgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSBoYXMgYSBwZXJmIG92ZXJoZWFkIGVzcGVjaWFsbHlcbi8vIGlmIHRoZSBwYWdlIGhhcyB0aG91c2FuZHMgb2YgZXZlbnQgbGlzdGVuZXJzLiBJbnN0ZWFkLCB3ZSB0YWtlIGEgdGltZXN0YW1wXG4vLyBldmVyeSB0aW1lIHRoZSBzY2hlZHVsZXIgZmx1c2hlcyBhbmQgdXNlIHRoYXQgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnNcbi8vIGF0dGFjaGVkIGR1cmluZyB0aGF0IGZsdXNoLlxudmFyIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IDA7XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuXG52YXIgZ2V0Tm93ID0gRGF0ZS5ub3c7XG5cbi8vIERldGVybWluZSB3aGF0IGV2ZW50IHRpbWVzdGFtcCB0aGUgYnJvd3NlciBpcyB1c2luZy4gQW5ub3lpbmdseSwgdGhlXG4vLyB0aW1lc3RhbXAgY2FuIGVpdGhlciBiZSBoaS1yZXMgKHJlbGF0aXZlIHRvIHBhZ2UgbG9hZCkgb3IgbG93LXJlc1xuLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlXG4vLyBzYW1lIHRpbWVzdGFtcCB0eXBlIHdoZW4gc2F2aW5nIHRoZSBmbHVzaCB0aW1lc3RhbXAuXG4vLyBBbGwgSUUgdmVyc2lvbnMgdXNlIGxvdy1yZXMgZXZlbnQgdGltZXN0YW1wcywgYW5kIGhhdmUgcHJvYmxlbWF0aWMgY2xvY2tcbi8vIGltcGxlbWVudGF0aW9ucyAoIzk2MzIpXG5pZiAoaW5Ccm93c2VyICYmICFpc0lFKSB7XG4gIHZhciBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgaWYgKFxuICAgIHBlcmZvcm1hbmNlICYmXG4gICAgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIGdldE5vdygpID4gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JykudGltZVN0YW1wXG4gICkge1xuICAgIC8vIGlmIHRoZSBldmVudCB0aW1lc3RhbXAsIGFsdGhvdWdoIGV2YWx1YXRlZCBBRlRFUiB0aGUgRGF0ZS5ub3coKSwgaXNcbiAgICAvLyBzbWFsbGVyIHRoYW4gaXQsIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gdXNlIHRoZSBoaS1yZXMgdmVyc2lvbiBmb3IgZXZlbnQgbGlzdGVuZXIgdGltZXN0YW1wcyBhc1xuICAgIC8vIHdlbGwuXG4gICAgZ2V0Tm93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7IH07XG4gIH1cbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IGdldE5vdygpO1xuICBmbHVzaGluZyA9IHRydWU7XG4gIHZhciB3YXRjaGVyLCBpZDtcblxuICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlXG4gIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLlxuICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cbiAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgIGlmICh3YXRjaGVyLmJlZm9yZSkge1xuICAgICAgd2F0Y2hlci5iZWZvcmUoKTtcbiAgICB9XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgY2FsbEhvb2sodm0sICd1cGRhdGVkJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUXVldWUgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCB0aGF0IHdhcyBhY3RpdmF0ZWQgZHVyaW5nIHBhdGNoLlxuICogVGhlIHF1ZXVlIHdpbGwgYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSBlbnRpcmUgdHJlZSBoYXMgYmVlbiBwYXRjaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudCAodm0pIHtcbiAgLy8gc2V0dGluZyBfaW5hY3RpdmUgdG8gZmFsc2UgaGVyZSBzbyB0aGF0IGEgcmVuZGVyIGZ1bmN0aW9uIGNhblxuICAvLyByZWx5IG9uIGNoZWNraW5nIHdoZXRoZXIgaXQncyBpbiBhbiBpbmFjdGl2ZSB0cmVlIChlLmcuIHJvdXRlci12aWV3KVxuICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgYWN0aXZhdGVkQ2hpbGRyZW4ucHVzaCh2bSk7XG59XG5cbmZ1bmN0aW9uIGNhbGxBY3RpdmF0ZWRIb29rcyAocXVldWUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHF1ZXVlW2ldLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChxdWV1ZVtpXSwgdHJ1ZSAvKiB0cnVlICovKTtcbiAgfVxufVxuXG4vKipcbiAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG4gKiBKb2JzIHdpdGggZHVwbGljYXRlIElEcyB3aWxsIGJlIHNraXBwZWQgdW5sZXNzIGl0J3NcbiAqIHB1c2hlZCB3aGVuIHRoZSBxdWV1ZSBpcyBiZWluZyBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZVdhdGNoZXIgKHdhdGNoZXIpIHtcbiAgdmFyIGlkID0gd2F0Y2hlci5pZDtcbiAgaWYgKGhhc1tpZF0gPT0gbnVsbCkge1xuICAgIGhhc1tpZF0gPSB0cnVlO1xuICAgIGlmICghZmx1c2hpbmcpIHtcbiAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIGFscmVhZHkgZmx1c2hpbmcsIHNwbGljZSB0aGUgd2F0Y2hlciBiYXNlZCBvbiBpdHMgaWRcbiAgICAgIC8vIGlmIGFscmVhZHkgcGFzdCBpdHMgaWQsIGl0IHdpbGwgYmUgcnVuIG5leHQgaW1tZWRpYXRlbHkuXG4gICAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaSA+IGluZGV4ICYmIHF1ZXVlW2ldLmlkID4gd2F0Y2hlci5pZCkge1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgICBxdWV1ZS5zcGxpY2UoaSArIDEsIDAsIHdhdGNoZXIpO1xuICAgIH1cbiAgICAvLyBxdWV1ZSB0aGUgZmx1c2hcbiAgICBpZiAoIXdhaXRpbmcpIHtcbiAgICAgIHdhaXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cblxuXG52YXIgdWlkJDIgPSAwO1xuXG4vKipcbiAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICovXG52YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgY2IsXG4gIG9wdGlvbnMsXG4gIGlzUmVuZGVyV2F0Y2hlclxuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgaWYgKGlzUmVuZGVyV2F0Y2hlcikge1xuICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgfVxuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICA/IGV4cE9yRm4udG9TdHJpbmcoKVxuICAgIDogJyc7XG4gIC8vIHBhcnNlIGV4cHJlc3Npb24gZm9yIGdldHRlclxuICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgaWYgKCF0aGlzLmdldHRlcikge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBub29wO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB2YXIgaW5mbyA9IFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIjtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcodGhpcy5jYiwgdGhpcy52bSwgW3ZhbHVlLCBvbGRWYWx1ZV0sIHRoaXMudm0sIGluZm8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSB2YWx1ZSBvZiB0aGUgd2F0Y2hlci5cbiAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZSAoKSB7XG4gIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpO1xuICB0aGlzLmRpcnR5ID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0XG4gICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgaWYgKCF0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZW1vdmUodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuICAgIH1cbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXNbc291cmNlS2V5XVtrZXldXG4gIH07XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHtcbiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bS5fcHJvcHMgPSB7fTtcbiAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgLy8gaW5zdGVhZCBvZiBkeW5hbWljIG9iamVjdCBrZXkgZW51bWVyYXRpb24uXG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gW107XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIGlmICghaXNSb290KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgfVxuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICAgIHZhciB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGh5cGhlbmF0ZWRLZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUm9vdCAmJiAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50KSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLm1ldGhvZHMgJiYga2V5IGluIHZtLiRvcHRpb25zLm1ldGhvZHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIG1ldGhvZC5cIiksIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lQ29tcHV0ZWQgKFxuICB0YXJnZXQsXG4gIGtleSxcbiAgdXNlckRlZlxuKSB7XG4gIHZhciBzaG91bGRDYWNoZSA9ICFpc1NlcnZlclJlbmRlcmluZygpO1xuICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gc2hvdWxkQ2FjaGVcbiAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYpO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wO1xuICB9IGVsc2Uge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgPyBzaG91bGRDYWNoZSAmJiB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYuZ2V0KVxuICAgICAgOiBub29wO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldCB8fCBub29wO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgYXNzaWduZWQgdG8gYnV0IGl0IGhhcyBubyBzZXR0ZXIuXCIpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZEdldHRlciAoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgdmFyIHdhdGNoZXIgPSB0aGlzLl9jb21wdXRlZFdhdGNoZXJzICYmIHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNba2V5XTtcbiAgICBpZiAod2F0Y2hlcikge1xuICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUdldHRlckludm9rZXIoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCB0aGlzKVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIHR5cGUgXFxcIlwiICsgKHR5cGVvZiBtZXRob2RzW2tleV0pICsgXCJcXFwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gXCIgK1xuICAgICAgICAgIFwiRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9cIixcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICgoa2V5IGluIHZtKSAmJiBpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggYW4gZXhpc3RpbmcgVnVlIGluc3RhbmNlIG1ldGhvZC4gXCIgK1xuICAgICAgICAgIFwiQXZvaWQgZGVmaW5pbmcgY29tcG9uZW50IG1ldGhvZHMgdGhhdCBzdGFydCB3aXRoIF8gb3IgJC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2bVtrZXldID0gdHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJyA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgcmVwbGFjaW5nIGluc3RhbmNlIHJvb3QgJGRhdGEuICcgK1xuICAgICAgICAnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gICAgcHJvcHNEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcIiRwcm9wcyBpcyByZWFkb25seS5cIiwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywgZGF0YURlZik7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHByb3BzJywgcHJvcHNEZWYpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldDtcbiAgVnVlLnByb3RvdHlwZS4kZGVsZXRlID0gZGVsO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHdhdGNoID0gZnVuY3Rpb24gKFxuICAgIGV4cE9yRm4sXG4gICAgY2IsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KGNiKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKVxuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xuICAgIHZhciB3YXRjaGVyID0gbmV3IFdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5pbW1lZGlhdGUpIHtcbiAgICAgIHZhciBpbmZvID0gXCJjYWxsYmFjayBmb3IgaW1tZWRpYXRlIHdhdGNoZXIgXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIjtcbiAgICAgIHB1c2hUYXJnZXQoKTtcbiAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNiLCB2bSwgW3dhdGNoZXIudmFsdWVdLCB2bSwgaW5mbyk7XG4gICAgICBwb3BUYXJnZXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCQzID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQkMysrO1xuXG4gICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArICh2bS5fdWlkKTtcbiAgICAgIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgKHZtLl91aWQpO1xuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgfVxuXG4gICAgLy8gYSBmbGFnIHRvIGF2b2lkIHRoaXMgYmVpbmcgb2JzZXJ2ZWRcbiAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xuICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuXG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUgKG9wdHMpIHtcbiAgcmV0dXJuIG9wdHMgJiYgKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcpXG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMgKHBhdHRlcm4sIG5hbWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKGlzUmVnRXhwKHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4udGVzdChuYW1lKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlIChrZWVwQWxpdmVJbnN0YW5jZSwgZmlsdGVyKSB7XG4gIHZhciBjYWNoZSA9IGtlZXBBbGl2ZUluc3RhbmNlLmNhY2hlO1xuICB2YXIga2V5cyA9IGtlZXBBbGl2ZUluc3RhbmNlLmtleXM7XG4gIHZhciBfdm5vZGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5fdm5vZGU7XG4gIGZvciAodmFyIGtleSBpbiBjYWNoZSkge1xuICAgIHZhciBlbnRyeSA9IGNhY2hlW2tleV07XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICB2YXIgbmFtZSA9IGVudHJ5Lm5hbWU7XG4gICAgICBpZiAobmFtZSAmJiAhZmlsdGVyKG5hbWUpKSB7XG4gICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5LCBrZXlzLCBfdm5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkgKFxuICBjYWNoZSxcbiAga2V5LFxuICBrZXlzLFxuICBjdXJyZW50XG4pIHtcbiAgdmFyIGVudHJ5ID0gY2FjaGVba2V5XTtcbiAgaWYgKGVudHJ5ICYmICghY3VycmVudCB8fCBlbnRyeS50YWcgIT09IGN1cnJlbnQudGFnKSkge1xuICAgIGVudHJ5LmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBjYWNoZVZOb2RlOiBmdW5jdGlvbiBjYWNoZVZOb2RlKCkge1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgY2FjaGUgPSByZWYuY2FjaGU7XG4gICAgICB2YXIga2V5cyA9IHJlZi5rZXlzO1xuICAgICAgdmFyIHZub2RlVG9DYWNoZSA9IHJlZi52bm9kZVRvQ2FjaGU7XG4gICAgICB2YXIga2V5VG9DYWNoZSA9IHJlZi5rZXlUb0NhY2hlO1xuICAgICAgaWYgKHZub2RlVG9DYWNoZSkge1xuICAgICAgICB2YXIgdGFnID0gdm5vZGVUb0NhY2hlLnRhZztcbiAgICAgICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGVUb0NhY2hlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICB2YXIgY29tcG9uZW50T3B0aW9ucyA9IHZub2RlVG9DYWNoZS5jb21wb25lbnRPcHRpb25zO1xuICAgICAgICBjYWNoZVtrZXlUb0NhY2hlXSA9IHtcbiAgICAgICAgICBuYW1lOiBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpLFxuICAgICAgICAgIHRhZzogdGFnLFxuICAgICAgICAgIGNvbXBvbmVudEluc3RhbmNlOiBjb21wb25lbnRJbnN0YW5jZSxcbiAgICAgICAgfTtcbiAgICAgICAga2V5cy5wdXNoKGtleVRvQ2FjaGUpO1xuICAgICAgICAvLyBwcnVuZSBvbGRlc3QgZW50cnlcbiAgICAgICAgaWYgKHRoaXMubWF4ICYmIGtleXMubGVuZ3RoID4gcGFyc2VJbnQodGhpcy5tYXgpKSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXlzWzBdLCBrZXlzLCB0aGlzLl92bm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52bm9kZVRvQ2FjaGUgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkICgpIHtcbiAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmtleXMgPSBbXTtcbiAgfSxcblxuICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCAoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuY2FjaGUpIHtcbiAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzLmNhY2hlLCBrZXksIHRoaXMua2V5cyk7XG4gICAgfVxuICB9LFxuXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdGhpcy5jYWNoZVZOb2RlKCk7XG4gICAgdGhpcy4kd2F0Y2goJ2luY2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMkMSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIG1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gICAgdGhpcy4kd2F0Y2goJ2V4Y2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMkMSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuICFtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGVWTm9kZSgpO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyICgpIHtcbiAgICB2YXIgc2xvdCA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgdmFyIHZub2RlID0gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChzbG90KTtcbiAgICB2YXIgY29tcG9uZW50T3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgaWYgKGNvbXBvbmVudE9wdGlvbnMpIHtcbiAgICAgIC8vIGNoZWNrIHBhdHRlcm5cbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnRPcHRpb25zKTtcbiAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgdmFyIGluY2x1ZGUgPSByZWYuaW5jbHVkZTtcbiAgICAgIHZhciBleGNsdWRlID0gcmVmLmV4Y2x1ZGU7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vdCBpbmNsdWRlZFxuICAgICAgICAoaW5jbHVkZSAmJiAoIW5hbWUgfHwgIW1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpKSB8fFxuICAgICAgICAvLyBleGNsdWRlZFxuICAgICAgICAoZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHZub2RlXG4gICAgICB9XG5cbiAgICAgIHZhciByZWYkMSA9IHRoaXM7XG4gICAgICB2YXIgY2FjaGUgPSByZWYkMS5jYWNoZTtcbiAgICAgIHZhciBrZXlzID0gcmVmJDEua2V5cztcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbFxuICAgICAgICAvLyBzYW1lIGNvbnN0cnVjdG9yIG1heSBnZXQgcmVnaXN0ZXJlZCBhcyBkaWZmZXJlbnQgbG9jYWwgY29tcG9uZW50c1xuICAgICAgICAvLyBzbyBjaWQgYWxvbmUgaXMgbm90IGVub3VnaCAoIzMyNjkpXG4gICAgICAgID8gY29tcG9uZW50T3B0aW9ucy5DdG9yLmNpZCArIChjb21wb25lbnRPcHRpb25zLnRhZyA/IChcIjo6XCIgKyAoY29tcG9uZW50T3B0aW9ucy50YWcpKSA6ICcnKVxuICAgICAgICA6IHZub2RlLmtleTtcbiAgICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY2FjaGVba2V5XS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgICAgLy8gbWFrZSBjdXJyZW50IGtleSBmcmVzaGVzdFxuICAgICAgICByZW1vdmUoa2V5cywga2V5KTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWxheSBzZXR0aW5nIHRoZSBjYWNoZSB1bnRpbCB1cGRhdGVcbiAgICAgICAgdGhpcy52bm9kZVRvQ2FjaGUgPSB2bm9kZTtcbiAgICAgICAgdGhpcy5rZXlUb0NhY2hlID0ga2V5O1xuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjE0JztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSA9IG1ha2VNYXAoJ2V2ZW50cyxjYXJldCx0eXBpbmcscGxhaW50ZXh0LW9ubHknKTtcblxudmFyIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZSdcbiAgICA/ICdmYWxzZSdcbiAgICAvLyBhbGxvdyBhcmJpdHJhcnkgc3RyaW5nIHZhbHVlIGZvciBjb250ZW50ZWRpdGFibGVcbiAgICA6IGtleSA9PT0gJ2NvbnRlbnRlZGl0YWJsZScgJiYgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlKHZhbHVlKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiAndHJ1ZSdcbn07XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSwnICtcbiAgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnXG4pO1xuXG52YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxudmFyIGlzWGxpbmsgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmFtZS5jaGFyQXQoNSkgPT09ICc6JyAmJiBuYW1lLnNsaWNlKDAsIDUpID09PSAneGxpbmsnXG59O1xuXG52YXIgZ2V0WGxpbmtQcm9wID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGlzWGxpbmsobmFtZSkgPyBuYW1lLnNsaWNlKDYsIG5hbWUubGVuZ3RoKSA6ICcnXG59O1xuXG52YXIgaXNGYWxzeUF0dHJWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2Vcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZW5DbGFzc0ZvclZub2RlICh2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKGlzRGVmKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChpc0RlZihwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoZGF0YSwgcGFyZW50Tm9kZS5kYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbmRlckNsYXNzKGRhdGEuc3RhdGljQ2xhc3MsIGRhdGEuY2xhc3MpXG59XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhIChjaGlsZCwgcGFyZW50KSB7XG4gIHJldHVybiB7XG4gICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICBjbGFzczogaXNEZWYoY2hpbGQuY2xhc3MpXG4gICAgICA/IFtjaGlsZC5jbGFzcywgcGFyZW50LmNsYXNzXVxuICAgICAgOiBwYXJlbnQuY2xhc3NcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJDbGFzcyAoXG4gIHN0YXRpY0NsYXNzLFxuICBkeW5hbWljQ2xhc3Ncbikge1xuICBpZiAoaXNEZWYoc3RhdGljQ2xhc3MpIHx8IGlzRGVmKGR5bmFtaWNDbGFzcykpIHtcbiAgICByZXR1cm4gY29uY2F0KHN0YXRpY0NsYXNzLCBzdHJpbmdpZnlDbGFzcyhkeW5hbWljQ2xhc3MpKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBjb25jYXQgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyBiID8gKGEgKyAnICcgKyBiKSA6IGEgOiAoYiB8fCAnJylcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5Q2xhc3MgKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlBcnJheSh2YWx1ZSlcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSlcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheSAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgc3RyaW5naWZpZWQ7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGlzRGVmKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IHN0cmluZ2lmaWVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeU9iamVjdCAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAodmFsdWVba2V5XSkge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgbmFtZXNwYWNlTWFwID0ge1xuICBzdmc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gIG1hdGg6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJ1xufTtcblxudmFyIGlzSFRNTFRhZyA9IG1ha2VNYXAoXG4gICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnICtcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xuICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcbiAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xuICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXG4gICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290J1xuKTtcblxuLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5XG4vLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxudmFyIGlzU1ZHID0gbWFrZU1hcChcbiAgJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLGZvbnQtZmFjZSwnICtcbiAgJ2ZvcmVpZ25vYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xuICAncG9seWdvbixwb2x5bGluZSxyZWN0LHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0cGF0aCx0c3Bhbix1c2UsdmlldycsXG4gIHRydWVcbik7XG5cbnZhciBpc1Jlc2VydmVkVGFnID0gZnVuY3Rpb24gKHRhZykge1xuICByZXR1cm4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkcodGFnKVxufTtcblxuZnVuY3Rpb24gZ2V0VGFnTmFtZXNwYWNlICh0YWcpIHtcbiAgaWYgKGlzU1ZHKHRhZykpIHtcbiAgICByZXR1cm4gJ3N2ZydcbiAgfVxuICAvLyBiYXNpYyBzdXBwb3J0IGZvciBNYXRoTUxcbiAgLy8gbm90ZSBpdCBkb2Vzbid0IHN1cHBvcnQgb3RoZXIgTWF0aE1MIGVsZW1lbnRzIGJlaW5nIGNvbXBvbmVudCByb290c1xuICBpZiAodGFnID09PSAnbWF0aCcpIHtcbiAgICByZXR1cm4gJ21hdGgnXG4gIH1cbn1cblxudmFyIHVua25vd25FbGVtZW50Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCAodGFnKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWluQnJvd3Nlcikge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKGlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXVxuICB9XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgaWYgKHRhZy5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI4MjEwMzY0LzEwNzAyNDRcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IChcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTFVua25vd25FbGVtZW50IHx8XG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxFbGVtZW50XG4gICAgKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IC9IVE1MVW5rbm93bkVsZW1lbnQvLnRlc3QoZWwudG9TdHJpbmcoKSkpXG4gIH1cbn1cblxudmFyIGlzVGV4dElucHV0VHlwZSA9IG1ha2VNYXAoJ3RleHQsbnVtYmVyLHBhc3N3b3JkLHNlYXJjaCxlbWFpbCx0ZWwsdXJsJyk7XG5cbi8qICAqL1xuXG4vKipcbiAqIFF1ZXJ5IGFuIGVsZW1lbnQgc2VsZWN0b3IgaWYgaXQncyBub3QgYW4gZWxlbWVudCBhbHJlYWR5LlxuICovXG5mdW5jdGlvbiBxdWVyeSAoZWwpIHtcbiAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgc2VsZWN0ZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICBpZiAoIXNlbGVjdGVkKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgZWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGVkXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSAodGFnTmFtZSwgdm5vZGUpIHtcbiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIGlmICh0YWdOYW1lICE9PSAnc2VsZWN0Jykge1xuICAgIHJldHVybiBlbG1cbiAgfVxuICAvLyBmYWxzZSBvciBudWxsIHdpbGwgcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgYnV0IHVuZGVmaW5lZCB3aWxsIG5vdFxuICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzICYmIHZub2RlLmRhdGEuYXR0cnMubXVsdGlwbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gIH1cbiAgcmV0dXJuIGVsbVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMgKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLCB0YWdOYW1lKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dClcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudCAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0ZXh0KVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUgKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnROb2RlIChub2RlKSB7XG4gIHJldHVybiBub2RlLnBhcmVudE5vZGVcbn1cblxuZnVuY3Rpb24gbmV4dFNpYmxpbmcgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmdcbn1cblxuZnVuY3Rpb24gdGFnTmFtZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS50YWdOYW1lXG59XG5cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50IChub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZVNjb3BlIChub2RlLCBzY29wZUlkKSB7XG4gIG5vZGUuc2V0QXR0cmlidXRlKHNjb3BlSWQsICcnKTtcbn1cblxudmFyIG5vZGVPcHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQkMSxcbiAgY3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG4gIGNyZWF0ZVRleHROb2RlOiBjcmVhdGVUZXh0Tm9kZSxcbiAgY3JlYXRlQ29tbWVudDogY3JlYXRlQ29tbWVudCxcbiAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG4gIHJlbW92ZUNoaWxkOiByZW1vdmVDaGlsZCxcbiAgYXBwZW5kQ2hpbGQ6IGFwcGVuZENoaWxkLFxuICBwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuICBuZXh0U2libGluZzogbmV4dFNpYmxpbmcsXG4gIHRhZ05hbWU6IHRhZ05hbWUsXG4gIHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcbiAgc2V0U3R5bGVTY29wZTogc2V0U3R5bGVTY29wZVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoXywgdm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7XG4gICAgICByZWdpc3RlclJlZihvbGRWbm9kZSwgdHJ1ZSk7XG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgdmFyIGtleSA9IHZub2RlLmRhdGEucmVmO1xuICBpZiAoIWlzRGVmKGtleSkpIHsgcmV0dXJuIH1cblxuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICB2YXIgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtO1xuICB2YXIgcmVmcyA9IHZtLiRyZWZzO1xuICBpZiAoaXNSZW1vdmFsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgcmVtb3ZlKHJlZnNba2V5XSwgcmVmKTtcbiAgICB9IGVsc2UgaWYgKHJlZnNba2V5XSA9PT0gcmVmKSB7XG4gICAgICByZWZzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2bm9kZS5kYXRhLnJlZkluRm9yKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgICByZWZzW2tleV0gPSBbcmVmXTtcbiAgICAgIH0gZWxzZSBpZiAocmVmc1trZXldLmluZGV4T2YocmVmKSA8IDApIHtcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIHJlZnNba2V5XS5wdXNoKHJlZik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogbW9kaWZpZWQgYnkgRXZhbiBZb3UgKEB5eXg5OTA4MDMpXG4gKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICogb2YgbWFraW5nIGZsb3cgdW5kZXJzdGFuZCBpdCBpcyBub3Qgd29ydGggaXQuXG4gKi9cblxudmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxudmFyIGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XG5cbmZ1bmN0aW9uIHNhbWVWbm9kZSAoYSwgYikge1xuICByZXR1cm4gKFxuICAgIGEua2V5ID09PSBiLmtleSAmJlxuICAgIGEuYXN5bmNGYWN0b3J5ID09PSBiLmFzeW5jRmFjdG9yeSAmJiAoXG4gICAgICAoXG4gICAgICAgIGEudGFnID09PSBiLnRhZyAmJlxuICAgICAgICBhLmlzQ29tbWVudCA9PT0gYi5pc0NvbW1lbnQgJiZcbiAgICAgICAgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJlxuICAgICAgICBzYW1lSW5wdXRUeXBlKGEsIGIpXG4gICAgICApIHx8IChcbiAgICAgICAgaXNUcnVlKGEuaXNBc3luY1BsYWNlaG9sZGVyKSAmJlxuICAgICAgICBpc1VuZGVmKGIuYXN5bmNGYWN0b3J5LmVycm9yKVxuICAgICAgKVxuICAgIClcbiAgKVxufVxuXG5mdW5jdGlvbiBzYW1lSW5wdXRUeXBlIChhLCBiKSB7XG4gIGlmIChhLnRhZyAhPT0gJ2lucHV0JykgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpO1xuICB2YXIgdHlwZUEgPSBpc0RlZihpID0gYS5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICB2YXIgdHlwZUIgPSBpc0RlZihpID0gYi5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICByZXR1cm4gdHlwZUEgPT09IHR5cGVCIHx8IGlzVGV4dElucHV0VHlwZSh0eXBlQSkgJiYgaXNUZXh0SW5wdXRUeXBlKHR5cGVCKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXlUb09sZElkeCAoY2hpbGRyZW4sIGJlZ2luSWR4LCBlbmRJZHgpIHtcbiAgdmFyIGksIGtleTtcbiAgdmFyIG1hcCA9IHt9O1xuICBmb3IgKGkgPSBiZWdpbklkeDsgaSA8PSBlbmRJZHg7ICsraSkge1xuICAgIGtleSA9IGNoaWxkcmVuW2ldLmtleTtcbiAgICBpZiAoaXNEZWYoa2V5KSkgeyBtYXBba2V5XSA9IGk7IH1cbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGNoRnVuY3Rpb24gKGJhY2tlbmQpIHtcbiAgdmFyIGksIGo7XG4gIHZhciBjYnMgPSB7fTtcblxuICB2YXIgbW9kdWxlcyA9IGJhY2tlbmQubW9kdWxlcztcbiAgdmFyIG5vZGVPcHMgPSBiYWNrZW5kLm5vZGVPcHM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgKytpKSB7XG4gICAgY2JzW2hvb2tzW2ldXSA9IFtdO1xuICAgIGZvciAoaiA9IDA7IGogPCBtb2R1bGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICBpZiAoaXNEZWYobW9kdWxlc1tqXVtob29rc1tpXV0pKSB7XG4gICAgICAgIGNic1tob29rc1tpXV0ucHVzaChtb2R1bGVzW2pdW2hvb2tzW2ldXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1wdHlOb2RlQXQgKGVsbSkge1xuICAgIHJldHVybiBuZXcgVk5vZGUobm9kZU9wcy50YWdOYW1lKGVsbSkudG9Mb3dlckNhc2UoKSwge30sIFtdLCB1bmRlZmluZWQsIGVsbSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJtQ2IgKGNoaWxkRWxtLCBsaXN0ZW5lcnMpIHtcbiAgICBmdW5jdGlvbiByZW1vdmUkJDEgKCkge1xuICAgICAgaWYgKC0tcmVtb3ZlJCQxLmxpc3RlbmVycyA9PT0gMCkge1xuICAgICAgICByZW1vdmVOb2RlKGNoaWxkRWxtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlJCQxLmxpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICByZXR1cm4gcmVtb3ZlJCQxXG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVOb2RlIChlbCkge1xuICAgIHZhciBwYXJlbnQgPSBub2RlT3BzLnBhcmVudE5vZGUoZWwpO1xuICAgIC8vIGVsZW1lbnQgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQgZHVlIHRvIHYtaHRtbCAvIHYtdGV4dFxuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBub2RlT3BzLnJlbW92ZUNoaWxkKHBhcmVudCwgZWwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQkJDEgKHZub2RlLCBpblZQcmUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgIWluVlByZSAmJlxuICAgICAgIXZub2RlLm5zICYmXG4gICAgICAhKFxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLmxlbmd0aCAmJlxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLnNvbWUoZnVuY3Rpb24gKGlnbm9yZSkge1xuICAgICAgICAgIHJldHVybiBpc1JlZ0V4cChpZ25vcmUpXG4gICAgICAgICAgICA/IGlnbm9yZS50ZXN0KHZub2RlLnRhZylcbiAgICAgICAgICAgIDogaWdub3JlID09PSB2bm9kZS50YWdcbiAgICAgICAgfSlcbiAgICAgICkgJiZcbiAgICAgIGNvbmZpZy5pc1Vua25vd25FbGVtZW50KHZub2RlLnRhZylcbiAgICApXG4gIH1cblxuICB2YXIgY3JlYXRpbmdFbG1JblZQcmUgPSAwO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsbSAoXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIHBhcmVudEVsbSxcbiAgICByZWZFbG0sXG4gICAgbmVzdGVkLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXhcbiAgKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmVsbSkgJiYgaXNEZWYob3duZXJBcnJheSkpIHtcbiAgICAgIC8vIFRoaXMgdm5vZGUgd2FzIHVzZWQgaW4gYSBwcmV2aW91cyByZW5kZXIhXG4gICAgICAvLyBub3cgaXQncyB1c2VkIGFzIGEgbmV3IG5vZGUsIG92ZXJ3cml0aW5nIGl0cyBlbG0gd291bGQgY2F1c2VcbiAgICAgIC8vIHBvdGVudGlhbCBwYXRjaCBlcnJvcnMgZG93biB0aGUgcm9hZCB3aGVuIGl0J3MgdXNlZCBhcyBhbiBpbnNlcnRpb25cbiAgICAgIC8vIHJlZmVyZW5jZSBub2RlLiBJbnN0ZWFkLCB3ZSBjbG9uZSB0aGUgbm9kZSBvbi1kZW1hbmQgYmVmb3JlIGNyZWF0aW5nXG4gICAgICAvLyBhc3NvY2lhdGVkIERPTSBlbGVtZW50IGZvciBpdC5cbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2bm9kZS5pc1Jvb3RJbnNlcnQgPSAhbmVzdGVkOyAvLyBmb3IgdHJhbnNpdGlvbiBlbnRlciBjaGVja1xuICAgIGlmIChjcmVhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBjcmVhdGluZ0VsbUluVlByZSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgK1xuICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuICAgICAgICAgICAgJ21ha2Ugc3VyZSB0byBwcm92aWRlIHRoZSBcIm5hbWVcIiBvcHRpb24uJyxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICBjcmVhdGluZ0VsbUluVlByZS0tO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkpIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlQ29tbWVudCh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGkgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgdmFyIGlzUmVhY3RpdmF0ZWQgPSBpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaS5rZWVwQWxpdmU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGkuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHtcbiAgICAgICAgaSh2bm9kZSwgZmFsc2UgLyogaHlkcmF0aW5nICovKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgICBpZiAoaXNUcnVlKGlzUmVhY3RpdmF0ZWQpKSB7XG4gICAgICAgICAgcmVhY3RpdmF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0Q29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmRhdGEucGVuZGluZ0luc2VydCkpIHtcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoLmFwcGx5KGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KTtcbiAgICAgIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCA9IG51bGw7XG4gICAgfVxuICAgIHZub2RlLmVsbSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRlbDtcbiAgICBpZiAoaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW1wdHkgY29tcG9uZW50IHJvb3QuXG4gICAgICAvLyBza2lwIGFsbCBlbGVtZW50LXJlbGF0ZWQgbW9kdWxlcyBleGNlcHQgZm9yIHJlZiAoIzM0NTUpXG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgICAvLyBtYWtlIHN1cmUgdG8gaW52b2tlIHRoZSBpbnNlcnQgaG9va1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWN0aXZhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGk7XG4gICAgLy8gaGFjayBmb3IgIzQzMzk6IGEgcmVhY3RpdmF0ZWQgY29tcG9uZW50IHdpdGggaW5uZXIgdHJhbnNpdGlvblxuICAgIC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWRcbiAgICAvLyBhZ2Fpbi4gSXQncyBub3QgaWRlYWwgdG8gaW52b2x2ZSBtb2R1bGUtc3BlY2lmaWMgbG9naWMgaW4gaGVyZSBidXRcbiAgICAvLyB0aGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYSBiZXR0ZXIgd2F5IHRvIGRvIGl0LlxuICAgIHZhciBpbm5lck5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBpbm5lck5vZGUgPSBpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpbm5lck5vZGUuZGF0YSkgJiYgaXNEZWYoaSA9IGkudHJhbnNpdGlvbikpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5hY3RpdmF0ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGNicy5hY3RpdmF0ZVtpXShlbXB0eU5vZGUsIGlubmVyTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2goaW5uZXJOb2RlKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdW5saWtlIGEgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQsXG4gICAgLy8gYSByZWFjdGl2YXRlZCBrZWVwLWFsaXZlIGNvbXBvbmVudCBkb2Vzbid0IGluc2VydCBpdHNlbGZcbiAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnQgKHBhcmVudCwgZWxtLCByZWYkJDEpIHtcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgaWYgKGlzRGVmKHJlZiQkMSkpIHtcbiAgICAgICAgaWYgKG5vZGVPcHMucGFyZW50Tm9kZShyZWYkJDEpID09PSBwYXJlbnQpIHtcbiAgICAgICAgICBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnQsIGVsbSwgcmVmJCQxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZChwYXJlbnQsIGVsbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4gKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2hpbGRyZW4pO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjcmVhdGVFbG0oY2hpbGRyZW5baV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZWxtLCBudWxsLCB0cnVlLCBjaGlsZHJlbiwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZSh2bm9kZS50ZXh0KSkge1xuICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZCh2bm9kZS5lbG0sIG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKHZub2RlLnRleHQpKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQYXRjaGFibGUgKHZub2RlKSB7XG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmKHZub2RlLnRhZylcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7IC8vIFJldXNlIHZhcmlhYmxlXG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKSB7IGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaS5pbnNlcnQpKSB7IGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuXG4gIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXG4gIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgZnVuY3Rpb24gc2V0U2NvcGUgKHZub2RlKSB7XG4gICAgdmFyIGk7XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5mblNjb3BlSWQpKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGU7XG4gICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgaWYgKGlzRGVmKGkgPSBhbmNlc3Rvci5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICAgICAgfVxuICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZm9yIHNsb3QgY29udGVudCB0aGV5IHNob3VsZCBhbHNvIGdldCB0aGUgc2NvcGVJZCBmcm9tIHRoZSBob3N0IGluc3RhbmNlLlxuICAgIGlmIChpc0RlZihpID0gYWN0aXZlSW5zdGFuY2UpICYmXG4gICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmXG4gICAgICBpICE9PSB2bm9kZS5mbkNvbnRleHQgJiZcbiAgICAgIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKVxuICAgICkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgZmFsc2UsIHZub2Rlcywgc3RhcnRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rICh2bm9kZSkge1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgeyBpKHZub2RlKTsgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7IGNicy5kZXN0cm95W2ldKHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGludm9rZURlc3Ryb3lIb29rKHZub2RlLmNoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVWbm9kZXMgKHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG4gICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcbiAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rICh2bm9kZSwgcm0pIHtcbiAgICBpZiAoaXNEZWYocm0pIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICBpZiAoaXNEZWYocm0pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGlzdGVuZXJzIGNvdW50XG4gICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfVxuICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGlzRGVmKGkgPSBpLl92bm9kZSkgJiYgaXNEZWYoaS5kYXRhKSkge1xuICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5yZW1vdmUpKSB7XG4gICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU5vZGUodm5vZGUuZWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbiAocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgIHZhciBvbGRLZXlUb0lkeCwgaWR4SW5PbGQsIHZub2RlVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhuZXdDaCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZEVuZFZub2RlKSkge1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCByaWdodFxuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRW5kVm5vZGUuZWxtKSk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgbGVmdFxuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRFbmRWbm9kZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1VuZGVmKG9sZEtleVRvSWR4KSkgeyBvbGRLZXlUb0lkeCA9IGNyZWF0ZUtleVRvT2xkSWR4KG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTsgfVxuICAgICAgICBpZHhJbk9sZCA9IGlzRGVmKG5ld1N0YXJ0Vm5vZGUua2V5KVxuICAgICAgICAgID8gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS5rZXldXG4gICAgICAgICAgOiBmaW5kSWR4SW5PbGQobmV3U3RhcnRWbm9kZSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bm9kZVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTtcbiAgICAgICAgICBpZiAoc2FtZVZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2hWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIHZub2RlVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgIHJlZkVsbSA9IGlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4ICsgMV0pID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLmVsbTtcbiAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgcmVtb3ZlVm5vZGVzKG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMgKGNoaWxkcmVuKSB7XG4gICAgdmFyIHNlZW5LZXlzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZub2RlID0gY2hpbGRyZW5baV07XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5O1xuICAgICAgaWYgKGlzRGVmKGtleSkpIHtcbiAgICAgICAgaWYgKHNlZW5LZXlzW2tleV0pIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgKFwiRHVwbGljYXRlIGtleXMgZGV0ZWN0ZWQ6ICdcIiArIGtleSArIFwiJy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLlwiKSxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZW5LZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZElkeEluT2xkIChub2RlLCBvbGRDaCwgc3RhcnQsIGVuZCkge1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG9sZENoW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIHNhbWVWbm9kZShub2RlLCBjKSkgeyByZXR1cm4gaSB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2hWbm9kZSAoXG4gICAgb2xkVm5vZGUsXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXgsXG4gICAgcmVtb3ZlT25seVxuICApIHtcbiAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gY2xvbmUgcmV1c2VkIHZub2RlXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcblxuICAgIGlmIChpc1RydWUob2xkVm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyKSkge1xuICAgICAgaWYgKGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgaHlkcmF0ZShvbGRWbm9kZS5lbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cbiAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC1cbiAgICAvLyBpZiB0aGUgbmV3IG5vZGUgaXMgbm90IGNsb25lZCBpdCBtZWFucyB0aGUgcmVuZGVyIGZ1bmN0aW9ucyBoYXZlIGJlZW5cbiAgICAvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuICAgIGlmIChpc1RydWUodm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICBpc1RydWUob2xkVm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICB2bm9kZS5rZXkgPT09IG9sZFZub2RlLmtleSAmJlxuICAgICAgKGlzVHJ1ZSh2bm9kZS5pc0Nsb25lZCkgfHwgaXNUcnVlKHZub2RlLmlzT25jZSkpXG4gICAgKSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcbiAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgY2ggPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSkgeyBjYnMudXBkYXRlW2ldKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xuICAgICAgaWYgKGlzRGVmKG9sZENoKSAmJiBpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKG9sZENoICE9PSBjaCkgeyB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTsgfVxuICAgICAgfSBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKG9sZENoLCAwLCBvbGRDaC5sZW5ndGggLSAxKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHtcbiAgICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCB2bm9kZS50ZXh0KTtcbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucG9zdHBhdGNoKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VJbnNlcnRIb29rICh2bm9kZSwgcXVldWUsIGluaXRpYWwpIHtcbiAgICAvLyBkZWxheSBpbnNlcnQgaG9va3MgZm9yIGNvbXBvbmVudCByb290IG5vZGVzLCBpbnZva2UgdGhlbSBhZnRlciB0aGVcbiAgICAvLyBlbGVtZW50IGlzIHJlYWxseSBpbnNlcnRlZFxuICAgIGlmIChpc1RydWUoaW5pdGlhbCkgJiYgaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgdm5vZGUucGFyZW50LmRhdGEucGVuZGluZ0luc2VydCA9IHF1ZXVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHF1ZXVlW2ldLmRhdGEuaG9vay5pbnNlcnQocXVldWVbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBoeWRyYXRpb25CYWlsZWQgPSBmYWxzZTtcbiAgLy8gbGlzdCBvZiBtb2R1bGVzIHRoYXQgY2FuIHNraXAgY3JlYXRlIGhvb2sgZHVyaW5nIGh5ZHJhdGlvbiBiZWNhdXNlIHRoZXlcbiAgLy8gYXJlIGFscmVhZHkgcmVuZGVyZWQgb24gdGhlIGNsaWVudCBvciBoYXMgbm8gbmVlZCBmb3IgaW5pdGlhbGl6YXRpb25cbiAgLy8gTm90ZTogc3R5bGUgaXMgZXhjbHVkZWQgYmVjYXVzZSBpdCByZWxpZXMgb24gaW5pdGlhbCBjbG9uZSBmb3IgZnV0dXJlXG4gIC8vIGRlZXAgdXBkYXRlcyAoIzcwNjMpLlxuICB2YXIgaXNSZW5kZXJlZE1vZHVsZSA9IG1ha2VNYXAoJ2F0dHJzLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleScpO1xuXG4gIC8vIE5vdGU6IHRoaXMgaXMgYSBicm93c2VyLW9ubHkgZnVuY3Rpb24gc28gd2UgY2FuIGFzc3VtZSBlbG1zIGFyZSBET00gbm9kZXMuXG4gIGZ1bmN0aW9uIGh5ZHJhdGUgKGVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaW5WUHJlID0gaW5WUHJlIHx8IChkYXRhICYmIGRhdGEucHJlKTtcbiAgICB2bm9kZS5lbG0gPSBlbG07XG5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkgJiYgaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5KSkge1xuICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIC8vIGFzc2VydCBub2RlIG1hdGNoXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUsIGluVlByZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7IGkodm5vZGUsIHRydWUgLyogaHlkcmF0aW5nICovKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgLy8gY2hpbGQgY29tcG9uZW50LiBpdCBzaG91bGQgaGF2ZSBoeWRyYXRlZCBpdHMgb3duIHRyZWUuXG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIGVtcHR5IGVsZW1lbnQsIGFsbG93IGNsaWVudCB0byBwaWNrIHVwIGFuZCBwb3B1bGF0ZSBjaGlsZHJlblxuICAgICAgICBpZiAoIWVsbS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdi1odG1sIGFuZCBkb21Qcm9wczogaW5uZXJIVE1MXG4gICAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhKSAmJiBpc0RlZihpID0gaS5kb21Qcm9wcykgJiYgaXNEZWYoaSA9IGkuaW5uZXJIVE1MKSkge1xuICAgICAgICAgICAgaWYgKGkgIT09IGVsbS5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignc2VydmVyIGlubmVySFRNTDogJywgaSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdjbGllbnQgaW5uZXJIVE1MOiAnLCBlbG0uaW5uZXJIVE1MKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaXRlcmF0ZSBhbmQgY29tcGFyZSBjaGlsZHJlbiBsaXN0c1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGNoaWxkTm9kZSA9IGVsbS5maXJzdENoaWxkO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgICAgICBpZiAoIWNoaWxkTm9kZSB8fCAhaHlkcmF0ZShjaGlsZE5vZGUsIGNoaWxkcmVuW2kkMV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIGNoaWxkTm9kZSBpcyBub3QgbnVsbCwgaXQgbWVhbnMgdGhlIGFjdHVhbCBjaGlsZE5vZGVzIGxpc3QgaXNcbiAgICAgICAgICAgIC8vIGxvbmdlciB0aGFuIHRoZSB2aXJ0dWFsIGNoaWxkcmVuIGxpc3QuXG4gICAgICAgICAgICBpZiAoIWNoaWxkcmVuTWF0Y2ggfHwgY2hpbGROb2RlKSB7XG4gICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ01pc21hdGNoaW5nIGNoaWxkTm9kZXMgdnMuIFZOb2RlczogJywgZWxtLmNoaWxkTm9kZXMsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICB2YXIgZnVsbEludm9rZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgIGlmICghaXNSZW5kZXJlZE1vZHVsZShrZXkpKSB7XG4gICAgICAgICAgICBmdWxsSW52b2tlID0gdHJ1ZTtcbiAgICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmdWxsSW52b2tlICYmIGRhdGFbJ2NsYXNzJ10pIHtcbiAgICAgICAgICAvLyBlbnN1cmUgY29sbGVjdGluZyBkZXBzIGZvciBkZWVwIGNsYXNzIGJpbmRpbmdzIGZvciBmdXR1cmUgdXBkYXRlc1xuICAgICAgICAgIHRyYXZlcnNlKGRhdGFbJ2NsYXNzJ10pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbG0uZGF0YSAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoIChub2RlLCB2bm9kZSwgaW5WUHJlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLnRhZykpIHtcbiAgICAgIHJldHVybiB2bm9kZS50YWcuaW5kZXhPZigndnVlLWNvbXBvbmVudCcpID09PSAwIHx8IChcbiAgICAgICAgIWlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGluVlByZSkgJiZcbiAgICAgICAgdm5vZGUudGFnLnRvTG93ZXJDYXNlKCkgPT09IChub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAodm5vZGUuaXNDb21tZW50ID8gOCA6IDMpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoIChvbGRWbm9kZSwgdm5vZGUsIGh5ZHJhdGluZywgcmVtb3ZlT25seSkge1xuICAgIGlmIChpc1VuZGVmKHZub2RlKSkge1xuICAgICAgaWYgKGlzRGVmKG9sZFZub2RlKSkgeyBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7IH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpc0luaXRpYWxQYXRjaCA9IGZhbHNlO1xuICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcblxuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkge1xuICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudFxuICAgICAgaXNJbml0aWFsUGF0Y2ggPSB0cnVlO1xuICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXNSZWFsRWxlbWVudCA9IGlzRGVmKG9sZFZub2RlLm5vZGVUeXBlKTtcbiAgICAgIGlmICghaXNSZWFsRWxlbWVudCAmJiBzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xuICAgICAgICAvLyBwYXRjaCBleGlzdGluZyByb290IG5vZGVcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbnVsbCwgbnVsbCwgcmVtb3ZlT25seSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNSZWFsRWxlbWVudCkge1xuICAgICAgICAgIC8vIG1vdW50aW5nIHRvIGEgcmVhbCBlbGVtZW50XG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBzZXJ2ZXItcmVuZGVyZWQgY29udGVudCBhbmQgaWYgd2UgY2FuIHBlcmZvcm1cbiAgICAgICAgICAvLyBhIHN1Y2Nlc3NmdWwgaHlkcmF0aW9uLlxuICAgICAgICAgIGlmIChvbGRWbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBvbGRWbm9kZS5oYXNBdHRyaWJ1dGUoU1NSX0FUVFIpKSB7XG4gICAgICAgICAgICBvbGRWbm9kZS5yZW1vdmVBdHRyaWJ1dGUoU1NSX0FUVFIpO1xuICAgICAgICAgICAgaHlkcmF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzVHJ1ZShoeWRyYXRpbmcpKSB7XG4gICAgICAgICAgICBpZiAoaHlkcmF0ZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkpIHtcbiAgICAgICAgICAgICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG9sZFZub2RlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAnVGhlIGNsaWVudC1zaWRlIHJlbmRlcmVkIHZpcnR1YWwgRE9NIHRyZWUgaXMgbm90IG1hdGNoaW5nICcgK1xuICAgICAgICAgICAgICAgICdzZXJ2ZXItcmVuZGVyZWQgY29udGVudC4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGluY29ycmVjdCAnICtcbiAgICAgICAgICAgICAgICAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgK1xuICAgICAgICAgICAgICAgICc8cD4sIG9yIG1pc3NpbmcgPHRib2R5Pi4gQmFpbGluZyBoeWRyYXRpb24gYW5kIHBlcmZvcm1pbmcgJyArXG4gICAgICAgICAgICAgICAgJ2Z1bGwgY2xpZW50LXNpZGUgcmVuZGVyLidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXG4gICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcbiAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlcGxhY2luZyBleGlzdGluZyBlbGVtZW50XG4gICAgICAgIHZhciBvbGRFbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICAgIHZhciBwYXJlbnRFbG0gPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSxcbiAgICAgICAgICBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVsbSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgaWYgKGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XG4gICAgICAgICAgdmFyIHBhdGNoYWJsZSA9IGlzUGF0Y2hhYmxlKHZub2RlKTtcbiAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgY2JzLmRlc3Ryb3lbaV0oYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IuZWxtID0gdm5vZGUuZWxtO1xuICAgICAgICAgICAgaWYgKHBhdGNoYWJsZSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgICAgICAgICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCBhbmNlc3Rvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gIzY1MTNcbiAgICAgICAgICAgICAgLy8gaW52b2tlIGluc2VydCBob29rcyB0aGF0IG1heSBoYXZlIGJlZW4gbWVyZ2VkIGJ5IGNyZWF0ZSBob29rcy5cbiAgICAgICAgICAgICAgLy8gZS5nLiBmb3IgZGlyZWN0aXZlcyB0aGF0IHVzZXMgdGhlIFwiaW5zZXJ0ZWRcIiBob29rLlxuICAgICAgICAgICAgICB2YXIgaW5zZXJ0ID0gYW5jZXN0b3IuZGF0YS5ob29rLmluc2VydDtcbiAgICAgICAgICAgICAgaWYgKGluc2VydC5tZXJnZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzdGFydCBhdCBpbmRleCAxIHRvIGF2b2lkIHJlLWludm9raW5nIGNvbXBvbmVudCBtb3VudGVkIGhvb2tcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDIgPSAxOyBpJDIgPCBpbnNlcnQuZm5zLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgICAgICAgICAgICAgIGluc2VydC5mbnNbaSQyXSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVnaXN0ZXJSZWYoYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVzdHJveSBvbGQgbm9kZVxuICAgICAgICBpZiAoaXNEZWYocGFyZW50RWxtKSkge1xuICAgICAgICAgIHJlbW92ZVZub2Rlcyhbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50YWcpKSB7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpc0luaXRpYWxQYXRjaCk7XG4gICAgcmV0dXJuIHZub2RlLmVsbVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGlyZWN0aXZlcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlRGlyZWN0aXZlcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7XG4gICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgaXNDcmVhdGUgPSBvbGRWbm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgaXNEZXN0cm95ID0gdm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgdmFyIG5ld0RpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCB2bm9kZS5jb250ZXh0KTtcblxuICB2YXIgZGlyc1dpdGhJbnNlcnQgPSBbXTtcbiAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgdmFyIGtleSwgb2xkRGlyLCBkaXI7XG4gIGZvciAoa2V5IGluIG5ld0RpcnMpIHtcbiAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgZGlyID0gbmV3RGlyc1trZXldO1xuICAgIGlmICghb2xkRGlyKSB7XG4gICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkge1xuICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICBkaXIub2xkVmFsdWUgPSBvbGREaXIudmFsdWU7XG4gICAgICBkaXIub2xkQXJnID0gb2xkRGlyLmFyZztcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuY29tcG9uZW50VXBkYXRlZCkge1xuICAgICAgICBkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkge1xuICAgIHZhciBjYWxsSW5zZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aEluc2VydC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGlzQ3JlYXRlKSB7XG4gICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGNhbGxJbnNlcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIWlzQ3JlYXRlKSB7XG4gICAgZm9yIChrZXkgaW4gb2xkRGlycykge1xuICAgICAgaWYgKCFuZXdEaXJzW2tleV0pIHtcbiAgICAgICAgLy8gbm8gbG9uZ2VyIHByZXNlbnQsIHVuYmluZFxuICAgICAgICBjYWxsSG9vayQxKG9sZERpcnNba2V5XSwgJ3VuYmluZCcsIG9sZFZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxIChcbiAgZGlycyxcbiAgdm1cbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCFkaXJzKSB7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIHZhciBpLCBkaXI7XG4gIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBpZiAoIWRpci5tb2RpZmllcnMpIHtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZGlyLm1vZGlmaWVycyA9IGVtcHR5TW9kaWZpZXJzO1xuICAgIH1cbiAgICByZXNbZ2V0UmF3RGlyTmFtZShkaXIpXSA9IGRpcjtcbiAgICBkaXIuZGVmID0gcmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCAnZGlyZWN0aXZlcycsIGRpci5uYW1lLCB0cnVlKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRSYXdEaXJOYW1lIChkaXIpIHtcbiAgcmV0dXJuIGRpci5yYXdOYW1lIHx8ICgoZGlyLm5hbWUpICsgXCIuXCIgKyAoT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpKSlcbn1cblxuZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICB2YXIgZm4gPSBkaXIuZGVmICYmIGRpci5kZWZbaG9va107XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBmbih2bm9kZS5lbG0sIGRpciwgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZub2RlLmNvbnRleHQsIChcImRpcmVjdGl2ZSBcIiArIChkaXIubmFtZSkgKyBcIiBcIiArIGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGJhc2VNb2R1bGVzID0gW1xuICByZWYsXG4gIGRpcmVjdGl2ZXNcbl07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVBdHRycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBvcHRzID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGlzRGVmKG9wdHMpICYmIG9wdHMuQ3Rvci5vcHRpb25zLmluaGVyaXRBdHRycyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmF0dHJzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuYXR0cnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyLCBvbGQ7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIHZhciBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYoYXR0cnMuX19vYl9fKSkge1xuICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICBjdXIgPSBhdHRyc1trZXldO1xuICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgaWYgKG9sZCAhPT0gY3VyKSB7XG4gICAgICBzZXRBdHRyKGVsbSwga2V5LCBjdXIsIHZub2RlLmRhdGEucHJlKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKChpc0lFIHx8IGlzRWRnZSkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChpc1VuZGVmKGF0dHJzW2tleV0pKSB7XG4gICAgICBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSwgaXNJblByZSkge1xuICBpZiAoaXNJblByZSB8fCBlbC50YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgIC8vIHNldCBhdHRyaWJ1dGUgZm9yIGJsYW5rIHZhbHVlXG4gICAgLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sXG4gICAgICAvLyBidXQgRmxhc2ggZXhwZWN0cyBhIHZhbHVlIG9mIFwidHJ1ZVwiIHdoZW4gdXNlZCBvbiA8ZW1iZWQ+IHRhZ1xuICAgICAgdmFsdWUgPSBrZXkgPT09ICdhbGxvd2Z1bGxzY3JlZW4nICYmIGVsLnRhZ05hbWUgPT09ICdFTUJFRCdcbiAgICAgICAgPyAndHJ1ZSdcbiAgICAgICAgOiBrZXk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUoa2V5LCB2YWx1ZSkpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXG4gICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmIHZhbHVlICE9PSAnJyAmJiAhZWwuX19pZXBoXG4gICAgKSB7XG4gICAgICB2YXIgYmxvY2tlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICB9O1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZWwuX19pZXBoID0gdHJ1ZTsgLyogSUUgcGxhY2Vob2xkZXIgcGF0Y2hlZCAqL1xuICAgIH1cbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxudmFyIGF0dHJzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUF0dHJzLFxuICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICBpZiAoXG4gICAgaXNVbmRlZihkYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgIGlzVW5kZWYoZGF0YS5jbGFzcykgJiYgKFxuICAgICAgaXNVbmRlZihvbGREYXRhKSB8fCAoXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLmNsYXNzKVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgLy8gaGFuZGxlIHRyYW5zaXRpb24gY2xhc3Nlc1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzO1xuICBpZiAoaXNEZWYodHJhbnNpdGlvbkNsYXNzKSkge1xuICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO1xuICB9XG5cbiAgLy8gc2V0IHRoZSBjbGFzc1xuICBpZiAoY2xzICE9PSBlbC5fcHJldkNsYXNzKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7XG4gICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgfVxufVxuXG52YXIga2xhc3MgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQ2xhc3MsXG4gIHVwZGF0ZTogdXBkYXRlQ2xhc3Ncbn07XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbiBzb21lIGNhc2VzLCB0aGUgZXZlbnQgdXNlZCBoYXMgdG8gYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lXG4vLyBzbyB3ZSB1c2VkIHNvbWUgcmVzZXJ2ZWQgdG9rZW5zIGR1cmluZyBjb21waWxlLlxudmFyIFJBTkdFX1RPS0VOID0gJ19fcic7XG52YXIgQ0hFQ0tCT1hfUkFESU9fVE9LRU4gPSAnX19jJztcblxuLyogICovXG5cbi8vIG5vcm1hbGl6ZSB2LW1vZGVsIGV2ZW50IHRva2VucyB0aGF0IGNhbiBvbmx5IGJlIGRldGVybWluZWQgYXQgcnVudGltZS5cbi8vIGl0J3MgaW1wb3J0YW50IHRvIHBsYWNlIHRoZSBldmVudCBhcyB0aGUgZmlyc3QgaW4gdGhlIGFycmF5IGJlY2F1c2Vcbi8vIHRoZSB3aG9sZSBwb2ludCBpcyBlbnN1cmluZyB0aGUgdi1tb2RlbCBjYWxsYmFjayBnZXRzIGNhbGxlZCBiZWZvcmVcbi8vIHVzZXItYXR0YWNoZWQgaGFuZGxlcnMuXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudHMgKG9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bUkFOR0VfVE9LRU5dKSkge1xuICAgIC8vIElFIGlucHV0W3R5cGU9cmFuZ2VdIG9ubHkgc3VwcG9ydHMgYGNoYW5nZWAgZXZlbnRcbiAgICB2YXIgZXZlbnQgPSBpc0lFID8gJ2NoYW5nZScgOiAnaW5wdXQnO1xuICAgIG9uW2V2ZW50XSA9IFtdLmNvbmNhdChvbltSQU5HRV9UT0tFTl0sIG9uW2V2ZW50XSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW1JBTkdFX1RPS0VOXTtcbiAgfVxuICAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGZpeCAjNDUyMSBidXQgbm8gbG9uZ2VyIG5lY2Vzc2FyeVxuICAvLyBhZnRlciAyLjUuIEtlZXBpbmcgaXQgZm9yIGJhY2t3YXJkcyBjb21wYXQgd2l0aCBnZW5lcmF0ZWQgY29kZSBmcm9tIDwgMi40XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkge1xuICAgIG9uLmNoYW5nZSA9IFtdLmNvbmNhdChvbltDSEVDS0JPWF9SQURJT19UT0tFTl0sIG9uLmNoYW5nZSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0JDE7XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyJDEgKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0JDE7IC8vIHNhdmUgY3VycmVudCB0YXJnZXQgZWxlbWVudCBpbiBjbG9zdXJlXG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICByZW1vdmUkMihldmVudCwgb25jZUhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpO1xuICAgIH1cbiAgfVxufVxuXG4vLyAjOTQ0NjogRmlyZWZveCA8PSA1MyAoaW4gcGFydGljdWxhciwgRVNSIDUyKSBoYXMgaW5jb3JyZWN0IEV2ZW50LnRpbWVTdGFtcFxuLy8gaW1wbGVtZW50YXRpb24gYW5kIGRvZXMgbm90IGZpcmUgbWljcm90YXNrcyBpbiBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLCBzb1xuLy8gc2FmZSB0byBleGNsdWRlLlxudmFyIHVzZU1pY3JvdGFza0ZpeCA9IGlzVXNpbmdNaWNyb1Rhc2sgJiYgIShpc0ZGICYmIE51bWJlcihpc0ZGWzFdKSA8PSA1Myk7XG5cbmZ1bmN0aW9uIGFkZCQxIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgcGFzc2l2ZVxuKSB7XG4gIC8vIGFzeW5jIGVkZ2UgY2FzZSAjNjU2NjogaW5uZXIgY2xpY2sgZXZlbnQgdHJpZ2dlcnMgcGF0Y2gsIGV2ZW50IGhhbmRsZXJcbiAgLy8gYXR0YWNoZWQgdG8gb3V0ZXIgZWxlbWVudCBkdXJpbmcgcGF0Y2gsIGFuZCB0cmlnZ2VyZWQgYWdhaW4uIFRoaXNcbiAgLy8gaGFwcGVucyBiZWNhdXNlIGJyb3dzZXJzIGZpcmUgbWljcm90YXNrIHRpY2tzIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24uXG4gIC8vIHRoZSBzb2x1dGlvbiBpcyBzaW1wbGU6IHdlIHNhdmUgdGhlIHRpbWVzdGFtcCB3aGVuIGEgaGFuZGxlciBpcyBhdHRhY2hlZCxcbiAgLy8gYW5kIHRoZSBoYW5kbGVyIHdvdWxkIG9ubHkgZmlyZSBpZiB0aGUgZXZlbnQgcGFzc2VkIHRvIGl0IHdhcyBmaXJlZFxuICAvLyBBRlRFUiBpdCB3YXMgYXR0YWNoZWQuXG4gIGlmICh1c2VNaWNyb3Rhc2tGaXgpIHtcbiAgICB2YXIgYXR0YWNoZWRUaW1lc3RhbXAgPSBjdXJyZW50Rmx1c2hUaW1lc3RhbXA7XG4gICAgdmFyIG9yaWdpbmFsID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gb3JpZ2luYWwuX3dyYXBwZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKFxuICAgICAgICAvLyBubyBidWJibGluZywgc2hvdWxkIGFsd2F5cyBmaXJlLlxuICAgICAgICAvLyB0aGlzIGlzIGp1c3QgYSBzYWZldHkgbmV0IGluIGNhc2UgZXZlbnQudGltZVN0YW1wIGlzIHVucmVsaWFibGUgaW5cbiAgICAgICAgLy8gY2VydGFpbiB3ZWlyZCBlbnZpcm9ubWVudHMuLi5cbiAgICAgICAgZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fFxuICAgICAgICAvLyBldmVudCBpcyBmaXJlZCBhZnRlciBoYW5kbGVyIGF0dGFjaG1lbnRcbiAgICAgICAgZS50aW1lU3RhbXAgPj0gYXR0YWNoZWRUaW1lc3RhbXAgfHxcbiAgICAgICAgLy8gYmFpbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgaGF2ZSBidWdneSBldmVudC50aW1lU3RhbXAgaW1wbGVtZW50YXRpb25zXG4gICAgICAgIC8vICM5NDYyIGlPUyA5IGJ1ZzogZXZlbnQudGltZVN0YW1wIGlzIDAgYWZ0ZXIgaGlzdG9yeS5wdXNoU3RhdGVcbiAgICAgICAgLy8gIzk2ODEgUXRXZWJFbmdpbmUgZXZlbnQudGltZVN0YW1wIGlzIG5lZ2F0aXZlIHZhbHVlXG4gICAgICAgIGUudGltZVN0YW1wIDw9IDAgfHxcbiAgICAgICAgLy8gIzk0NDggYmFpbCBpZiBldmVudCBpcyBmaXJlZCBpbiBhbm90aGVyIGRvY3VtZW50IGluIGEgbXVsdGktcGFnZVxuICAgICAgICAvLyBlbGVjdHJvbi9udy5qcyBhcHAsIHNpbmNlIGV2ZW50LnRpbWVTdGFtcCB3aWxsIGJlIHVzaW5nIGEgZGlmZmVyZW50XG4gICAgICAgIC8vIHN0YXJ0aW5nIHJlZmVyZW5jZVxuICAgICAgICBlLnRhcmdldC5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlcixcbiAgICBzdXBwb3J0c1Bhc3NpdmVcbiAgICAgID8geyBjYXB0dXJlOiBjYXB0dXJlLCBwYXNzaXZlOiBwYXNzaXZlIH1cbiAgICAgIDogY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMiAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIF90YXJnZXRcbikge1xuICAoX3RhcmdldCB8fCB0YXJnZXQkMSkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIuX3dyYXBwZXIgfHwgaGFuZGxlcixcbiAgICBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEub24pICYmIGlzVW5kZWYodm5vZGUuZGF0YS5vbikpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uIHx8IHt9O1xuICB0YXJnZXQkMSA9IHZub2RlLmVsbTtcbiAgbm9ybWFsaXplRXZlbnRzKG9uKTtcbiAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDEsIHJlbW92ZSQyLCBjcmVhdGVPbmNlSGFuZGxlciQxLCB2bm9kZS5jb250ZXh0KTtcbiAgdGFyZ2V0JDEgPSB1bmRlZmluZWQ7XG59XG5cbnZhciBldmVudHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzLFxuICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVyc1xufTtcblxuLyogICovXG5cbnZhciBzdmdDb250YWluZXI7XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5kb21Qcm9wcykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmRvbVByb3BzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1cjtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihwcm9wcy5fX29iX18pKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmICghKGtleSBpbiBwcm9wcykpIHtcbiAgICAgIGVsbVtrZXldID0gJyc7XG4gICAgfVxuICB9XG5cbiAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICBjdXIgPSBwcm9wc1trZXldO1xuICAgIC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuICAgIC8vIGFzIHRoZXNlIHdpbGwgdGhyb3cgYXdheSBleGlzdGluZyBET00gbm9kZXMgYW5kIGNhdXNlIHJlbW92YWwgZXJyb3JzXG4gICAgLy8gb24gc3Vic2VxdWVudCBwYXRjaGVzICgjMzM2MClcbiAgICBpZiAoa2V5ID09PSAndGV4dENvbnRlbnQnIHx8IGtleSA9PT0gJ2lubmVySFRNTCcpIHtcbiAgICAgIGlmICh2bm9kZS5jaGlsZHJlbikgeyB2bm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwOyB9XG4gICAgICBpZiAoY3VyID09PSBvbGRQcm9wc1trZXldKSB7IGNvbnRpbnVlIH1cbiAgICAgIC8vICM2NjAxIHdvcmsgYXJvdW5kIENocm9tZSB2ZXJzaW9uIDw9IDU1IGJ1ZyB3aGVyZSBzaW5nbGUgdGV4dE5vZGVcbiAgICAgIC8vIHJlcGxhY2VkIGJ5IGlubmVySFRNTC90ZXh0Q29udGVudCByZXRhaW5zIGl0cyBwYXJlbnROb2RlIHByb3BlcnR5XG4gICAgICBpZiAoZWxtLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3ZhbHVlJyAmJiBlbG0udGFnTmFtZSAhPT0gJ1BST0dSRVNTJykge1xuICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcbiAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWRcbiAgICAgIGVsbS5fdmFsdWUgPSBjdXI7XG4gICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcbiAgICAgIHZhciBzdHJDdXIgPSBpc1VuZGVmKGN1cikgPyAnJyA6IFN0cmluZyhjdXIpO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgc3RyQ3VyKSkge1xuICAgICAgICBlbG0udmFsdWUgPSBzdHJDdXI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbm5lckhUTUwnICYmIGlzU1ZHKGVsbS50YWdOYW1lKSAmJiBpc1VuZGVmKGVsbS5pbm5lckhUTUwpKSB7XG4gICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW5uZXJIVE1MIGZvciBTVkcgZWxlbWVudHNcbiAgICAgIHN2Z0NvbnRhaW5lciA9IHN2Z0NvbnRhaW5lciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHN2Z0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIjxzdmc+XCIgKyBjdXIgKyBcIjwvc3ZnPlwiO1xuICAgICAgdmFyIHN2ZyA9IHN2Z0NvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgd2hpbGUgKGVsbS5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoc3ZnLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLmFwcGVuZENoaWxkKHN2Zy5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gc2tpcCB0aGUgdXBkYXRlIGlmIG9sZCBhbmQgbmV3IFZET00gc3RhdGUgaXMgdGhlIHNhbWUuXG4gICAgICAvLyBgdmFsdWVgIGlzIGhhbmRsZWQgc2VwYXJhdGVseSBiZWNhdXNlIHRoZSBET00gdmFsdWUgbWF5IGJlIHRlbXBvcmFyaWx5XG4gICAgICAvLyBvdXQgb2Ygc3luYyB3aXRoIFZET00gc3RhdGUgZHVlIHRvIGZvY3VzLCBjb21wb3NpdGlvbiBhbmQgbW9kaWZpZXJzLlxuICAgICAgLy8gVGhpcyAgIzQ1MjEgYnkgc2tpcHBpbmcgdGhlIHVubmVjZXNzYXJ5IGBjaGVja2VkYCB1cGRhdGUuXG4gICAgICBjdXIgIT09IG9sZFByb3BzW2tleV1cbiAgICApIHtcbiAgICAgIC8vIHNvbWUgcHJvcGVydHkgdXBkYXRlcyBjYW4gdGhyb3dcbiAgICAgIC8vIGUuZy4gYHZhbHVlYCBvbiA8cHJvZ3Jlc3M+IHcvIG5vbi1maW5pdGUgdmFsdWVcbiAgICAgIHRyeSB7XG4gICAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbn1cblxuLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKGVsbSwgY2hlY2tWYWwpIHtcbiAgcmV0dXJuICghZWxtLmNvbXBvc2luZyAmJiAoXG4gICAgZWxtLnRhZ05hbWUgPT09ICdPUFRJT04nIHx8XG4gICAgaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICBpc0RpcnR5V2l0aE1vZGlmaWVycyhlbG0sIGNoZWNrVmFsKVxuICApKVxufVxuXG5mdW5jdGlvbiBpc05vdEluRm9jdXNBbmREaXJ0eSAoZWxtLCBjaGVja1ZhbCkge1xuICAvLyByZXR1cm4gdHJ1ZSB3aGVuIHRleHRib3ggKC5udW1iZXIgYW5kIC50cmltKSBsb3NlcyBmb2N1cyBhbmQgaXRzIHZhbHVlIGlzXG4gIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICB2YXIgbm90SW5Gb2N1cyA9IHRydWU7XG4gIC8vICM2MTU3XG4gIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxuICB0cnkgeyBub3RJbkZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtOyB9IGNhdGNoIChlKSB7fVxuICByZXR1cm4gbm90SW5Gb2N1cyAmJiBlbG0udmFsdWUgIT09IGNoZWNrVmFsXG59XG5cbmZ1bmN0aW9uIGlzRGlydHlXaXRoTW9kaWZpZXJzIChlbG0sIG5ld1ZhbCkge1xuICB2YXIgdmFsdWUgPSBlbG0udmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoaXNEZWYobW9kaWZpZXJzKSkge1xuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn07XG5cbi8qICAqL1xuXG52YXIgcGFyc2VTdHlsZVRleHQgPSBjYWNoZWQoZnVuY3Rpb24gKGNzc1RleHQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgbGlzdERlbGltaXRlciA9IC87KD8hW14oXSpcXCkpL2c7XG4gIHZhciBwcm9wZXJ0eURlbGltaXRlciA9IC86KC4rKS87XG4gIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlcikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChpdGVtKSB7XG4gICAgICB2YXIgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlcik7XG4gICAgICB0bXAubGVuZ3RoID4gMSAmJiAocmVzW3RtcFswXS50cmltKCldID0gdG1wWzFdLnRyaW0oKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8vIG1lcmdlIHN0YXRpYyBhbmQgZHluYW1pYyBzdHlsZSBkYXRhIG9uIHRoZSBzYW1lIHZub2RlXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZURhdGEgKGRhdGEpIHtcbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpO1xuICAvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb25cbiAgLy8gYW5kIGlzIGFsd2F5cyBhIGZyZXNoIG9iamVjdCwgc28gaXQncyBzYWZlIHRvIG1lcmdlIGludG8gaXRcbiAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGVcbiAgICA/IGV4dGVuZChkYXRhLnN0YXRpY1N0eWxlLCBzdHlsZSlcbiAgICA6IHN0eWxlXG59XG5cbi8vIG5vcm1hbGl6ZSBwb3NzaWJsZSBhcnJheSAvIHN0cmluZyB2YWx1ZXMgaW50byBPYmplY3RcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyAoYmluZGluZ1N0eWxlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHtcbiAgICByZXR1cm4gdG9PYmplY3QoYmluZGluZ1N0eWxlKVxuICB9XG4gIGlmICh0eXBlb2YgYmluZGluZ1N0eWxlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXJzZVN0eWxlVGV4dChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgcmV0dXJuIGJpbmRpbmdTdHlsZVxufVxuXG4vKipcbiAqIHBhcmVudCBjb21wb25lbnQgc3R5bGUgc2hvdWxkIGJlIGFmdGVyIGNoaWxkJ3NcbiAqIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHN0eWxlIGNvdWxkIG92ZXJyaWRlIGl0XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlICh2bm9kZSwgY2hlY2tDaGlsZCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBzdHlsZURhdGE7XG5cbiAgaWYgKGNoZWNrQ2hpbGQpIHtcbiAgICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChcbiAgICAgICAgY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhICYmXG4gICAgICAgIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKVxuICAgICAgKSB7XG4gICAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEodm5vZGUuZGF0YSkpKSB7XG4gICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgfVxuXG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHdoaWxlICgocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlLmRhdGEgJiYgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShwYXJlbnROb2RlLmRhdGEpKSkge1xuICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIGNzc1ZhclJFID0gL14tLS87XG52YXIgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbnZhciBzZXRQcm9wID0gZnVuY3Rpb24gKGVsLCBuYW1lLCB2YWwpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjc3NWYXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcbiAgfSBlbHNlIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShoeXBoZW5hdGUobmFtZSksIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbiAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgIC8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIGVtcHR5U3R5bGU7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKGRhdGEuc3R5bGUpICYmXG4gICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbiAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAvLyB0byBtdXRhdGUgaXQuXG4gIHZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlID0gaXNEZWYoc3R5bGUuX19vYl9fKVxuICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59O1xuXG4vKiAgKi9cblxudmFyIHdoaXRlc3BhY2VSRSA9IC9cXHMrLztcblxuLyoqXG4gKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGN1ciArIGNscykudHJpbSgpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiByZW1vdmVDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgfVxuICAgIGlmICghZWwuY2xhc3NMaXN0Lmxlbmd0aCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkge1xuICAgICAgY3VyID0gY3VyLnJlcGxhY2UodGFyLCAnICcpO1xuICAgIH1cbiAgICBjdXIgPSBjdXIudHJpbSgpO1xuICAgIGlmIChjdXIpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbiAoZGVmJCQxKSB7XG4gIGlmICghZGVmJCQxKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGlmIChkZWYkJDEuY3NzICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWUgfHwgJ3YnKSk7XG4gICAgfVxuICAgIGV4dGVuZChyZXMsIGRlZiQkMSk7XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMSlcbiAgfVxufVxuXG52YXIgYXV0b0Nzc1RyYW5zaXRpb24gPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlckNsYXNzOiAobmFtZSArIFwiLWVudGVyXCIpLFxuICAgIGVudGVyVG9DbGFzczogKG5hbWUgKyBcIi1lbnRlci10b1wiKSxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKSxcbiAgICBsZWF2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlXCIpLFxuICAgIGxlYXZlVG9DbGFzczogKG5hbWUgKyBcIi1sZWF2ZS10b1wiKSxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKVxuICB9XG59KTtcblxudmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xudmFyIFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XG52YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG5cbi8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbnZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2l0aW9uJztcbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSAndHJhbnNpdGlvbmVuZCc7XG52YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nO1xudmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ2FuaW1hdGlvbmVuZCc7XG5pZiAoaGFzVHJhbnNpdGlvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICB0cmFuc2l0aW9uUHJvcCA9ICdXZWJraXRUcmFuc2l0aW9uJztcbiAgICB0cmFuc2l0aW9uRW5kRXZlbnQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCc7XG4gIH1cbiAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgYW5pbWF0aW9uUHJvcCA9ICdXZWJraXRBbmltYXRpb24nO1xuICAgIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdEFuaW1hdGlvbkVuZCc7XG4gIH1cbn1cblxuLy8gYmluZGluZyB0byB3aW5kb3cgaXMgbmVjZXNzYXJ5IHRvIG1ha2UgaG90IHJlbG9hZCB3b3JrIGluIElFIGluIHN0cmljdCBtb2RlXG52YXIgcmFmID0gaW5Ccm93c2VyXG4gID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdylcbiAgICA6IHNldFRpbWVvdXRcbiAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH07XG5cbmZ1bmN0aW9uIG5leHRGcmFtZSAoZm4pIHtcbiAgcmFmKGZ1bmN0aW9uICgpIHtcbiAgICByYWYoZm4pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIHZhciB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcyB8fCAoZWwuX3RyYW5zaXRpb25DbGFzc2VzID0gW10pO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkge1xuICAgIHRyYW5zaXRpb25DbGFzc2VzLnB1c2goY2xzKTtcbiAgICBhZGRDbGFzcyhlbCwgY2xzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHJlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7XG4gIH1cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyAoXG4gIGVsLFxuICBleHBlY3RlZFR5cGUsXG4gIGNiXG4pIHtcbiAgdmFyIHJlZiA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICB2YXIgdGltZW91dCA9IHJlZi50aW1lb3V0O1xuICB2YXIgcHJvcENvdW50ID0gcmVmLnByb3BDb3VudDtcbiAgaWYgKCF0eXBlKSB7IHJldHVybiBjYigpIH1cbiAgdmFyIGV2ZW50ID0gdHlwZSA9PT0gVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICB2YXIgZW5kZWQgPSAwO1xuICB2YXIgZW5kID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgICBjYigpO1xuICB9O1xuICB2YXIgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcbiAgICAgIGlmICgrK2VuZGVkID49IHByb3BDb3VudCkge1xuICAgICAgICBlbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xuICAgICAgZW5kKCk7XG4gICAgfVxuICB9LCB0aW1lb3V0ICsgMSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbn1cblxudmFyIHRyYW5zZm9ybVJFID0gL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLztcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8gKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uRHVyYXRpb25zID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcblxuICB2YXIgdHlwZTtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICB2YXIgcHJvcENvdW50ID0gMDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcbiAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xuICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgOiBudWxsO1xuICAgIHByb3BDb3VudCA9IHR5cGVcbiAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG4gIHZhciBoYXNUcmFuc2Zvcm0gPVxuICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICB0cmFuc2Zvcm1SRS50ZXN0KHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdQcm9wZXJ0eSddKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgcHJvcENvdW50OiBwcm9wQ291bnQsXG4gICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUaW1lb3V0IChkZWxheXMsIGR1cmF0aW9ucykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gIH1cblxuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgZHVyYXRpb25zLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgIHJldHVybiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pXG4gIH0pKVxufVxuXG4vLyBPbGQgdmVyc2lvbnMgb2YgQ2hyb21pdW0gKGJlbG93IDYxLjAuMzE2My4xMDApIGZvcm1hdHMgZmxvYXRpbmcgcG9pbnRlciBudW1iZXJzXG4vLyBpbiBhIGxvY2FsZS1kZXBlbmRlbnQgd2F5LCB1c2luZyBhIGNvbW1hIGluc3RlYWQgb2YgYSBkb3QuXG4vLyBJZiBjb21tYSBpcyBub3QgcmVwbGFjZWQgd2l0aCBhIGRvdCwgdGhlIGlucHV0IHdpbGwgYmUgcm91bmRlZCBkb3duIChpLmUuIGFjdGluZ1xuLy8gYXMgYSBmbG9vciBmdW5jdGlvbikgY2F1c2luZyB1bmV4cGVjdGVkIGJlaGF2aW9yc1xuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoJywnLCAnLicpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdyAmJiBlbC5wYXJlbnROb2RlKSB7XG4gICAgICAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyB8fCAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyA9IHt9KSlbKHZub2RlLmtleSldID0gdm5vZGU7XG4gICAgfVxuICAgIGJlZm9yZUxlYXZlICYmIGJlZm9yZUxlYXZlKGVsKTtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdExlYXZlRHVyYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGVhdmUgJiYgbGVhdmUoZWwsIGNiKTtcbiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIG9ubHkgdXNlZCBpbiBkZXYgbW9kZVxuZnVuY3Rpb24gY2hlY2tEdXJhdGlvbiAodmFsLCBuYW1lLCB2bm9kZSkge1xuICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgbm90IGEgdmFsaWQgbnVtYmVyIC0gXCIgK1xuICAgICAgXCJnb3QgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsKSkgKyBcIi5cIixcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgTmFOIC0gXCIgK1xuICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNWYWxpZER1cmF0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmICFpc05hTih2YWwpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdHJhbnNpdGlvbiBob29rJ3MgYXJndW1lbnQgbGVuZ3RoLiBUaGUgaG9vayBtYXkgYmU6XG4gKiAtIGEgbWVyZ2VkIGhvb2sgKGludm9rZXIpIHdpdGggdGhlIG9yaWdpbmFsIGluIC5mbnNcbiAqIC0gYSB3cmFwcGVkIGNvbXBvbmVudCBtZXRob2QgKGNoZWNrIC5fbGVuZ3RoKVxuICogLSBhIHBsYWluIGZ1bmN0aW9uICgubGVuZ3RoKVxuICovXG5mdW5jdGlvbiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoIChmbikge1xuICBpZiAoaXNVbmRlZihmbikpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB2YXIgaW52b2tlckZucyA9IGZuLmZucztcbiAgaWYgKGlzRGVmKGludm9rZXJGbnMpKSB7XG4gICAgLy8gaW52b2tlclxuICAgIHJldHVybiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKFxuICAgICAgQXJyYXkuaXNBcnJheShpbnZva2VyRm5zKVxuICAgICAgICA/IGludm9rZXJGbnNbMF1cbiAgICAgICAgOiBpbnZva2VyRm5zXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZm4uX2xlbmd0aCB8fCBmbi5sZW5ndGgpID4gMVxuICB9XG59XG5cbmZ1bmN0aW9uIF9lbnRlciAoXywgdm5vZGUpIHtcbiAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgIGVudGVyKHZub2RlKTtcbiAgfVxufVxuXG52YXIgdHJhbnNpdGlvbiA9IGluQnJvd3NlciA/IHtcbiAgY3JlYXRlOiBfZW50ZXIsXG4gIGFjdGl2YXRlOiBfZW50ZXIsXG4gIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlJCQxICh2bm9kZSwgcm0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICAgIGxlYXZlKHZub2RlLCBybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgfVxuICB9XG59IDoge307XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbXG4gIGF0dHJzLFxuICBrbGFzcyxcbiAgZXZlbnRzLFxuICBkb21Qcm9wcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb25cbl07XG5cbi8qICAqL1xuXG4vLyB0aGUgZGlyZWN0aXZlIG1vZHVsZSBzaG91bGQgYmUgYXBwbGllZCBsYXN0LCBhZnRlciBhbGxcbi8vIGJ1aWx0LWluIG1vZHVsZXMgaGF2ZSBiZWVuIGFwcGxpZWQuXG52YXIgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpO1xuXG52YXIgcGF0Y2ggPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHsgbm9kZU9wczogbm9kZU9wcywgbW9kdWxlczogbW9kdWxlcyB9KTtcblxuLyoqXG4gKiBOb3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgbGlrZSBhdHRhY2hpbmdcbiAqIHByb3BlcnRpZXMgdG8gRWxlbWVudHMuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAoaXNJRTkpIHtcbiAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBkaXJlY3RpdmUgPSB7XG4gIGluc2VydGVkOiBmdW5jdGlvbiBpbnNlcnRlZCAoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWbm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAvLyAjNjkwM1xuICAgICAgaWYgKG9sZFZub2RlLmVsbSAmJiAhb2xkVm5vZGUuZWxtLl92T3B0aW9ucykge1xuICAgICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkaXJlY3RpdmUuY29tcG9uZW50VXBkYXRlZChlbCwgYmluZGluZywgdm5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZub2RlLnRhZyA9PT0gJ3RleHRhcmVhJyB8fCBpc1RleHRJbnB1dFR5cGUoZWwudHlwZSkpIHtcbiAgICAgIGVsLl92TW9kaWZpZXJzID0gYmluZGluZy5tb2RpZmllcnM7XG4gICAgICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzLmxhenkpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIG9uQ29tcG9zaXRpb25TdGFydCk7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8vIFNhZmFyaSA8IDEwLjIgJiBVSVdlYlZpZXcgZG9lc24ndCBmaXJlIGNvbXBvc2l0aW9uZW5kIHdoZW5cbiAgICAgICAgLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZVxuICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgIC8vIGZpcmVzIFwiY2hhbmdlXCIgaW5zdGVhZCBvZiBcImlucHV0XCIgb24gYXV0b2NvbXBsZXRlLlxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpc0lFOSkge1xuICAgICAgICAgIGVsLnZtb2RlbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50VXBkYXRlZDogZnVuY3Rpb24gY29tcG9uZW50VXBkYXRlZCAoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIC8vIGluIGNhc2UgdGhlIG9wdGlvbnMgcmVuZGVyZWQgYnkgdi1mb3IgaGF2ZSBjaGFuZ2VkLFxuICAgICAgLy8gaXQncyBwb3NzaWJsZSB0aGF0IHRoZSB2YWx1ZSBpcyBvdXQtb2Ytc3luYyB3aXRoIHRoZSByZW5kZXJlZCBvcHRpb25zLlxuICAgICAgLy8gZGV0ZWN0IHN1Y2ggY2FzZXMgYW5kIGZpbHRlciBvdXQgdmFsdWVzIHRoYXQgbm8gbG9uZ2VyIGhhcyBhIG1hdGNoaW5nXG4gICAgICAvLyBvcHRpb24gaW4gdGhlIERPTS5cbiAgICAgIHZhciBwcmV2T3B0aW9ucyA9IGVsLl92T3B0aW9ucztcbiAgICAgIHZhciBjdXJPcHRpb25zID0gZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgICAgaWYgKGN1ck9wdGlvbnMuc29tZShmdW5jdGlvbiAobywgaSkgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgcHJldk9wdGlvbnNbaV0pOyB9KSkge1xuICAgICAgICAvLyB0cmlnZ2VyIGNoYW5nZSBldmVudCBpZlxuICAgICAgICAvLyBubyBtYXRjaGluZyBvcHRpb24gZm91bmQgZm9yIGF0IGxlYXN0IG9uZSB2YWx1ZVxuICAgICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGVcbiAgICAgICAgICA/IGJpbmRpbmcudmFsdWUuc29tZShmdW5jdGlvbiAodikgeyByZXR1cm4gaGFzTm9NYXRjaGluZ09wdGlvbih2LCBjdXJPcHRpb25zKTsgfSlcbiAgICAgICAgICA6IGJpbmRpbmcudmFsdWUgIT09IGJpbmRpbmcub2xkVmFsdWUgJiYgaGFzTm9NYXRjaGluZ09wdGlvbihiaW5kaW5nLnZhbHVlLCBjdXJPcHRpb25zKTtcbiAgICAgICAgaWYgKG5lZWRSZXNldCkge1xuICAgICAgICAgIHRyaWdnZXIoZWwsICdjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY3R1YWxseVNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgdmFyIGlzTXVsdGlwbGUgPSBlbC5tdWx0aXBsZTtcbiAgaWYgKGlzTXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiICsgKGJpbmRpbmcuZXhwcmVzc2lvbikgKyBcIlxcXCI+IFwiICtcbiAgICAgIFwiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgXCIgKyAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIGdldFZhbHVlKG9wdGlvbikpID4gLTE7XG4gICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgIGlmIChlbC5zZWxlY3RlZEluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNNdWx0aXBsZSkge1xuICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNOb01hdGNoaW5nT3B0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5ldmVyeShmdW5jdGlvbiAobykgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgdmFsdWUpOyB9KVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gIHJldHVybiAnX3ZhbHVlJyBpbiBvcHRpb25cbiAgICA/IG9wdGlvbi5fdmFsdWVcbiAgICA6IG9wdGlvbi52YWx1ZVxufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZCAoZSkge1xuICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvblxuICBpZiAoIWUudGFyZ2V0LmNvbXBvc2luZykgeyByZXR1cm4gfVxuICBlLnRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIgKGVsLCB0eXBlKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG59XG5cbi8qICAqL1xuXG4vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5ID1cbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG4gICAgdmFyIG9sZFZhbHVlID0gcmVmLm9sZFZhbHVlO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF2YWx1ZSA9PT0gIW9sZFZhbHVlKSB7IHJldHVybiB9XG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIGlmICh0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWF2ZSh2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kIChcbiAgICBlbCxcbiAgICBiaW5kaW5nLFxuICAgIHZub2RlLFxuICAgIG9sZFZub2RlLFxuICAgIGlzRGVzdHJveVxuICApIHtcbiAgICBpZiAoIWlzRGVzdHJveSkge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBwbGF0Zm9ybURpcmVjdGl2ZXMgPSB7XG4gIG1vZGVsOiBkaXJlY3RpdmUsXG4gIHNob3c6IHNob3dcbn07XG5cbi8qICAqL1xuXG52YXIgdHJhbnNpdGlvblByb3BzID0ge1xuICBuYW1lOiBTdHJpbmcsXG4gIGFwcGVhcjogQm9vbGVhbixcbiAgY3NzOiBCb29sZWFuLFxuICBtb2RlOiBTdHJpbmcsXG4gIHR5cGU6IFN0cmluZyxcbiAgZW50ZXJDbGFzczogU3RyaW5nLFxuICBsZWF2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxufTtcblxuLy8gaW4gY2FzZSB0aGUgY2hpbGQgaXMgYWxzbyBhbiBhYnN0cmFjdCBjb21wb25lbnQsIGUuZy4gPGtlZXAtYWxpdmU+XG4vLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuZnVuY3Rpb24gZ2V0UmVhbENoaWxkICh2bm9kZSkge1xuICB2YXIgY29tcE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgcmV0dXJuIGdldFJlYWxDaGlsZChnZXRGaXJzdENvbXBvbmVudENoaWxkKGNvbXBPcHRpb25zLmNoaWxkcmVuKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEgKGNvbXApIHtcbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIG9wdGlvbnMgPSBjb21wLiRvcHRpb25zO1xuICAvLyBwcm9wc1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5wcm9wc0RhdGEpIHtcbiAgICBkYXRhW2tleV0gPSBjb21wW2tleV07XG4gIH1cbiAgLy8gZXZlbnRzLlxuICAvLyBleHRyYWN0IGxpc3RlbmVycyBhbmQgcGFzcyB0aGVtIGRpcmVjdGx5IHRvIHRoZSB0cmFuc2l0aW9uIG1ldGhvZHNcbiAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7XG4gICAgZGF0YVtjYW1lbGl6ZShrZXkkMSldID0gbGlzdGVuZXJzW2tleSQxXTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgaWYgKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKSkge1xuICAgIHJldHVybiBoKCdrZWVwLWFsaXZlJywge1xuICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkge1xuICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcbiAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG59XG5cbnZhciBpc05vdFRleHROb2RlID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudGFnIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKTsgfTtcblxudmFyIGlzVlNob3dEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH07XG5cbnZhciBUcmFuc2l0aW9uID0ge1xuICBuYW1lOiAndHJhbnNpdGlvbicsXG4gIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGZpbHRlciBvdXQgdGV4dCBub2RlcyAocG9zc2libGUgd2hpdGVzcGFjZXMpXG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoaXNOb3RUZXh0Tm9kZSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudC4gVXNlICcgK1xuICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICAvLyB3YXJuIGludmFsaWQgbW9kZVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtb2RlICYmIG1vZGUgIT09ICdpbi1vdXQnICYmIG1vZGUgIT09ICdvdXQtaW4nXG4gICAgKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJyArIG1vZGUsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3NcbiAgICAvLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC5cbiAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgIC8vIHVzZSBnZXRSZWFsQ2hpbGQoKSB0byBpZ25vcmUgYWJzdHJhY3QgY29tcG9uZW50cyBlLmcuIGtlZXAtYWxpdmVcbiAgICB2YXIgY2hpbGQgPSBnZXRSZWFsQ2hpbGQocmF3Q2hpbGQpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9sZWF2aW5nKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb25cbiAgICAvLyBjb21wb25lbnQgaW5zdGFuY2UuIFRoaXMga2V5IHdpbGwgYmUgdXNlZCB0byByZW1vdmUgcGVuZGluZyBsZWF2aW5nIG5vZGVzXG4gICAgLy8gZHVyaW5nIGVudGVyaW5nLlxuICAgIHZhciBpZCA9IFwiX190cmFuc2l0aW9uLVwiICsgKHRoaXMuX3VpZCkgKyBcIi1cIjtcbiAgICBjaGlsZC5rZXkgPSBjaGlsZC5rZXkgPT0gbnVsbFxuICAgICAgPyBjaGlsZC5pc0NvbW1lbnRcbiAgICAgICAgPyBpZCArICdjb21tZW50J1xuICAgICAgICA6IGlkICsgY2hpbGQudGFnXG4gICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgPyAoU3RyaW5nKGNoaWxkLmtleSkuaW5kZXhPZihpZCkgPT09IDAgPyBjaGlsZC5rZXkgOiBpZCArIGNoaWxkLmtleSlcbiAgICAgICAgOiBjaGlsZC5rZXk7XG5cbiAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuICAgIHZhciBvbGRSYXdDaGlsZCA9IHRoaXMuX3Zub2RlO1xuICAgIHZhciBvbGRDaGlsZCA9IGdldFJlYWxDaGlsZChvbGRSYXdDaGlsZCk7XG5cbiAgICAvLyBtYXJrIHYtc2hvd1xuICAgIC8vIHNvIHRoYXQgdGhlIHRyYW5zaXRpb24gbW9kdWxlIGNhbiBoYW5kIG92ZXIgdGhlIGNvbnRyb2wgdG8gdGhlIGRpcmVjdGl2ZVxuICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoaXNWU2hvd0RpcmVjdGl2ZSkpIHtcbiAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgb2xkQ2hpbGQgJiZcbiAgICAgIG9sZENoaWxkLmRhdGEgJiZcbiAgICAgICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpICYmXG4gICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKSAmJlxuICAgICAgLy8gIzY2ODcgY29tcG9uZW50IHJvb3QgaXMgYSBjb21tZW50IG5vZGVcbiAgICAgICEob2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UgJiYgb2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLmlzQ29tbWVudClcbiAgICApIHtcbiAgICAgIC8vIHJlcGxhY2Ugb2xkIGNoaWxkIHRyYW5zaXRpb24gZGF0YSB3aXRoIGZyZXNoIG9uZVxuICAgICAgLy8gaW1wb3J0YW50IGZvciBkeW5hbWljIHRyYW5zaXRpb25zIVxuICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpO1xuICAgICAgLy8gaGFuZGxlIHRyYW5zaXRpb24gbW9kZVxuICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7XG4gICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xuICAgICAgICB0aGlzLl9sZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2FmdGVyTGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcyQxLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xuICAgICAgICBpZiAoaXNBc3luY1BsYWNlaG9sZGVyKGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZFxuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxheWVkTGVhdmU7XG4gICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9O1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnYWZ0ZXJFbnRlcicsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdlbnRlckNhbmNlbGxlZCcsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7IGRlbGF5ZWRMZWF2ZSA9IGxlYXZlOyB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmF3Q2hpbGRcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBwcm9wcyA9IGV4dGVuZCh7XG4gIHRhZzogU3RyaW5nLFxuICBtb3ZlQ2xhc3M6IFN0cmluZ1xufSwgdHJhbnNpdGlvblByb3BzKTtcblxuZGVsZXRlIHByb3BzLm1vZGU7XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gIHByb3BzOiBwcm9wcyxcblxuICBiZWZvcmVNb3VudDogZnVuY3Rpb24gYmVmb3JlTW91bnQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHVwZGF0ZSA9IHRoaXMuX3VwZGF0ZTtcbiAgICB0aGlzLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHRoaXMkMSk7XG4gICAgICAvLyBmb3JjZSByZW1vdmluZyBwYXNzXG4gICAgICB0aGlzJDEuX19wYXRjaF9fKFxuICAgICAgICB0aGlzJDEuX3Zub2RlLFxuICAgICAgICB0aGlzJDEua2VwdCxcbiAgICAgICAgZmFsc2UsIC8vIGh5ZHJhdGluZ1xuICAgICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICAgICk7XG4gICAgICB0aGlzJDEuX3Zub2RlID0gdGhpcyQxLmtlcHQ7XG4gICAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAgIHVwZGF0ZS5jYWxsKHRoaXMkMSwgdm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkICgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcbiAgICB2YXIgbW92ZUNsYXNzID0gdGhpcy5tb3ZlQ2xhc3MgfHwgKCh0aGlzLm5hbWUgfHwgJ3YnKSArICctbW92ZScpO1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoIHx8ICF0aGlzLmhhc01vdmUoY2hpbGRyZW5bMF0uZWxtLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcbiAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xuXG4gICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgLy8gYXNzaWduIHRvIHRoaXMgdG8gYXZvaWQgYmVpbmcgcmVtb3ZlZCBpbiB0cmVlLXNoYWtpbmdcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0aGlzLl9yZWZsb3cgPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcblxuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgdmFyIGVsID0gYy5lbG07XG4gICAgICAgIHZhciBzID0gZWwuc3R5bGU7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBlbC5fbW92ZUNiID0gZnVuY3Rpb24gY2IgKGUpIHtcbiAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpO1xuICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgaGFzTW92ZTogZnVuY3Rpb24gaGFzTW92ZSAoZWwsIG1vdmVDbGFzcykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICh0aGlzLl9oYXNNb3ZlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNNb3ZlXG4gICAgICB9XG4gICAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcbiAgICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xuICAgICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXG4gICAgICAvLyBpcyBhcHBsaWVkLlxuICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gICAgICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgIGVsLl90cmFuc2l0aW9uQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHsgcmVtb3ZlQ2xhc3MoY2xvbmUsIGNscyk7IH0pO1xuICAgICAgfVxuICAgICAgYWRkQ2xhc3MoY2xvbmUsIG1vdmVDbGFzcyk7XG4gICAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGhpcy4kZWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgdmFyIGluZm8gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gICAgICB0aGlzLiRlbC5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzIChjKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgIGMuZWxtLl9tb3ZlQ2IoKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9lbnRlckNiKSB7XG4gICAgYy5lbG0uX2VudGVyQ2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbiAoYykge1xuICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24gKGMpIHtcbiAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XG4gIHZhciBuZXdQb3MgPSBjLmRhdGEubmV3UG9zO1xuICB2YXIgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgaWYgKGR4IHx8IGR5KSB7XG4gICAgYy5kYXRhLm1vdmVkID0gdHJ1ZTtcbiAgICB2YXIgcyA9IGMuZWxtLnN0eWxlO1xuICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIGR4ICsgXCJweCxcIiArIGR5ICsgXCJweClcIjtcbiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gIH1cbn1cblxudmFyIHBsYXRmb3JtQ29tcG9uZW50cyA9IHtcbiAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgVHJhbnNpdGlvbkdyb3VwOiBUcmFuc2l0aW9uR3JvdXBcbn07XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGluQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCdcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICBjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiZcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICAgICk7XG4gICAgfVxuICB9LCAwKTtcbn1cblxuLyogICovXG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZTtcbiIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInNvcnRhYmxlanNcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wic29ydGFibGVqc1wiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJ2dWVkcmFnZ2FibGVcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJzb3J0YWJsZWpzXCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJ2dWVkcmFnZ2FibGVcIl0gPSBmYWN0b3J5KHJvb3RbXCJTb3J0YWJsZVwiXSk7XG59KSgodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMpLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2EzNTJfXykge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcImZiMTVcIik7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi9fZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLyxcbiAgICAgIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZVtMQVNUX0lOREVYXTtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmVbTEFTVF9JTkRFWF0gPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGJ1aWx0aW5FeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuXG4gLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuICByZXR1cm4gYnVpbHRpbkV4ZWMuY2FsbChSLCBTKTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjUnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9hMzUyX187IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCZgJ118XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCZgJ118XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRyZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xuXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gICAgfVxuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgICB2YXIgY2FwdHVyZTtcbiAgICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgICB9KTtcbiAgfVxufSk7XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnJlcXVpcmUoJy4vX2V4cG9ydCcpKHtcbiAgdGFyZ2V0OiAnUmVnRXhwJyxcbiAgcHJvdG86IHRydWUsXG4gIGZvcmNlZDogcmVnZXhwRXhlYyAhPT0gLy4vLmV4ZWNcbn0sIHtcbiAgZXhlYzogcmVnZXhwRXhlY1xufSk7XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJmdW5jdGlvbiBnZXRDb25zb2xlKCkge1xyXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICByZXR1cm4gd2luZG93LmNvbnNvbGU7XHJcbiAgfVxyXG4gIHJldHVybiBnbG9iYWwuY29uc29sZTtcclxufVxyXG5jb25zdCBjb25zb2xlID0gZ2V0Q29uc29sZSgpO1xyXG5cclxuZnVuY3Rpb24gY2FjaGVkKGZuKSB7XHJcbiAgY29uc3QgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gIHJldHVybiBmdW5jdGlvbiBjYWNoZWRGbihzdHIpIHtcclxuICAgIGNvbnN0IGhpdCA9IGNhY2hlW3N0cl07XHJcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSk7XHJcbiAgfTtcclxufVxyXG5cclxuY29uc3QgcmVnZXggPSAvLShcXHcpL2c7XHJcbmNvbnN0IGNhbWVsaXplID0gY2FjaGVkKHN0ciA9PlxyXG4gIHN0ci5yZXBsYWNlKHJlZ2V4LCAoXywgYykgPT4gKGMgPyBjLnRvVXBwZXJDYXNlKCkgOiBcIlwiKSlcclxuKTtcclxuXHJcbmZ1bmN0aW9uIHJlbW92ZU5vZGUobm9kZSkge1xyXG4gIGlmIChub2RlLnBhcmVudEVsZW1lbnQgIT09IG51bGwpIHtcclxuICAgIG5vZGUucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChub2RlKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluc2VydE5vZGVBdChmYXRoZXJOb2RlLCBub2RlLCBwb3NpdGlvbikge1xyXG4gIGNvbnN0IHJlZk5vZGUgPVxyXG4gICAgcG9zaXRpb24gPT09IDBcclxuICAgICAgPyBmYXRoZXJOb2RlLmNoaWxkcmVuWzBdXHJcbiAgICAgIDogZmF0aGVyTm9kZS5jaGlsZHJlbltwb3NpdGlvbiAtIDFdLm5leHRTaWJsaW5nO1xyXG4gIGZhdGhlck5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIHJlZk5vZGUpO1xyXG59XHJcblxyXG5leHBvcnQgeyBpbnNlcnROb2RlQXQsIGNhbWVsaXplLCBjb25zb2xlLCByZW1vdmVOb2RlIH07XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIi8vIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgcG9seWZpbGwgYnkgQWRhbSBNaWxsZXJcblxuLy8gTUlUIGxpY2Vuc2VcblxuKGZ1bmN0aW9uKGRvY3VtZW50KXtcbiAgdmFyIGN1cnJlbnRTY3JpcHQgPSBcImN1cnJlbnRTY3JpcHRcIixcbiAgICAgIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7IC8vIExpdmUgTm9kZUxpc3QgY29sbGVjdGlvblxuXG4gIC8vIElmIGJyb3dzZXIgbmVlZHMgY3VycmVudFNjcmlwdCBwb2x5ZmlsbCwgYWRkIGdldCBjdXJyZW50U2NyaXB0KCkgdG8gdGhlIGRvY3VtZW50IG9iamVjdFxuICBpZiAoIShjdXJyZW50U2NyaXB0IGluIGRvY3VtZW50KSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudCwgY3VycmVudFNjcmlwdCwge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpe1xuXG4gICAgICAgIC8vIElFIDYtMTAgc3VwcG9ydHMgc2NyaXB0IHJlYWR5U3RhdGVcbiAgICAgICAgLy8gSUUgMTArIHN1cHBvcnQgc3RhY2sgdHJhY2VcbiAgICAgICAgdHJ5IHsgdGhyb3cgbmV3IEVycm9yKCk7IH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuXG4gICAgICAgICAgLy8gRmluZCB0aGUgc2Vjb25kIG1hdGNoIGZvciB0aGUgXCJhdFwiIHN0cmluZyB0byBnZXQgZmlsZSBzcmMgdXJsIGZyb20gc3RhY2suXG4gICAgICAgICAgLy8gU3BlY2lmaWNhbGx5IHdvcmtzIHdpdGggdGhlIGZvcm1hdCBvZiBzdGFjayB0cmFjZXMgaW4gSUUuXG4gICAgICAgICAgdmFyIGksIHJlcyA9ICgoLy4qYXQgW15cXChdKlxcKCguKik6Lis6LitcXCkkL2lnKS5leGVjKGVyci5zdGFjaykgfHwgW2ZhbHNlXSlbMV07XG5cbiAgICAgICAgICAvLyBGb3IgYWxsIHNjcmlwdHMgb24gdGhlIHBhZ2UsIGlmIHNyYyBtYXRjaGVzIG9yIGlmIHJlYWR5IHN0YXRlIGlzIGludGVyYWN0aXZlLCByZXR1cm4gdGhlIHNjcmlwdCB0YWdcbiAgICAgICAgICBmb3IoaSBpbiBzY3JpcHRzKXtcbiAgICAgICAgICAgIGlmKHNjcmlwdHNbaV0uc3JjID09IHJlcyB8fCBzY3JpcHRzW2ldLnJlYWR5U3RhdGUgPT0gXCJpbnRlcmFjdGl2ZVwiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIHNjcmlwdHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSWYgbm8gbWF0Y2gsIHJldHVybiBudWxsXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSkoZG9jdW1lbnQpO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gVGhpcyBmaWxlIGlzIGltcG9ydGVkIGludG8gbGliL3djIGNsaWVudCBidW5kbGVzLlxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5FRURfQ1VSUkVOVFNDUklQVF9QT0xZRklMTCkge1xuICAgIHJlcXVpcmUoJ2N1cnJlbnQtc2NyaXB0LXBvbHlmaWxsJylcbiAgfVxuXG4gIHZhciBpXG4gIGlmICgoaSA9IHdpbmRvdy5kb2N1bWVudC5jdXJyZW50U2NyaXB0KSAmJiAoaSA9IGkuc3JjLm1hdGNoKC8oLitcXC8pW14vXStcXC5qcyhcXD8uKik/JC8pKSkge1xuICAgIF9fd2VicGFja19wdWJsaWNfcGF0aF9fID0gaVsxXSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIH1cbn1cblxuLy8gSW5kaWNhdGUgdG8gd2VicGFjayB0aGF0IHRoaXMgZmlsZSBjYW4gYmUgY29uY2F0ZW5hdGVkXG5leHBvcnQgZGVmYXVsdCBudWxsXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5XCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiaW1wb3J0IGFycmF5V2l0aEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aEhvbGVzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5TGltaXQgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5TGltaXRcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheVwiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlUmVzdCBmcm9tIFwiLi9ub25JdGVyYWJsZVJlc3RcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufSIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheVwiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCIuL25vbkl0ZXJhYmxlU3ByZWFkXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn0iLCJpbXBvcnQgU29ydGFibGUgZnJvbSBcInNvcnRhYmxlanNcIjtcclxuaW1wb3J0IHsgaW5zZXJ0Tm9kZUF0LCBjYW1lbGl6ZSwgY29uc29sZSwgcmVtb3ZlTm9kZSB9IGZyb20gXCIuL3V0aWwvaGVscGVyXCI7XHJcblxyXG5mdW5jdGlvbiBidWlsZEF0dHJpYnV0ZShvYmplY3QsIHByb3BOYW1lLCB2YWx1ZSkge1xyXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICByZXR1cm4gb2JqZWN0O1xyXG4gIH1cclxuICBvYmplY3QgPSBvYmplY3QgfHwge307XHJcbiAgb2JqZWN0W3Byb3BOYW1lXSA9IHZhbHVlO1xyXG4gIHJldHVybiBvYmplY3Q7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbXB1dGVWbUluZGV4KHZub2RlcywgZWxlbWVudCkge1xyXG4gIHJldHVybiB2bm9kZXMubWFwKGVsdCA9PiBlbHQuZWxtKS5pbmRleE9mKGVsZW1lbnQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb21wdXRlSW5kZXhlcyhzbG90cywgY2hpbGRyZW4sIGlzVHJhbnNpdGlvbiwgZm9vdGVyT2Zmc2V0KSB7XHJcbiAgaWYgKCFzbG90cykge1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZWxtRnJvbU5vZGVzID0gc2xvdHMubWFwKGVsdCA9PiBlbHQuZWxtKTtcclxuICBjb25zdCBmb290ZXJJbmRleCA9IGNoaWxkcmVuLmxlbmd0aCAtIGZvb3Rlck9mZnNldDtcclxuICBjb25zdCByYXdJbmRleGVzID0gWy4uLmNoaWxkcmVuXS5tYXAoKGVsdCwgaWR4KSA9PlxyXG4gICAgaWR4ID49IGZvb3RlckluZGV4ID8gZWxtRnJvbU5vZGVzLmxlbmd0aCA6IGVsbUZyb21Ob2Rlcy5pbmRleE9mKGVsdClcclxuICApO1xyXG4gIHJldHVybiBpc1RyYW5zaXRpb24gPyByYXdJbmRleGVzLmZpbHRlcihpbmQgPT4gaW5kICE9PSAtMSkgOiByYXdJbmRleGVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBlbWl0KGV2dE5hbWUsIGV2dERhdGEpIHtcclxuICB0aGlzLiRuZXh0VGljaygoKSA9PiB0aGlzLiRlbWl0KGV2dE5hbWUudG9Mb3dlckNhc2UoKSwgZXZ0RGF0YSkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZWxlZ2F0ZUFuZEVtaXQoZXZ0TmFtZSkge1xyXG4gIHJldHVybiBldnREYXRhID0+IHtcclxuICAgIGlmICh0aGlzLnJlYWxMaXN0ICE9PSBudWxsKSB7XHJcbiAgICAgIHRoaXNbXCJvbkRyYWdcIiArIGV2dE5hbWVdKGV2dERhdGEpO1xyXG4gICAgfVxyXG4gICAgZW1pdC5jYWxsKHRoaXMsIGV2dE5hbWUsIGV2dERhdGEpO1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzVHJhbnNpdGlvbk5hbWUobmFtZSkge1xyXG4gIHJldHVybiBbXCJ0cmFuc2l0aW9uLWdyb3VwXCIsIFwiVHJhbnNpdGlvbkdyb3VwXCJdLmluY2x1ZGVzKG5hbWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1RyYW5zaXRpb24oc2xvdHMpIHtcclxuICBpZiAoIXNsb3RzIHx8IHNsb3RzLmxlbmd0aCAhPT0gMSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICBjb25zdCBbeyBjb21wb25lbnRPcHRpb25zIH1dID0gc2xvdHM7XHJcbiAgaWYgKCFjb21wb25lbnRPcHRpb25zKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIHJldHVybiBpc1RyYW5zaXRpb25OYW1lKGNvbXBvbmVudE9wdGlvbnMudGFnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U2xvdChzbG90LCBzY29wZWRTbG90LCBrZXkpIHtcclxuICByZXR1cm4gc2xvdFtrZXldIHx8IChzY29wZWRTbG90W2tleV0gPyBzY29wZWRTbG90W2tleV0oKSA6IHVuZGVmaW5lZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbXB1dGVDaGlsZHJlbkFuZE9mZnNldHMoY2hpbGRyZW4sIHNsb3QsIHNjb3BlZFNsb3QpIHtcclxuICBsZXQgaGVhZGVyT2Zmc2V0ID0gMDtcclxuICBsZXQgZm9vdGVyT2Zmc2V0ID0gMDtcclxuICBjb25zdCBoZWFkZXIgPSBnZXRTbG90KHNsb3QsIHNjb3BlZFNsb3QsIFwiaGVhZGVyXCIpO1xyXG4gIGlmIChoZWFkZXIpIHtcclxuICAgIGhlYWRlck9mZnNldCA9IGhlYWRlci5sZW5ndGg7XHJcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuID8gWy4uLmhlYWRlciwgLi4uY2hpbGRyZW5dIDogWy4uLmhlYWRlcl07XHJcbiAgfVxyXG4gIGNvbnN0IGZvb3RlciA9IGdldFNsb3Qoc2xvdCwgc2NvcGVkU2xvdCwgXCJmb290ZXJcIik7XHJcbiAgaWYgKGZvb3Rlcikge1xyXG4gICAgZm9vdGVyT2Zmc2V0ID0gZm9vdGVyLmxlbmd0aDtcclxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4gPyBbLi4uY2hpbGRyZW4sIC4uLmZvb3Rlcl0gOiBbLi4uZm9vdGVyXTtcclxuICB9XHJcbiAgcmV0dXJuIHsgY2hpbGRyZW4sIGhlYWRlck9mZnNldCwgZm9vdGVyT2Zmc2V0IH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENvbXBvbmVudEF0dHJpYnV0ZXMoJGF0dHJzLCBjb21wb25lbnREYXRhKSB7XHJcbiAgbGV0IGF0dHJpYnV0ZXMgPSBudWxsO1xyXG4gIGNvbnN0IHVwZGF0ZSA9IChuYW1lLCB2YWx1ZSkgPT4ge1xyXG4gICAgYXR0cmlidXRlcyA9IGJ1aWxkQXR0cmlidXRlKGF0dHJpYnV0ZXMsIG5hbWUsIHZhbHVlKTtcclxuICB9O1xyXG4gIGNvbnN0IGF0dHJzID0gT2JqZWN0LmtleXMoJGF0dHJzKVxyXG4gICAgLmZpbHRlcihrZXkgPT4ga2V5ID09PSBcImlkXCIgfHwga2V5LnN0YXJ0c1dpdGgoXCJkYXRhLVwiKSlcclxuICAgIC5yZWR1Y2UoKHJlcywga2V5KSA9PiB7XHJcbiAgICAgIHJlc1trZXldID0gJGF0dHJzW2tleV07XHJcbiAgICAgIHJldHVybiByZXM7XHJcbiAgICB9LCB7fSk7XHJcbiAgdXBkYXRlKFwiYXR0cnNcIiwgYXR0cnMpO1xyXG5cclxuICBpZiAoIWNvbXBvbmVudERhdGEpIHtcclxuICAgIHJldHVybiBhdHRyaWJ1dGVzO1xyXG4gIH1cclxuICBjb25zdCB7IG9uLCBwcm9wcywgYXR0cnM6IGNvbXBvbmVudERhdGFBdHRycyB9ID0gY29tcG9uZW50RGF0YTtcclxuICB1cGRhdGUoXCJvblwiLCBvbik7XHJcbiAgdXBkYXRlKFwicHJvcHNcIiwgcHJvcHMpO1xyXG4gIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlcy5hdHRycywgY29tcG9uZW50RGF0YUF0dHJzKTtcclxuICByZXR1cm4gYXR0cmlidXRlcztcclxufVxyXG5cclxuY29uc3QgZXZlbnRzTGlzdGVuZWQgPSBbXCJTdGFydFwiLCBcIkFkZFwiLCBcIlJlbW92ZVwiLCBcIlVwZGF0ZVwiLCBcIkVuZFwiXTtcclxuY29uc3QgZXZlbnRzVG9FbWl0ID0gW1wiQ2hvb3NlXCIsIFwiVW5jaG9vc2VcIiwgXCJTb3J0XCIsIFwiRmlsdGVyXCIsIFwiQ2xvbmVcIl07XHJcbmNvbnN0IHJlYWRvbmx5UHJvcGVydGllcyA9IFtcIk1vdmVcIiwgLi4uZXZlbnRzTGlzdGVuZWQsIC4uLmV2ZW50c1RvRW1pdF0ubWFwKFxyXG4gIGV2dCA9PiBcIm9uXCIgKyBldnRcclxuKTtcclxudmFyIGRyYWdnaW5nRWxlbWVudCA9IG51bGw7XHJcblxyXG5jb25zdCBwcm9wcyA9IHtcclxuICBvcHRpb25zOiBPYmplY3QsXHJcbiAgbGlzdDoge1xyXG4gICAgdHlwZTogQXJyYXksXHJcbiAgICByZXF1aXJlZDogZmFsc2UsXHJcbiAgICBkZWZhdWx0OiBudWxsXHJcbiAgfSxcclxuICB2YWx1ZToge1xyXG4gICAgdHlwZTogQXJyYXksXHJcbiAgICByZXF1aXJlZDogZmFsc2UsXHJcbiAgICBkZWZhdWx0OiBudWxsXHJcbiAgfSxcclxuICBub1RyYW5zaXRpb25PbkRyYWc6IHtcclxuICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICBkZWZhdWx0OiBmYWxzZVxyXG4gIH0sXHJcbiAgY2xvbmU6IHtcclxuICAgIHR5cGU6IEZ1bmN0aW9uLFxyXG4gICAgZGVmYXVsdDogb3JpZ2luYWwgPT4ge1xyXG4gICAgICByZXR1cm4gb3JpZ2luYWw7XHJcbiAgICB9XHJcbiAgfSxcclxuICBlbGVtZW50OiB7XHJcbiAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICBkZWZhdWx0OiBcImRpdlwiXHJcbiAgfSxcclxuICB0YWc6IHtcclxuICAgIHR5cGU6IFN0cmluZyxcclxuICAgIGRlZmF1bHQ6IG51bGxcclxuICB9LFxyXG4gIG1vdmU6IHtcclxuICAgIHR5cGU6IEZ1bmN0aW9uLFxyXG4gICAgZGVmYXVsdDogbnVsbFxyXG4gIH0sXHJcbiAgY29tcG9uZW50RGF0YToge1xyXG4gICAgdHlwZTogT2JqZWN0LFxyXG4gICAgcmVxdWlyZWQ6IGZhbHNlLFxyXG4gICAgZGVmYXVsdDogbnVsbFxyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IGRyYWdnYWJsZUNvbXBvbmVudCA9IHtcclxuICBuYW1lOiBcImRyYWdnYWJsZVwiLFxyXG5cclxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxyXG5cclxuICBwcm9wcyxcclxuXHJcbiAgZGF0YSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRyYW5zaXRpb25Nb2RlOiBmYWxzZSxcclxuICAgICAgbm9uZUZ1bmN0aW9uYWxDb21wb25lbnRNb2RlOiBmYWxzZVxyXG4gICAgfTtcclxuICB9LFxyXG5cclxuICByZW5kZXIoaCkge1xyXG4gICAgY29uc3Qgc2xvdHMgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xyXG4gICAgdGhpcy50cmFuc2l0aW9uTW9kZSA9IGlzVHJhbnNpdGlvbihzbG90cyk7XHJcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBoZWFkZXJPZmZzZXQsIGZvb3Rlck9mZnNldCB9ID0gY29tcHV0ZUNoaWxkcmVuQW5kT2Zmc2V0cyhcclxuICAgICAgc2xvdHMsXHJcbiAgICAgIHRoaXMuJHNsb3RzLFxyXG4gICAgICB0aGlzLiRzY29wZWRTbG90c1xyXG4gICAgKTtcclxuICAgIHRoaXMuaGVhZGVyT2Zmc2V0ID0gaGVhZGVyT2Zmc2V0O1xyXG4gICAgdGhpcy5mb290ZXJPZmZzZXQgPSBmb290ZXJPZmZzZXQ7XHJcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2V0Q29tcG9uZW50QXR0cmlidXRlcyh0aGlzLiRhdHRycywgdGhpcy5jb21wb25lbnREYXRhKTtcclxuICAgIHJldHVybiBoKHRoaXMuZ2V0VGFnKCksIGF0dHJpYnV0ZXMsIGNoaWxkcmVuKTtcclxuICB9LFxyXG5cclxuICBjcmVhdGVkKCkge1xyXG4gICAgaWYgKHRoaXMubGlzdCAhPT0gbnVsbCAmJiB0aGlzLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgXCJWYWx1ZSBhbmQgbGlzdCBwcm9wcyBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlISBQbGVhc2Ugc2V0IG9uZSBvciBhbm90aGVyLlwiXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuZWxlbWVudCAhPT0gXCJkaXZcIikge1xyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgXCJFbGVtZW50IHByb3BzIGlzIGRlcHJlY2F0ZWQgcGxlYXNlIHVzZSB0YWcgcHJvcHMgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Tb3J0YWJsZUpTL1Z1ZS5EcmFnZ2FibGUvYmxvYi9tYXN0ZXIvZG9jdW1lbnRhdGlvbi9taWdyYXRlLm1kI2VsZW1lbnQtcHJvcHNcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLm9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgXCJPcHRpb25zIHByb3BzIGlzIGRlcHJlY2F0ZWQsIGFkZCBzb3J0YWJsZSBvcHRpb25zIGRpcmVjdGx5IGFzIHZ1ZS5kcmFnZ2FibGUgaXRlbSwgb3IgdXNlIHYtYmluZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Tb3J0YWJsZUpTL1Z1ZS5EcmFnZ2FibGUvYmxvYi9tYXN0ZXIvZG9jdW1lbnRhdGlvbi9taWdyYXRlLm1kI29wdGlvbnMtcHJvcHNcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIG1vdW50ZWQoKSB7XHJcbiAgICB0aGlzLm5vbmVGdW5jdGlvbmFsQ29tcG9uZW50TW9kZSA9XHJcbiAgICAgIHRoaXMuZ2V0VGFnKCkudG9Mb3dlckNhc2UoKSAhPT0gdGhpcy4kZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAmJlxyXG4gICAgICAhdGhpcy5nZXRJc0Z1bmN0aW9uYWwoKTtcclxuICAgIGlmICh0aGlzLm5vbmVGdW5jdGlvbmFsQ29tcG9uZW50TW9kZSAmJiB0aGlzLnRyYW5zaXRpb25Nb2RlKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICBgVHJhbnNpdGlvbi1ncm91cCBpbnNpZGUgY29tcG9uZW50IGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSBhbHRlciB0YWcgdmFsdWUgb3IgcmVtb3ZlIHRyYW5zaXRpb24tZ3JvdXAuIEN1cnJlbnQgdGFnIHZhbHVlOiAke3RoaXMuZ2V0VGFnKCl9YFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb3B0aW9uc0FkZGVkID0ge307XHJcbiAgICBldmVudHNMaXN0ZW5lZC5mb3JFYWNoKGVsdCA9PiB7XHJcbiAgICAgIG9wdGlvbnNBZGRlZFtcIm9uXCIgKyBlbHRdID0gZGVsZWdhdGVBbmRFbWl0LmNhbGwodGhpcywgZWx0KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV2ZW50c1RvRW1pdC5mb3JFYWNoKGVsdCA9PiB7XHJcbiAgICAgIG9wdGlvbnNBZGRlZFtcIm9uXCIgKyBlbHRdID0gZW1pdC5iaW5kKHRoaXMsIGVsdCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gT2JqZWN0LmtleXModGhpcy4kYXR0cnMpLnJlZHVjZSgocmVzLCBrZXkpID0+IHtcclxuICAgICAgcmVzW2NhbWVsaXplKGtleSldID0gdGhpcy4kYXR0cnNba2V5XTtcclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH0sIHt9KTtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRpb25zLCBhdHRyaWJ1dGVzLCBvcHRpb25zQWRkZWQsIHtcclxuICAgICAgb25Nb3ZlOiAoZXZ0LCBvcmlnaW5hbEV2ZW50KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub25EcmFnTW92ZShldnQsIG9yaWdpbmFsRXZlbnQpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgICEoXCJkcmFnZ2FibGVcIiBpbiBvcHRpb25zKSAmJiAob3B0aW9ucy5kcmFnZ2FibGUgPSBcIj4qXCIpO1xyXG4gICAgdGhpcy5fc29ydGFibGUgPSBuZXcgU29ydGFibGUodGhpcy5yb290Q29udGFpbmVyLCBvcHRpb25zKTtcclxuICAgIHRoaXMuY29tcHV0ZUluZGV4ZXMoKTtcclxuICB9LFxyXG5cclxuICBiZWZvcmVEZXN0cm95KCkge1xyXG4gICAgaWYgKHRoaXMuX3NvcnRhYmxlICE9PSB1bmRlZmluZWQpIHRoaXMuX3NvcnRhYmxlLmRlc3Ryb3koKTtcclxuICB9LFxyXG5cclxuICBjb21wdXRlZDoge1xyXG4gICAgcm9vdENvbnRhaW5lcigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMudHJhbnNpdGlvbk1vZGUgPyB0aGlzLiRlbC5jaGlsZHJlblswXSA6IHRoaXMuJGVsO1xyXG4gICAgfSxcclxuXHJcbiAgICByZWFsTGlzdCgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMubGlzdCA/IHRoaXMubGlzdCA6IHRoaXMudmFsdWU7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgd2F0Y2g6IHtcclxuICAgIG9wdGlvbnM6IHtcclxuICAgICAgaGFuZGxlcihuZXdPcHRpb25WYWx1ZSkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlT3B0aW9ucyhuZXdPcHRpb25WYWx1ZSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGRlZXA6IHRydWVcclxuICAgIH0sXHJcblxyXG4gICAgJGF0dHJzOiB7XHJcbiAgICAgIGhhbmRsZXIobmV3T3B0aW9uVmFsdWUpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZU9wdGlvbnMobmV3T3B0aW9uVmFsdWUpO1xyXG4gICAgICB9LFxyXG4gICAgICBkZWVwOiB0cnVlXHJcbiAgICB9LFxyXG5cclxuICAgIHJlYWxMaXN0KCkge1xyXG4gICAgICB0aGlzLmNvbXB1dGVJbmRleGVzKCk7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgbWV0aG9kczoge1xyXG4gICAgZ2V0SXNGdW5jdGlvbmFsKCkge1xyXG4gICAgICBjb25zdCB7IGZuT3B0aW9ucyB9ID0gdGhpcy5fdm5vZGU7XHJcbiAgICAgIHJldHVybiBmbk9wdGlvbnMgJiYgZm5PcHRpb25zLmZ1bmN0aW9uYWw7XHJcbiAgICB9LFxyXG5cclxuICAgIGdldFRhZygpIHtcclxuICAgICAgcmV0dXJuIHRoaXMudGFnIHx8IHRoaXMuZWxlbWVudDtcclxuICAgIH0sXHJcblxyXG4gICAgdXBkYXRlT3B0aW9ucyhuZXdPcHRpb25WYWx1ZSkge1xyXG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBuZXdPcHRpb25WYWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gY2FtZWxpemUocHJvcGVydHkpO1xyXG4gICAgICAgIGlmIChyZWFkb25seVByb3BlcnRpZXMuaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XHJcbiAgICAgICAgICB0aGlzLl9zb3J0YWJsZS5vcHRpb24odmFsdWUsIG5ld09wdGlvblZhbHVlW3Byb3BlcnR5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGdldENoaWxkcmVuTm9kZXMoKSB7XHJcbiAgICAgIGlmICh0aGlzLm5vbmVGdW5jdGlvbmFsQ29tcG9uZW50TW9kZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiRjaGlsZHJlblswXS4kc2xvdHMuZGVmYXVsdDtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCByYXdOb2RlcyA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XHJcbiAgICAgIHJldHVybiB0aGlzLnRyYW5zaXRpb25Nb2RlID8gcmF3Tm9kZXNbMF0uY2hpbGQuJHNsb3RzLmRlZmF1bHQgOiByYXdOb2RlcztcclxuICAgIH0sXHJcblxyXG4gICAgY29tcHV0ZUluZGV4ZXMoKSB7XHJcbiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICB0aGlzLnZpc2libGVJbmRleGVzID0gY29tcHV0ZUluZGV4ZXMoXHJcbiAgICAgICAgICB0aGlzLmdldENoaWxkcmVuTm9kZXMoKSxcclxuICAgICAgICAgIHRoaXMucm9vdENvbnRhaW5lci5jaGlsZHJlbixcclxuICAgICAgICAgIHRoaXMudHJhbnNpdGlvbk1vZGUsXHJcbiAgICAgICAgICB0aGlzLmZvb3Rlck9mZnNldFxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXRVbmRlcmx5aW5nVm0oaHRtbEVsdCkge1xyXG4gICAgICBjb25zdCBpbmRleCA9IGNvbXB1dGVWbUluZGV4KHRoaXMuZ2V0Q2hpbGRyZW5Ob2RlcygpIHx8IFtdLCBodG1sRWx0KTtcclxuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xyXG4gICAgICAgIC8vRWRnZSBjYXNlIGR1cmluZyBtb3ZlIGNhbGxiYWNrOiByZWxhdGVkIGVsZW1lbnQgbWlnaHQgYmVcclxuICAgICAgICAvL2FuIGVsZW1lbnQgZGlmZmVyZW50IGZyb20gY29sbGVjdGlvblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLnJlYWxMaXN0W2luZGV4XTtcclxuICAgICAgcmV0dXJuIHsgaW5kZXgsIGVsZW1lbnQgfTtcclxuICAgIH0sXHJcblxyXG4gICAgZ2V0VW5kZXJseWluZ1BvdGVuY2lhbERyYWdnYWJsZUNvbXBvbmVudCh7IF9fdnVlX186IHZ1ZSB9KSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICAhdnVlIHx8XHJcbiAgICAgICAgIXZ1ZS4kb3B0aW9ucyB8fFxyXG4gICAgICAgICFpc1RyYW5zaXRpb25OYW1lKHZ1ZS4kb3B0aW9ucy5fY29tcG9uZW50VGFnKVxyXG4gICAgICApIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAhKFwicmVhbExpc3RcIiBpbiB2dWUpICYmXHJcbiAgICAgICAgICB2dWUuJGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxyXG4gICAgICAgICAgXCJyZWFsTGlzdFwiIGluIHZ1ZS4kY2hpbGRyZW5bMF1cclxuICAgICAgICApXHJcbiAgICAgICAgICByZXR1cm4gdnVlLiRjaGlsZHJlblswXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHZ1ZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdnVlLiRwYXJlbnQ7XHJcbiAgICB9LFxyXG5cclxuICAgIGVtaXRDaGFuZ2VzKGV2dCkge1xyXG4gICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgdGhpcy4kZW1pdChcImNoYW5nZVwiLCBldnQpO1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgYWx0ZXJMaXN0KG9uTGlzdCkge1xyXG4gICAgICBpZiAodGhpcy5saXN0KSB7XHJcbiAgICAgICAgb25MaXN0KHRoaXMubGlzdCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IG5ld0xpc3QgPSBbLi4udGhpcy52YWx1ZV07XHJcbiAgICAgIG9uTGlzdChuZXdMaXN0KTtcclxuICAgICAgdGhpcy4kZW1pdChcImlucHV0XCIsIG5ld0xpc3QpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzcGxpY2VMaXN0KCkge1xyXG4gICAgICBjb25zdCBzcGxpY2VMaXN0ID0gbGlzdCA9PiBsaXN0LnNwbGljZSguLi5hcmd1bWVudHMpO1xyXG4gICAgICB0aGlzLmFsdGVyTGlzdChzcGxpY2VMaXN0KTtcclxuICAgIH0sXHJcblxyXG4gICAgdXBkYXRlUG9zaXRpb24ob2xkSW5kZXgsIG5ld0luZGV4KSB7XHJcbiAgICAgIGNvbnN0IHVwZGF0ZVBvc2l0aW9uID0gbGlzdCA9PlxyXG4gICAgICAgIGxpc3Quc3BsaWNlKG5ld0luZGV4LCAwLCBsaXN0LnNwbGljZShvbGRJbmRleCwgMSlbMF0pO1xyXG4gICAgICB0aGlzLmFsdGVyTGlzdCh1cGRhdGVQb3NpdGlvbik7XHJcbiAgICB9LFxyXG5cclxuICAgIGdldFJlbGF0ZWRDb250ZXh0RnJvbU1vdmVFdmVudCh7IHRvLCByZWxhdGVkIH0pIHtcclxuICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5nZXRVbmRlcmx5aW5nUG90ZW5jaWFsRHJhZ2dhYmxlQ29tcG9uZW50KHRvKTtcclxuICAgICAgaWYgKCFjb21wb25lbnQpIHtcclxuICAgICAgICByZXR1cm4geyBjb21wb25lbnQgfTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBsaXN0ID0gY29tcG9uZW50LnJlYWxMaXN0O1xyXG4gICAgICBjb25zdCBjb250ZXh0ID0geyBsaXN0LCBjb21wb25lbnQgfTtcclxuICAgICAgaWYgKHRvICE9PSByZWxhdGVkICYmIGxpc3QgJiYgY29tcG9uZW50LmdldFVuZGVybHlpbmdWbSkge1xyXG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gY29tcG9uZW50LmdldFVuZGVybHlpbmdWbShyZWxhdGVkKTtcclxuICAgICAgICBpZiAoZGVzdGluYXRpb24pIHtcclxuICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGRlc3RpbmF0aW9uLCBjb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGNvbnRleHQ7XHJcbiAgICB9LFxyXG5cclxuICAgIGdldFZtSW5kZXgoZG9tSW5kZXgpIHtcclxuICAgICAgY29uc3QgaW5kZXhlcyA9IHRoaXMudmlzaWJsZUluZGV4ZXM7XHJcbiAgICAgIGNvbnN0IG51bWJlckluZGV4ZXMgPSBpbmRleGVzLmxlbmd0aDtcclxuICAgICAgcmV0dXJuIGRvbUluZGV4ID4gbnVtYmVySW5kZXhlcyAtIDEgPyBudW1iZXJJbmRleGVzIDogaW5kZXhlc1tkb21JbmRleF07XHJcbiAgICB9LFxyXG5cclxuICAgIGdldENvbXBvbmVudCgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuJHNsb3RzLmRlZmF1bHRbMF0uY29tcG9uZW50SW5zdGFuY2U7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlc2V0VHJhbnNpdGlvbkRhdGEoaW5kZXgpIHtcclxuICAgICAgaWYgKCF0aGlzLm5vVHJhbnNpdGlvbk9uRHJhZyB8fCAhdGhpcy50cmFuc2l0aW9uTW9kZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICB2YXIgbm9kZXMgPSB0aGlzLmdldENoaWxkcmVuTm9kZXMoKTtcclxuICAgICAgbm9kZXNbaW5kZXhdLmRhdGEgPSBudWxsO1xyXG4gICAgICBjb25zdCB0cmFuc2l0aW9uQ29udGFpbmVyID0gdGhpcy5nZXRDb21wb25lbnQoKTtcclxuICAgICAgdHJhbnNpdGlvbkNvbnRhaW5lci5jaGlsZHJlbiA9IFtdO1xyXG4gICAgICB0cmFuc2l0aW9uQ29udGFpbmVyLmtlcHQgPSB1bmRlZmluZWQ7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uRHJhZ1N0YXJ0KGV2dCkge1xyXG4gICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmdldFVuZGVybHlpbmdWbShldnQuaXRlbSk7XHJcbiAgICAgIGV2dC5pdGVtLl91bmRlcmx5aW5nX3ZtXyA9IHRoaXMuY2xvbmUodGhpcy5jb250ZXh0LmVsZW1lbnQpO1xyXG4gICAgICBkcmFnZ2luZ0VsZW1lbnQgPSBldnQuaXRlbTtcclxuICAgIH0sXHJcblxyXG4gICAgb25EcmFnQWRkKGV2dCkge1xyXG4gICAgICBjb25zdCBlbGVtZW50ID0gZXZ0Lml0ZW0uX3VuZGVybHlpbmdfdm1fO1xyXG4gICAgICBpZiAoZWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHJlbW92ZU5vZGUoZXZ0Lml0ZW0pO1xyXG4gICAgICBjb25zdCBuZXdJbmRleCA9IHRoaXMuZ2V0Vm1JbmRleChldnQubmV3SW5kZXgpO1xyXG4gICAgICB0aGlzLnNwbGljZUxpc3QobmV3SW5kZXgsIDAsIGVsZW1lbnQpO1xyXG4gICAgICB0aGlzLmNvbXB1dGVJbmRleGVzKCk7XHJcbiAgICAgIGNvbnN0IGFkZGVkID0geyBlbGVtZW50LCBuZXdJbmRleCB9O1xyXG4gICAgICB0aGlzLmVtaXRDaGFuZ2VzKHsgYWRkZWQgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uRHJhZ1JlbW92ZShldnQpIHtcclxuICAgICAgaW5zZXJ0Tm9kZUF0KHRoaXMucm9vdENvbnRhaW5lciwgZXZ0Lml0ZW0sIGV2dC5vbGRJbmRleCk7XHJcbiAgICAgIGlmIChldnQucHVsbE1vZGUgPT09IFwiY2xvbmVcIikge1xyXG4gICAgICAgIHJlbW92ZU5vZGUoZXZ0LmNsb25lKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgY29uc3Qgb2xkSW5kZXggPSB0aGlzLmNvbnRleHQuaW5kZXg7XHJcbiAgICAgIHRoaXMuc3BsaWNlTGlzdChvbGRJbmRleCwgMSk7XHJcbiAgICAgIGNvbnN0IHJlbW92ZWQgPSB7IGVsZW1lbnQ6IHRoaXMuY29udGV4dC5lbGVtZW50LCBvbGRJbmRleCB9O1xyXG4gICAgICB0aGlzLnJlc2V0VHJhbnNpdGlvbkRhdGEob2xkSW5kZXgpO1xyXG4gICAgICB0aGlzLmVtaXRDaGFuZ2VzKHsgcmVtb3ZlZCB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgb25EcmFnVXBkYXRlKGV2dCkge1xyXG4gICAgICByZW1vdmVOb2RlKGV2dC5pdGVtKTtcclxuICAgICAgaW5zZXJ0Tm9kZUF0KGV2dC5mcm9tLCBldnQuaXRlbSwgZXZ0Lm9sZEluZGV4KTtcclxuICAgICAgY29uc3Qgb2xkSW5kZXggPSB0aGlzLmNvbnRleHQuaW5kZXg7XHJcbiAgICAgIGNvbnN0IG5ld0luZGV4ID0gdGhpcy5nZXRWbUluZGV4KGV2dC5uZXdJbmRleCk7XHJcbiAgICAgIHRoaXMudXBkYXRlUG9zaXRpb24ob2xkSW5kZXgsIG5ld0luZGV4KTtcclxuICAgICAgY29uc3QgbW92ZWQgPSB7IGVsZW1lbnQ6IHRoaXMuY29udGV4dC5lbGVtZW50LCBvbGRJbmRleCwgbmV3SW5kZXggfTtcclxuICAgICAgdGhpcy5lbWl0Q2hhbmdlcyh7IG1vdmVkIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGVQcm9wZXJ0eShldnQsIHByb3BlcnR5TmFtZSkge1xyXG4gICAgICBldnQuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSAmJlxyXG4gICAgICAgIChldnRbcHJvcGVydHlOYW1lXSArPSB0aGlzLmhlYWRlck9mZnNldCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGNvbXB1dGVGdXR1cmVJbmRleChyZWxhdGVkQ29udGV4dCwgZXZ0KSB7XHJcbiAgICAgIGlmICghcmVsYXRlZENvbnRleHQuZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGRvbUNoaWxkcmVuID0gWy4uLmV2dC50by5jaGlsZHJlbl0uZmlsdGVyKFxyXG4gICAgICAgIGVsID0+IGVsLnN0eWxlW1wiZGlzcGxheVwiXSAhPT0gXCJub25lXCJcclxuICAgICAgKTtcclxuICAgICAgY29uc3QgY3VycmVudERPTUluZGV4ID0gZG9tQ2hpbGRyZW4uaW5kZXhPZihldnQucmVsYXRlZCk7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IHJlbGF0ZWRDb250ZXh0LmNvbXBvbmVudC5nZXRWbUluZGV4KGN1cnJlbnRET01JbmRleCk7XHJcbiAgICAgIGNvbnN0IGRyYWdnZWRJbkxpc3QgPSBkb21DaGlsZHJlbi5pbmRleE9mKGRyYWdnaW5nRWxlbWVudCkgIT09IC0xO1xyXG4gICAgICByZXR1cm4gZHJhZ2dlZEluTGlzdCB8fCAhZXZ0LndpbGxJbnNlcnRBZnRlclxyXG4gICAgICAgID8gY3VycmVudEluZGV4XHJcbiAgICAgICAgOiBjdXJyZW50SW5kZXggKyAxO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkRyYWdNb3ZlKGV2dCwgb3JpZ2luYWxFdmVudCkge1xyXG4gICAgICBjb25zdCBvbk1vdmUgPSB0aGlzLm1vdmU7XHJcbiAgICAgIGlmICghb25Nb3ZlIHx8ICF0aGlzLnJlYWxMaXN0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHJlbGF0ZWRDb250ZXh0ID0gdGhpcy5nZXRSZWxhdGVkQ29udGV4dEZyb21Nb3ZlRXZlbnQoZXZ0KTtcclxuICAgICAgY29uc3QgZHJhZ2dlZENvbnRleHQgPSB0aGlzLmNvbnRleHQ7XHJcbiAgICAgIGNvbnN0IGZ1dHVyZUluZGV4ID0gdGhpcy5jb21wdXRlRnV0dXJlSW5kZXgocmVsYXRlZENvbnRleHQsIGV2dCk7XHJcbiAgICAgIE9iamVjdC5hc3NpZ24oZHJhZ2dlZENvbnRleHQsIHsgZnV0dXJlSW5kZXggfSk7XHJcbiAgICAgIGNvbnN0IHNlbmRFdnQgPSBPYmplY3QuYXNzaWduKHt9LCBldnQsIHtcclxuICAgICAgICByZWxhdGVkQ29udGV4dCxcclxuICAgICAgICBkcmFnZ2VkQ29udGV4dFxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIG9uTW92ZShzZW5kRXZ0LCBvcmlnaW5hbEV2ZW50KTtcclxuICAgIH0sXHJcblxyXG4gICAgb25EcmFnRW5kKCkge1xyXG4gICAgICB0aGlzLmNvbXB1dGVJbmRleGVzKCk7XHJcbiAgICAgIGRyYWdnaW5nRWxlbWVudCA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgXCJWdWVcIiBpbiB3aW5kb3cpIHtcclxuICB3aW5kb3cuVnVlLmNvbXBvbmVudChcImRyYWdnYWJsZVwiLCBkcmFnZ2FibGVDb21wb25lbnQpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkcmFnZ2FibGVDb21wb25lbnQ7XHJcbiIsImltcG9ydCAnLi9zZXRQdWJsaWNQYXRoJ1xuaW1wb3J0IG1vZCBmcm9tICd+ZW50cnknXG5leHBvcnQgZGVmYXVsdCBtb2RcbmV4cG9ydCAqIGZyb20gJ35lbnRyeSdcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uc2Nzcz92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vbWFpbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NWUyMTA0ZWYmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vbWFpbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL21haW4udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL21haW4uc2Nzcz92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL2hvbWUvZ2FwcGEv0KDQsNCx0L7Rh9C40Lkg0YHRgtC+0LsvdnVlX3dlYnBhY2svbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnNWUyMTA0ZWYnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNWUyMTA0ZWYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNWUyMTA0ZWYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL21haW4udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTVlMjEwNGVmJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzVlMjEwNGVmJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvY29tcG9uZW50cy9tYWluL21haW4udnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL21haW4udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbWFpbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbWFpbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NWUyMTA0ZWYmXCIiLCJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcbmltcG9ydCBNYWluIGZyb20gJy4vY29tcG9uZW50cy9tYWluL21haW4udnVlJztcblxubmV3IFZ1ZSh7XG4gICAgZWw6ICcjcm9vdCcsXG4gICAgcmVuZGVyOiBoID0+IGgoTWFpbilcbn0pOyJdLCJzb3VyY2VSb290IjoiIn0=